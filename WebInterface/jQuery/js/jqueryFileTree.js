// jQuery File Tree Plugin - Customized version for CrushFTP
// Customized by  Vipul Limbachiya http://vipullimbachiya.com for CrushFTP
//
// Version 1.01
//
// Cory S.N. LaViska
// A Beautiful Site (http://abeautifulsite.net/)
// 24 March 2008
//
// Visit http://abeautifulsite.net/notebook.php?article=58 for more information
//
// Usage: $('.fileTreeDemo').fileTree( options, callback )
//
// History:
//
// 1.01 - updated to work with foreign characters in directory/file names (12
// April 2008)
// 1.00 - released (24 March 2008)
//
// TERMS OF USE
//
// This plugin is dual-licensed under the GNU General Public License and the MIT
// License and
// is copyright 2008 A Beautiful Site, LLC.
//
// Customized by Vipul Limbachiya(http://vipullimbachiya.com) for CrushFTP

/*Upload bar latest localizations, do not change this, use localization instructions*/
window.locale = {
    "fileupload": {
        "errors": {
            "maxFileSize": "File is too big",
            "minFileSize": "File is too small",
            "acceptFileTypes": "Filetype not allowed",
            "maxNumberOfFiles": "Max number of files exceeded",
            "uploadedBytes": "Uploaded bytes exceed file size",
            "emptyResult": "Empty file upload result",
            "fileAvailableInSelectedFolder" : "File already added to upload in the same folder",
            "hasReachedQuota": "File size is bigger than your quota",
            "fileExistOnServer" : "File exist on server",
            "fileBiggerThanAllowed" : "File is bigger than allowed size",
            "dirNoWritable" : "You can not upload to this directory",
            "blockUploadingDirs" : "Uploading directory is not allowed",
            "true" : "true"
        },
        "error": "Error",
        "start": "Start",
        "waiting" : "Waiting...",
        "uploading" : "Uploading : ",
        "reupload" : "Re-Upload",
        "share" : "Share",
        "cancel": "Cancel",
        "destroy": "Delete",
        "overwrite" : "Overwrite",
        "uploadTo" : "Upload to : ",
        "pause" : "Pause",
        "errorLabel" : "Error : ",
        "details" : "Details",
        "uploadedInLabelText" : "Uploaded in : ",
        "atAvgSpeedOfLabelText" : "at Avg. Speed of : ",
        "uploadCompletedText" : "Upload Completed",
        "uploadedFileText" : "File uploaded to server",
        "uploadedMultipleFilesText" : "All files uploaded."
    }
};
window.dateSeparator = "/";
// FTP WebInterface Localization options
var localizations = {};
localizations.slideshow = {};
//WebInterface
localizations.languageName = "English";
localizations.FilterText = localizations.FilterTextBasket = "Filter:";
localizations.ClearFilterLinkText = localizations.ClearFilterLinkTextBasket = "Clear";
localizations.FileCounterItemsText = "Items";
localizations.FileCounterFoldersText = "Folders";
localizations.FileCounterFilesText = "Files";
localizations.FileCounterHiddenItemsText = "Hidden Items";
localizations.ThumbnailViewLinkText = localizations.ThumbnailViewLinkTextBasket = "Thumbnail View";
localizations.TreeViewLinkText = localizations.TreeViewLinkTextBasket = "Tree View";
localizations.DownloadResumeTextLabelBasket = "Resume"
localizations.BackToTopLinkText = "Back to top";
localizations.FilesNotAvailableMessage = "No files available";
localizations.CopyNoFilesSelectedMessage = "Please select files/folders to copy";
localizations.CopyOnlyFilesMessage = "You can cut/copy only files, selected folders will be ignored";
localizations.DeleteNoFilesSelectedMessage = "Please select files/folders to delete";
localizations.UnzipNoFilesSelectedMessage = "Please select file to unzip";
localizations.ZipExploreNoFilesSelectedMessage = "Please select zip to explore";
localizations.CutNoFilesSelectedMessage = "Please select files/folders to cut";
localizations.pagingPrevText = "Prev";
localizations.pagingNextText = "Next";
localizations.pagingEllipseText = "...";
localizations.FilterItemCountText = "(Items with phrase \"{filterVal}\" : {totalItems} , Folders: {folders} Files: {files})";
localizations.TotalItemsInDirMsgText = " (Total items in directory {count}) ";
localizations.CurrentFileSizeText = " (Total file size in list {size}) ";
localizations.TotalItemsInDirInlineText = " ({count} items) ";
localizations.quotaAvailableLabelText = "available";

localizations.WelcomeNoteSubmitFormFailureMsgText = "Error: Problem while saving data";
localizations.TreeviewSpecificActionMsgTitleText = "For tree view only";
localizations.TreeviewSpecificActionMsgDescText = "This is specific to tree view only";
localizations.PasswordExpiringMsgText = "Password Expiring Soon<br/>Use User Options button to change.";
localizations.PasswordNotMatchingMsgText = "New passwords don't match.";
localizations.PasswordMustBeComplexMsgText = "Password must be more complex.";
localizations.PasswordChangedMsgText = "Password changed.  Please login using the new password.";
localizations.AppletLoadingFailedMsgText = "Applet failed while uploading";
localizations.DownloadStartedAlertTitleText = "Download has started";
localizations.DownloadCompletedText = "[Download Completed]";
localizations.DownloadCompletedPathText = " Downloaded to : ";
localizations.DownloadStartedAlertDescText = "Please select location to save your file(s) to proceed";
localizations.LogoutButtonText = "Logout";
localizations.browserUploaderNativeUploadTipSetTitle = "Upload files using browser uploader.";
localizations.browserUploaderAdvancedUploadTipSetTitle = "Upload files using the advanced uploader, <br>it allows folders and may accelerate the transfer.";
localizations.browserUploaderDragDropHoverLabelText = "Drop files here to upload";
localizations.appletUploaderDropPanelLabelText = "&darr; Drop files below to upload &darr;";

//Sharing Window
localizations.ShareWindowHeaderText = "Sharing Files";
localizations.ShareWindowFilesSharingLabelText = "Sharing :";
localizations.ShareWindowShareTypeLabelText = "Share Type :";
localizations.ShareWindowShareTypeLabelCopyText = "Copy";
localizations.ShareWindowShareTypeLabelMoveText = "Move";
localizations.ShareWindowShareTypeLabelReferenceText = "Reference";
localizations.ShareWindowShareToInternalUserLabelText = "Internal Share";
localizations.ShareWindowShareToExternalUserLabelText = "External Share";
localizations.ShareWindowDownloadLabelText = "Download";
localizations.ShareWindowUploadLabelText = "Upload";
localizations.ShareWindowDeleteLabelText = "Delete";
localizations.ShareWindowSendEmailLabelText = "Send Email :";
localizations.ShareWindowDirectLinkLabelText = "Direct link to file?";
localizations.ShareWindowMaxUsesLabelText = "Maximum number of uses :";
localizations.ShareWindowMaxUsesUnlimitedText = "Unlimited";
localizations.ShareWindowExpiresLabelText = "Expires :";
localizations.ShareWindowExpiresInDaysValidationErrorText = "Expiration days can't be more than {days} days";
localizations.ShareWindowFromLabelText = "From : ";
localizations.ShareWindowToLabelText = "To : ";
localizations.ShareWindowCCLabelText = "CC : ";
localizations.ShareWindowBCCLabelText = "BCC : ";
localizations.ShareWindowSubjectLabelText = "Subject : ";
localizations.ShareWindowBodyLabelText = "Body : ";
localizations.ShareWindowAdvancedLabelText = "Advanced";
localizations.ShareWindowAttachThumbsLabelText = "Attach Thumbnail";
localizations.ShareWindowAttachFileLabelText = "Attach Files";
localizations.ShareWindowAccessLabelText = "Full Access ";
localizations.ShareWindowSendButtonText = "Send";
localizations.ShareWindowCancelButtonText = "Cancel";
localizations.ShareWindowUsernameMethodLabelText = "Share Method : ";
localizations.ShareWindowUsernameLabelText = "Share to Internal User";
localizations.ShareWindowUsernamesLabelText = "Usernames : ";
localizations.ShareWindowUsernamesLabelHelpText = "(Separate multiple usernames with commas.)";
localizations.ShareActionCompleteShareUsernamesText = "The following users have now been granted access to the shared items.";
localizations.ShareActionCompleteUsernameText = "Username: ";
localizations.ShareActionCompletePasswordText = "Password: ";
localizations.ShareActionCompleteLinkText = "Link";
localizations.ShareActionCompleteOkButtonText = "OK";
localizations.ShareActionEmailValidationFailureHelpToolTip = "Please enter valid email address. You can enter multiple email addresses at once separated by comma. ie. <strong>bob@email.com, john@email.com,...</strong>";
localizations.ShareInternalSelectUserWarning = "Please select users to share selected items";
localizations.ShareInternalSelectUserDeniedMessage = "Selected user/pass for the share was denied, please choose other user/pass";
localizations.ShareSelectUserPassWarning = "Please select user/pass for the share";
localizations.ShareLinkCopyToClipboardText = "Copy link to clipboard";
localizations.ShareBodyCopyToClipboardText = "Copy email body to clipboard";
localizations.ShareLinkCopiedToClipboardText = "Link copied to clipboard";
localizations.ShareEmailCopiedToClipboardText = "Email body copied to clipboard";

//Copy direct link window
localizations.CopyLinkWindowHeaderText = "Copy direct link.";
localizations.CopyLinkText = "Copy link";
//Create folder window
localizations.CreateFolderWindowHeaderText = "Create new folder.";
localizations.CreateFolderInputDefaultFolderName = "New Folder";
localizations.CreateFolderWindowNavigateToFolderCheckboxText = "Navigate to the folder after creation ";
localizations.CreateFolderButtonText = "Create";
//Browser uploader window
localizations.BrowserUploaderWindowHeaderText = "Upload file";
localizations.BrowserUploaderUploadDetailsTabHeaderText = "Upload Details";
localizations.BrowserUploaderUploadFilesTabHeaderText = "Upload Files";
localizations.BrowserUploaderAdvancedBrowseButtonText = "Advanced Browse..";
localizations.BrowserUploaderStartUploadingLinkText = "Start Uploading";
localizations.BrowserUploaderClearCompletedLinkText = "Clear Completed";
localizations.BrowserUploaderResumeCheckboxText = "Resume";
localizations.BrowserUploaderFormResetButtonText = "Reset";
localizations.BrowserUploaderFormNextButtonText = "Next";
localizations.BrowserUploaderFileAddedAlreadyText = "This file has already been added.";
localizations.BrowserUploaderFileAddedAlreadyDetailsText = "{0} has already been added.";
localizations.BrowserUploaderMultiFileAddedAlreadyText = "These files are already added.";
localizations.BrowserUploaderMultiFileAddedAlreadyDetailsText = "{0} are already added.";
localizations.BrowserUploaderSelectedFilesGroupText = "File Group : ";
localizations.BrowserUploaderSelectedFileRemoveLinkText = "Remove";
localizations.BrowserUploaderSelectedFileWillBeUploadedText = "Will be uploaded to";
localizations.BrowserUploaderSelectedFileOverwriteText = "Overwrite";
localizations.BrowserUploaderSelectedFileWillBeOverwrittenText = "will be overwritten";
localizations.BrowserUploaderSelectedFileExistsText = "File exist";
localizations.BrowserUploaderSelectedFileAttentionRequiredText = "Attention Required";
localizations.BrowserUploaderSelectedFileIgnoreLinkText = "Ignore";
localizations.BrowserUploaderSelectedFileDoneText = "Done";
localizations.BrowserUploaderSelectedFileUploadedText = "Uploaded to";
localizations.BrowserUploaderSelectedFileReUploadLinkText = "re-upload";
localizations.BrowserUploaderSelectedFileReDownloadLinkText = "re-download";
localizations.BrowserUploaderSelectedFileDismissLinkText = "Dismiss";
localizations.BrowserUploaderSelectedFileCancelLinkText = "Cancel";
localizations.BrowserUploaderSelectedFilePauseLinkText = "Pause";
localizations.BrowserUploaderSelectedFilePausedStatusText = "Paused";
localizations.BrowserUploaderSelectedFileResumeLinkText = "Resume";
localizations.BrowserUploaderAdvancedUploadingFilesText = "Total {0} File(s)";
localizations.BrowserUploaderAdvancedUploadingFilesStatusText = "{0} of {1} item(s) ";
localizations.BrowserUploaderAdvancedUploadingFilesToText = "Uploading to : ";
localizations.BrowserUploaderAdvancedUploadingSpeedText = "Current Speed : ";
localizations.BrowserUploaderAdvancedUploadingAverageSpeedText = "Avg. Speed : ";
localizations.BrowserUploaderAdvancedUploadingTimeText = "<div class='time'> Time: Elapsed: <span class='elapsed'>{0}</span> <span class='remained'>, Remaining : {1}</span></div>";
localizations.BatchCompleteText = "Result";
localizations.BatchComplete = "Transfers Acknowledged.";
localizations.BrowserUploaderSpeedTimeCalculatingText = "Calculating..";
localizations.BrowserUploaderProblemWhileTransferMsgText = "Problem while transferring";
localizations.BrowserUploaderCancelledUploadMsgText = "Cancelled uploading";
localizations.BrowserUploaderAlertWhileNavigatingAwayMsgText = "Your file(s) are currently uploading.  If you navigate away from this page you will lose them.  Are you sure you want to exit this page?";
localizations.BrowserDownloadAlertWhileNavigatingAwayMsgText = "Your files are currently downloading. If you navigate away from this page you will lose them.  Are you sure you want to exit this page?";
localizations.DelayedUploadAlertWhileNavigatingAwayMsgText = "You have pending delayed file upload timer. If you navigate away from this page your selected files will not be uploaded.  Are you sure you want to exit this page?";
localizations.DelayedUploadConfirmCancelText = "Are you sure you wish to stop the upload timer?";
localizations.DelayedUploadNonNumericValAlertText = "Please enter numeric value for minutes";
localizations.DelayedUploadPastTimeAlertText = "Please select time in future";

localizations.NoUploadInDirGrowlText = "Upload not allowed";
localizations.NoUploadInDirGrowlDesc = "Uploading items to selected directory is not allowed";
localizations.AdvancedUploadDirNotAllowedText = "Uploading directory is not allowed";
localizations.AdvancedUploadDirNotAllowedDescText = "Directories can not be uploaded, select only files";
localizations.uploadConfirmCancelUploadText = "Are you sure you wish to cancel this upload?";
localizations.uploadConfirmCancelUploadAfterFormText = "Are you sure you wish to cancel upload for last selected {count} item(s)?";

//New upload bar localizations
localizations.browseFileLabelByClass = "Add files...";
localizations.advancedUploadResumeLabelByClass = "Resume";
localizations.filesToUploadQueueWindowHeader = "Files to upload";
localizations.uploadWindowStartUploadingByClass = "Start Uploading";
localizations.uploadWindowCancelUploadingByClass = "Cancel Uploading";
localizations.uploadWindowClearUploadedByClass = "Clear uploaded";
localizations.uploadWindowOverwriteAllByClass = "Overwrite all";
localizations.uploadWindowRemoveAllWithErrorsByClass = "Remove all with errors";
localizations.uploadWindowSummaryFilesByClass = "Files : ";
localizations.uploadWindowSummarySizeByClass = ", Upload size : ";
localizations.uploadBarShowHideFilesSetTitleClass = "Show/Hide selected files";
localizations.uploadBarAttentionTitle = "Now add files from upload bar";
localizations.uploadBarAttentionText = "Use upload bar to add files to upload. Click on \"" + localizations.browseFileLabelByClass + "\" button to add files";
localizations.uploadBiggerFileNoticeTitleText = "For bigger files use advanced upload";
localizations.uploadBiggerFileNoticeDescText = "<span class='growlNote'>It is advised to use advanced upload for bigger files, it allows to upload files easily and has <em>auto resume</em> feature. <br><br> (You can switch upload mode in Upload Bar)</span><br><img src='/WebInterface/jQuery/images/UploadBarGuide.png' style='padding-top:10px;margin-left:20px;' title='How to switch upload mode'>";

localizations.globalProgressbarSkipLabelByClass = "Skip";
localizations.globalProgressbarPauseLabelByClass = "Pause";
localizations.globalProgressbarStopLabelByClass = "Stop";

localizations.popupOpenInSeparateWindowText = "Open in a separate window";
localizations.customFormPasswordMatchValidationFailedText = "Password does not match";
localizations.customFormCompareValueMatchValidationFailedText = "Values does not match";

localizations.syncAppName = "CrushSync";

//New upload/download log dialog
localizations.javalogDialogTitle = "Log";
localizations.javalogDialogCloseButton = "Close";
localizations.javalogDialogClearButton = "Clear";

if(typeof window.locale != "undefined")
{
    window.locale.fileupload.SwitchToNormalUpload = "Switch to Normal Upload";
    localizations.uploadWindowUploadTypeSwitchSetTitleClass = window.locale.fileupload.SwitchToAdvancedUpload = "Switch to Advanced Upload.<div style='font-size:11px;width:500px;margin:5px 0px;'>The advanced mode will accelerate transfers. It can automatically resume if a transfer fails, and can upload entire folders all at once.<br><br>It is the fastest way to upload files.<br>(Advanced mode requires the Java Applet plugin from www.java.com to be installed.)</div>";
}

//Search window
localizations.SearchWindowHeaderText = "Search";
localizations.SearchWindowKeywordsLabelText = "Keywords :";
localizations.SearchWindowExactLabelText = "Exact?";
localizations.SearchWindowByClassModifiedLabelText = "Modified";
localizations.SearchWindowByClassDateFormatLabelText = "(mm/dd/yyyy) ";
localizations.SearchWindowSizeLabelByClassText = "Size is ";
localizations.SearchWindowTypeLabelText = "Type is a";
localizations.SearchWindowSizeUnitLabelTextByClass = "(Kilobytes)";
localizations.SearchWindowSearchButtonText = "Start Search";
localizations.SearchWindowCancelButtonText = "Cancel";
localizations.SearchResultDisplayText = "Search Result:";
localizations.SearchResultClearLinkText = "(Clear Search Filter)";
localizations.SearchFormModifiedOptionAfterText = "After";
localizations.SearchFormModifiedOptionBeforeText = "Before";
localizations.SearchFormSizeOptionBiggerThanText = "Bigger Than";
localizations.SearchFormSizeOptionSmallerThanText = "Smaller Than";
localizations.SearchFormItemTypeOptionFileText = "File";
localizations.SearchFormItemTypeOptionFolderText = "Folder";
localizations.SearchProcessNotificationText = "Processing... ";
localizations.SearchProcessCancelText = "Cancel";
localizations.SearchItemsContextGoToParentText = "Go To Parent Folder";
//Multiple file selection options
localizations.ItemsSelectionDisplayText = "All <strong>{count}</strong> items on this page are selected.";
localizations.ItemsSelectionSelectAllItemsInDir = "Select all <strong>{total_items}</strong> items in <strong>{list_type}</strong> (including hidden items)</span>";
localizations.ItemsSelectionSelectedAllItemsInDir = "All <strong>{total_items}</strong> items in <strong>{list_type}</strong> (including hidden items) are selected";
localizations.ItemsSelectionClearSelection = "Clear selection";
localizations.ItemsSelectionShowingFolderText = "Current Folder";
localizations.ItemsSelectionShowingFilteredItemsText = "Current filtered list";
localizations.ItemsSelectionShowingSearchedItemsText = "Search result";
//User options window
localizations.UserOptionsWindowHeaderText = "Preferences";
localizations.UserOptionsWindowHideItemsStartWithDotLabelText = "Hide '.' Items ";
localizations.UserOptionsWindowHideCheckboxLabelText = "Hide Checkbox Column ";
localizations.UserOptionsWindowHideFilterLabelText = "Hide Filter Section ";
localizations.UserOptionsWindowAutostartUploadLabelText = "When choosing file to upload, auto start upload. ";
localizations.UserOptionsWindowLoadJavaAppletLabelText = "When loading the interface, load the Java applet.";
localizations.UserOptionsWindowDisableCompressionLabelText = "Disable compression on the Java applet. ";
localizations.UserOptionsWindowChangePasswordHeaderText = "Change your password ";
localizations.UserOptionsWindowChangePasswordCurPassLabelText = "Current Password: ";
localizations.UserOptionsWindowChangePasswordNewPassLabelText = "New Password: ";
localizations.UserOptionsWindowChangePasswordConfirmPassLabelText = "Confirm Password:";
localizations.UserOptionsWindowChangePasswordButtonText = "Change Password";
localizations.UserOptionsWindowChangePasswordGenerateRandomButtonText = "Generate random password";
localizations.UserOptionsWindowChangePasswordGenerateRandomUseItLinkText = "Use this";
localizations.UserOptionsWindowChangePasswordGenerateRandomCancelLinkText = "Cancel";
localizations.ChangePasswordCurrentPasswordNotCorrectWarningText = "You did not enter the correct current password.";

//Main checkbox context menu options
localizations.MainCheckboxContextMenuToggleText = "Toggle";
localizations.MainCheckboxContextMenuCheckAllText = "Check All";
localizations.MainCheckboxContextMenuUncheckAllText = "Un-check All";
//Keywords window
localizations.KeywordsWindowHeaderText = "Keywords";
localizations.KeywordsWindowUpdateLinkText = "Update";
localizations.KeywordsWindowCancelLinkText = "Cancel";
//File basket
localizations.BasketHeaderText = "Files in the Basket";
localizations.BasketClearAllLinkText = "Clear all";
localizations.BasketDownloadLinkText = "Download Basket";
localizations.BasketDownloadAdvancedLinkText = "Download Basket Advanced";
localizations.BasketNoFilesAvailableText = "No Files Available";
localizations.BasketRemoveLinkText = "Remove";
localizations.BasketTotalItemText = "{0} Items ";
localizations.BasketFileAddedAlreadyText = "File already added to the basket";
localizations.BasketFileAddedAlreadyDetailsText = "Selected file is already available in the basket";
localizations.BasketNothingSelectedToAddText = "Nothing selected to add to the basket";
localizations.BasketNothingSelectedToAddDetailsText = "&nbsp;";
localizations.BasketClearAllConfirmMessage = "Are you sure you wish to clear all selected files in Basket?";
//Paste form panel
localizations.PasteFormHeaderText = "Paste";
localizations.PasteFormResetButtonText = "Reset";
localizations.PasteFormPasteButtonText = "Paste";
localizations.PasteFormErrorHeaderText = "Problem while pasting";
localizations.PasteFormErrorDetailsText = "There was a problem while pasting items.<br />Error : {0}";
localizations.PasteFormErrorNothingToPasteText = "There is nothing to paste";
localizations.PasteSelectDirectoryWarning = "Please select a target to paste copied items";
localizations.PasteSelectSingleDirectoryWarning = "Please select single target to paste copied items";
//Welcome form panel
localizations.WelcomeFormHeaderText = "Welcome";
localizations.WelcomeFormOkButtonText = "OK";
//upload form panel
localizations.UploadFormHeaderText = "Upload Details";
localizations.UploadFormOkButtonText = "OK";
localizations.UploadFormCancelButtonText = "Cancel";
//Slideshow popup
localizations.SlideshowPopupHeaderText = "Slideshow";
//Manage Share window
localizations.ManageShareWindowHeaderText = "Manage Shares";
localizations.ManageShareWindowRefreshLinkText = "Refresh";
localizations.ManageShareWindowDeleteSelectedLinkText = "Delete Selected Items";
localizations.ManageShareWindowDeleteLinkText = "Delete";
localizations.ManageShareWindowGridLinkLabelText = "Link";
localizations.ManageShareWindowGridFromLabelText = "From";
localizations.ManageShareWindowGridToLabelText = "To";
localizations.ManageShareWindowGridCCLabelText = "CC";
localizations.ManageShareWindowGridBCCLabelText = "BCC";
localizations.ManageShareWindowGridSubjectLabelText = "Subject";
localizations.ManageShareWindowGridBodyLabelText = "Body";
localizations.ManageShareWindowGridShareTypeLabelText = "Share Type";
localizations.ManageShareWindowGridUserNameLabelText = "Username";
localizations.ManageShareWindowGridPasswordLabelText = "Password";
localizations.ManageShareWindowGridAttachedLabelText = "Attached in Email?";
localizations.ManageShareWindowGridUploadLabelText = "Upload Allowed?";
localizations.ManageShareWindowGridRemainingUsesLabelText = "Remaining Uses";
localizations.ManageShareWindowGridPathsLabelText = "Paths";
localizations.ManageShareWindowGridCreatedLabelText = "Created";
localizations.ManageShareWindowGridExpiresLabelText = "Expires";
localizations.ManageShareWindowGridSharedItemsLabelText = "Shared Items";
localizations.ManageShareWindowGridDownloadsLabelText = "Downloads";
localizations.ManageShareWindowNothingToShowMessageText = "Nothing to display";
localizations.ManageShareWindowDeleteAccountConfirmationText= "Are you sure you wish to delete selected {count} account(s) ?";
localizations.ManageShareWindowFilterText = "Filter :";
localizations.ManageShareWindowClearFilterText = "Clear";
localizations.ManageShareWindowNextItemText = "Next";
localizations.ManageShareWindowPrevItemText = "Prev";
localizations.ManageShareWindowSelectSimilarText = "Select Similar";
localizations.ManageShareMaximumUsesUnlimitedLabelText = "Unlimited";

//Revisions panel
localizations.RevisionsWindowHeaderText = "Revisions";

//Rename widndow and panel
localizations.RenameWindowHeaderText = "Rename";
localizations.RenamePanelSaveLinkText = "Save";
localizations.RenamePanelCancelLinkText = "Cancel";

localizations.ZipNameWindowHeaderText = "Zip file name";
localizations.ZipNamePanelSaveLinkText = "OK";
localizations.ZipNamePanelCancelLinkText = "Cancel";

localizations.SyncAppNameWindowHeaderText = "Sync application download";
localizations.SyncAppDownloadYourPassText = "Your Password : ";
localizations.SyncAppDownloadAdminPassText = "Admin Password : ";
localizations.SyncAppNamePanelSaveLinkText = "OK";
localizations.SyncAppNamePanelCancelLinkText = "Cancel";

//Tooltip info
localizations.TooltipNameLabelText = "Name";
localizations.TooltipPathLabelText = "Path";
localizations.TooltipSizeLabelText = "Size";
localizations.TooltipModifiedLabelText = "Modified";
localizations.TooltipKeywordsLabelText = "Keywords";

//Form alerts and notifications
localizations.FormValidationFailText = "One or more required items are not entered or not entered properly. Enter proper value for the items with * in below form";
localizations.FormEmailValidationFailText = "<br> - Enter valid email address for email field(s)";
localizations.DeleteConfirmationMessageText = "{0} folder(s) and {1} file(s) will be deleted.\n\nItems: {2} Once deleted it can not revert back.";
localizations.DeleteConfirmationMessageRemoveAllItemsInDirText = "All items in folder \"{folder_name}\" will be deleted.\n\nTotal {count} items will be deleted.\n\nOnce deleted it can not revert back";
localizations.CopyActionGrowlText = "Total {0} folder(s) and {1} file(s) copied.";
localizations.CutActionGrowlText = "Total {0} folder(s) and {1} file(s) cut.";
localizations.NothingSelectedGrowlText = "Nothing selected";
localizations.ShareNothingSelectedGrowlText = "Nothing selected to share";
localizations.DownloadNothingSelectedGrowlText = "Nothing selected to download";
localizations.RenameNothingSelectedGrowlText = "Nothing selected to rename";
localizations.PreviewNothingSelectedGrowlText = "Nothing selected for preview";
localizations.NoPreviewGrowlText = "Preview";
localizations.NoPreviewGrowlDesc = "No preview available for selected item";
localizations.ProblemWhileRenamingGrowlText = "Problem while renaming";
localizations.ProblemWhileRenamingDescGrowlText = "There was a problem while renaming. Please retry. Error : ";
localizations.ProblemWhileSharingGrowlText = "Problem while sharing";
localizations.ProblemWhileSharingDescGrowlText = "There was a problem while sharing a file. Please retry";
localizations.DirectLinkDescGrowlText = "Right click on item and click on copy direct link";
localizations.UpdateKeywordDescGrowlText = "Right click on item and click on update keywords";
localizations.QuickViewNothingToShowGrowlText = "Error : Nothing to show in quick view";
localizations.QuickViewNoItemsAvailableGrowlText = "No items available";
localizations.QuickViewRotateClockwiseTooltipText = "Rotate Clockwise";
localizations.QuickViewRotateCounterClockwiseTooltipText = "Rotate Counter-Clockwise";
localizations.QuickViewCurrentImagePositionText = "Item {current} of {total}";
localizations.ProblemWhileDeletingGrowlText = "Problem while deleting";
localizations.ProblemWhileDeletingDescGrowlText = "There was a problem while deleting. Please retry. Error : ";
localizations.ProblemWhileUnzipGrowlText = "Problem while unzipping file(s)";
localizations.ProblemWhileUnzipDescGrowlText = "There was a problem while unzipping. Please retry. Error : ";
localizations.ProblemWhileZipGrowlText = "Problem while zipping file(s)";
localizations.ProblemWhileZipDescGrowlText = "There was a problem while zipping. Please retry. Error : ";
localizations.ProblemWhileCreatingFolderGrowlText = "Problem while creating new folder";
localizations.ProblemWhileCreatingFolderDescGrowlText = "There was a problem while creating new folder. Please retry. Error : ";
localizations.JavaRequiredGrowlText = "Java Required";
localizations.JavaRequiredDescGrowlText = "Java must be installed for the advanced functions to work.<br/><br/>Please go to: <a target=\"_blank\" href=\"http://www.java.com/\" class=\"whiteError\">http://www.java.com/</a>";
localizations.JavaLoadingProblemGrowlText = "Problem while loading Java";
localizations.JavaLoadingProblemDescGrowlText = "There was a problem while loading Java, if Java is disabled in browser, please enable and try again.";
localizations.JavaAppletNotLoadedGrowlText = "Java Applet Not Loaded";
localizations.JavaAppletNotLoadedDescGrowlText = "You must first click the 'Advanced Browse...' button before drag and drop will be enabled.";
localizations.InvalidPathGrowlTitle = "Invalid Directory";
localizations.InvalidPathGrowlText = "Backend storage not available, or invalid directory:";
localizations.NoFilesFoundGrowlTitle = "Backend storage unavailable";
localizations.NoFilesFoundGrowlText = "Error : Backend storage unavailable for location:";
localizations.AutoLogOutConfirmationTitle = "Auto Logout";
localizations.AutoLogOutConfirmationDesc = "You are about to be signed out due to inactivity";
localizations.AutoLogOutButtonText = "Stay logged in";
localizations.AutoLogOutMsg = "You are signed out due to inactivity";
localizations.AutoLogOutLoginButtonText = "Login again..";
//Treeview header items
localizations.TreeviewHeaderNameText = "Name";
localizations.TreeviewHeaderPathText = "Path";
localizations.TreeviewHeaderSizeText = "Size";
localizations.TreeviewHeaderModifiedText = "Modified";
localizations.TreeviewHeaderKeywordsText = "Keywords";
//Selection menu items
localizations.SelectItemOptionLinkText = "Select";
localizations.SelectCheckboxContextMenuToggleText = "Toggle";
localizations.SelectCheckboxContextMenuCheckAllText = "All items";
localizations.SelectCheckboxContextMenuUncheckAllText = "None";
localizations.SelectCheckboxContextMenuCheckAllFilesText = "All files";
localizations.SelectCheckboxContextMenuCheckAllFoldersText = "All folders";
localizations.SelectCheckboxContextMenuCheckItemsWithDotText = "Items starting with \".\"";
localizations.SelectCheckboxContextMenuCheckTodayText = "Modified today";
localizations.SelectCheckboxContextMenuCheckWeekText = "Modified this week";
localizations.SelectCheckboxContextMenuCheckMonthText = "Modified this month";
localizations.SelectCheckboxContextMenuCheck2MonthsText = "Modified in last 60 days";
localizations.SelectCheckboxContextMenuCheck3MonthsText = "Modified in last 90 days";
// Page size selection menu item.
localizations.PageSizeSelectionLinkText = "Show {0} items on page";
//Webinterface labels
localizations.CopyrightText = "&copy; 2018 <a target=\"_blank\" href=\"http://www.CrushFTP.com/\">CrushFTP</a>";
localizations.PoweredByText = "Powered by <a target=\"_blank\" href=\"http://www.crushftp.com/\">CrushFTP</a>";
// Applet browse window title options
localizations.advancedUploadItemsSelectionWindowTitle = "Choose items to upload..";
localizations.advancedDownloadPathSelectionWindowTitle = "Choose path where to download..";
localizations.advancedOperationsDownloadStatus = "Downloading";
localizations.advancedOperationsUploadStatus = "Uploading";

localizations.maxAllowedDownloadSizeReached = "Download size exceeded the maximum allowed size"; //Header of growl to display when download reaches maximum allowed size
localizations.maxAllowedDownloadSizeReachedText = "Maximum size allowed to download : {size}. <br />Use the advanced downloader, or add to basket instead."; //Text of growl to display when download reaches maximum allowed size

// Change icon window items
localizations.ChangeIconWindowHeaderText = "Change icon ";
localizations.ChangeIconWindowInstructionsText = "Choose a small image to set as the icon for selected item:";
localizations.ChangeIconWindowSelectedFilesLabelText = "Selected file : ";
localizations.ChangeIconWindowCancelLinkText = "Cancel";
localizations.ChangeIconWindowUpdateLinkText = "Save";
localizations.ChangeIconFileSelectAlertText = "Please select image file to continue.";

//unzip operation
localizations.UnzipStartedAlertTitleText = "Unzip has started";
localizations.UnzipStartedAlertDescText = "Unzip operation has started for selected files";
localizations.UnzipCompletedAlertTitleText = "Unzip has completed";
localizations.UnzipCompletedAlertDescText = "Unzip operation has completed for selected files";

//zip operation
localizations.ZipStartedAlertTitleText = "Zip has started";
localizations.ZipStartedAlertDescText = "Zip operation has started for selected files";
localizations.ZipCompletedAlertTitleText = "Zip has completed";
localizations.ZipCompletedAlertDescText = "Zip operation has completed for selected files";

//Signup-Page
localizations.RegisterWindowProcessCompletedTitle = "Registration completed : ";
localizations.RegisterWindowProcessCompleteMessage = "You can login using registered user once it is enabled by admin.";
localizations.RegisterWindowProcessFailedMessage = "<strong>Few reasons why registration can fail : </strong><br><br>- The username is already in use. <br> - Server is temporarily not allowing registrations.  <br><br> Please try again, or contact your administrator.";

//Data size format items
localizations.dataByClassFormatBytes = "bytes";
localizations.dataByClassFormatKiloBytes = "KB";
localizations.dataByClassFormatMegaBytes = "MB";
localizations.dataByClassFormatGigaBytes = "GB";
localizations.dataByClassFormatTeraBytes = "TB";

localizations.loadingIndicatorText = "Please wait...";

localizations.bytesSentLabelTextByClass = "Sent :";
localizations.bytesReceivedLabelTextByClass = "Received :";
localizations.dirInfoDownloadLabelTextByClass = "Download : ";
localizations.dirInfoUploadLabelTextByClass = "Upload : ";
localizations.maxAndAvailableAmountLabelTextByClass = "Available/Max :";
localizations.maxAmountPerDayLabelTextByClass = "Per Day :";
localizations.quotaAvailableTextByClass = "available";
localizations.maxAmountPerMonthLabelTextByClass = "Per Month :";


//Server message localized
localizations.share_complete = "Publish Completed.";
localizations.share_email_sent = "Email message sent.";
localizations.share_open_in_email_client = "Open in Email Client";
localizations.email_failed = "<div class='errorMessage'>SMTP failed to send the email.  Check server logs.</div>";

//Custom form
localizations.loadingPageInFormFailedTitle = "Loading failed : ";

localizations.CustomEventCallSuccessTitle = "Success";
localizations.CustomEventCallSuccessDesc = "Custom Event Initiated";
localizations.CustomEventCallFailureTitle = "Failure";
localizations.CustomEventCallFailureDesc = "There was a problem while running custom event";

//For Advanced Upload/Download Options
localizations.advancedUploadOptionsDialogTitle = "Advanced Options";
localizations.advancedDownloadOptionsButtonText = "Advanced Download Options";
localizations.advancedUploadOptionsDialogSaveButtonText = "Save";
localizations.advancedUploadOptionsDialogCancelButtonText = "Cancel";
localizations.advancedUploadOptionsItemAvailableLabel = "When an existing item is found :";
localizations.advancedUploadOptionsUseCompressionLabel = "Use compression :";
localizations.advancedUploadOptionsAskActionDialogTitle = "Please confirm your action";
localizations.advancedUploadOptionsAskActionForFileDialogTitle = "Please confirm your action for the file :";
localizations.advancedUploadOptionsAskActionLabelByClass = "Action :";
localizations.advancedUploadOptionsAskActionDialogBtnText = "OK";
localizations.advancedUploadActionOverWriteSelectOptionText = "Overwrite";
localizations.advancedUploadActionOverWriteAllSelectOptionText = "Overwrite All";
localizations.advancedUploadActionResumeSelectOptionText = "Resume";
localizations.advancedUploadActionResumeAllSelectOptionText = "Resume All";
localizations.advancedUploadActionSkipSelectOptionText = "Skip";
localizations.advancedUploadActionSkilAllSelectOptionText = "Skip All";
localizations.advancedUploadActionAskSelectOptionText = "Ask";
localizations.advancedUploadActionCompressionYesSelectOptionText = "Yes";
localizations.advancedUploadActionCompressionNoSelectOptionText = "No";
localizations.maxListItemsWarningMessage = "Large directory listings cause significant performance issues. We suggest organizing items into subfolders to prevent performance issues.";
localizations.MaxUploadFilesCountReachedGrowlText = "Max number of files exceeded";
localizations.MaxUploadFilesCountReachedGrowlDesc = "Max number of files allowed to upload exceeded, maximum files allowed to upload:";
// Extensions/file types ready for preview using media plugin
window.mediaFileExtensions = ["3gp","3gpp","3g2","aif","aifc","aiff","asf","avi","flv", "gif","h264", "m4v","mid","mkv","mov","mp2","mp3","mp4","ogg","webm","mpa","mpe","mpeg","mpg","mpv2","swf","wav","wmv", "mts"];

//variable for record checkboxes added by carlos
window.checkBoxesSelected = [];

$(document).ready(function () {
    var iOS = navigator.userAgent.match(/(iPad|iPhone|iPod)/g) ? true : false;
    if(iOS)
        $("body").addClass("iOS");
    $(document).data("localizations", localizations); //sets localizations to cache
    if (!window.forSlideshow || !window.justReference) //If not slideshow only
    {
        delayInterval = 50;
        $.idleTimer(2000);
        $(document).bind("idle.idleTimer", function () {
            // function you want to fire when the user goes idle
            if (delayInterval != 500) {
                delayInterval = 500;
                clearInterval(window.hashListnerIntervalID);
                window.hashListnerIntervalID = window.setInterval(function () {
                    try {
                        hashListener.check();
                    } catch (e) {}
                }, delayInterval);
            }
        });
        $(document).bind("active.idleTimer", function () {
            // function you want to fire when the user becomes active again
            if (delayInterval != 50) {
                delayInterval = 50;
                clearInterval(window.hashListnerIntervalID);
                window.hashListnerIntervalID = window.setInterval(function () {
                    try {
                        hashListener.check();
                    } catch (e) {}
                }, delayInterval);
            }
        });
        //adds hash change listener
        clearInterval(window.hashListnerIntervalID);
        window.hashListnerIntervalID = window.setInterval(function () {
            try {
                hashListener.check();
            } catch (e) {}
        }, delayInterval);
        function getLocalizationKey(key) {
            var _loc = $(document).data("localizations");
            var defaultText = localizations[key];
            if (_loc && _loc[key]) {
                defaultText = _loc[key];
            }
            return defaultText;
        }
        window.getLocalizationKeyExternal = function(key)
        {
            return getLocalizationKey(key);
        }

    }
});
//added by carlos
var players = new Array();
var inlinePlayer_graphcolor = '#F5B451';
var inlinePlayer_progresscolor = '#c18e40';
var inlinePlayer_enable = 'false';
var inlinePlayer_graphvisible = 'always';
var inlinePlayer_playqueue = false;
function destroyAllInlinePlaybacks(index){
    for (var i = 0; i < players.length; i++) {
        try{
            if(i!=index)
                players[i].destroy();
        }catch(ex){
            //console.log(ex);
        }
    }
    players = new Array();
}
function stopAllPlayback(index){
    for (var i = 0; i < players.length; i++) {
        try{
            if(i!=index){
                players[i].stop();
            }
        }catch(ex){
            //console.log(ex);
        }
    }
}
function playPause(index, play, url){
    if(play){
        stopAllPlayback(index);
        if(inlinePlayer_graphvisible == 'onplay' || inlinePlayer_graphvisible == 'never')
        {
            var wave;
            if(inlinePlayer_graphvisible == "onplay")
                wave = $("#wave_" + index).show();
            try{
                players[index].play();
            }catch(ex){
                players[index].load(url);
                players[index].on('ready', function(){
                    players[index].play();
                });
            }
        }
        else
            players[index].play();
    }
    else
        players[index].pause();
}

window.archiveFileName = "archive.zip";

if (jQuery)(function ($) {
    $.extend($.fn, {
        fileTree: function (o, h) {
            // Defaults
            if (!o) var o = {};
            if (o.root == undefined) o.root = '/';
            if (o.folderEvent == undefined) o.folderEvent = 'click';
            if (o.thumbFolderEvent == undefined) o.thumbFolderEvent = 'dblclick';
            if (o.expandSpeed == undefined) o.expandSpeed = 500;
            if (o.collapseSpeed == undefined) o.collapseSpeed = 500;
            if (o.expandEasing == undefined) o.expandEasing = null;
            if (o.collapseEasing == undefined) o.collapseEasing = null;
            if (o.multiFolder == undefined) o.multiFolder = true;
            if (o.signupPage == undefined) o.signupPage = false;
            o.proxy = "/WebInterface/";
            o.proxy = o.proxy.substring(0, o.proxy.length - ("/Web" + "Interface/").length);
            o.ajaxCallURL = "/WebInterface/function/";
            window.ajaxCallURL = o.ajaxCallURL;
            o.uploadURL = "/WebInterface/function/";
            o.downloadURL = "/WebInterface/function/";
            o.ImageFilePath = window.defaultImagePath || "/WebInterface/jQuery/images/";
            o.FileExtensionImageFilePath = o.ImageFilePath + "fileExtensions/";
            o.FilePath = "/WebInterface/jQuery/";
            o.fileLarge = o.FileExtensionImageFilePath + "file";
            o.fileFolder = o.ImageFilePath + "folderLarge.png";
            o.fileFolder1 = o.ImageFilePath + "folderLarge1.png";
            o.fileFolder2 = o.ImageFilePath + "folderLarge2.png";
            o.fileFolder3 = o.ImageFilePath + "folderLarge3.png";
            o.spinerImage = o.ImageFilePath + "spinner.gif";
            o.PreviewIconThumbnailStyle = "border:0px;";
            //Various Cookies for layout
            o.ViewCookieName = "LIST_VIEW";
            o.CookieHideItemStartingWithDot = "HIDE_WITH_DOT";
            o.CookieHideCheckBoxColumn = "HIDE_CHECKBOX";
            o.CookieHideFilter = "HIDE_FILTER";
            o.CookieAutoUploadFlag = "FILE_AUTOUPLOAD";
            o.CookieAutoAppletFlag = "AUTOAPPLET";
            o.CookieNoCompressionFlag = "NOCOMPRESSION";
            o.CookieWelcomeNote = "WELCOMENOTE";
            o.CookieCopiedFiles = "FILES_COPIED";
            o.CookiePageSize = "PAGE_SIZE";
            o.MaximumLengthAllowedForKeywordsString = 25;
            o.MaximumLengthAllowedForSharingPopupHeaderString = 50;
            o.thumbnailTextCharsLimit = 14;
            o.FileListingElement = $("#filesListing");
            o.MaxSimultaneousUploadAllowed = 1;
            o.GrowlTimeout = 3000; // If growl has close button (next option) it will be set to 0
            o.GrowlWithCloseButton = true;
            o.BasketDataKey = "FILES_IN_BASKET";
            o.BasketDataKeyQuickDownload = "FILES_IN_BASKET_QUICK_DOWNLOAD";
            o.lowestThumbnailBoxWidth = 110;
            o.lowestThumbnailBoxHeight = 140;
            o.buggyBrowser = $.browser.msie && $.browser.version <= 8;
            o.keywordsCharLimit = 250;
            o.availableFileExtensionImages = ["ai", "avi", "bak", "bat", "bin", "bmp", "cab", "cmd", "css", "csv", "cue", "dat", "dic", "divx", "dll", "dmg", "doc", "docx", "dvd", "dwg", "exe", "file", "fla", "gif", "htm", "html", "ifo", "ini", "iso", "jpeg", "jpg", "js", "m4a", "mmf", "mov", "mp3", "mp4","m4v", "h264", "mpeg", "mpg", "otf", "pdf", "php", "png", "pps", "ppt", "pptx", "psd", "rar", "rtf", "swf", "sys", "tiff", "ttf", "txt", "vob", "wma", "wmv", "xls", "xlsx", "xml", "xmp", "zip", "sitx", "idml", "indd", "sit"]; /*Pagination options*/
            o.defaultPageSize = 100;
            o.pagingNumDisplayEntries = 10;
            o.pagingCurrentPage = 0;
            o.pagingNumEdgeEntries = 5;
            o.pagingControlsShowAlways = false; /*End :: Pagination options*/
            o.folderNameSpecialCharacterSubstitute = "_"; //While creating new folders, it will replace special characters with specified character
            // Template of file select panel
            o.browserTemplate = '<div class="uploadFormPanel" id="uploadDiv##">' + '<form id="META_uploadForm##" name="META_uploadForm##" action="' + o.uploadURL + '" enctype="multipart/form-data" method="post" target="iframeUploadSingle##">' + '<input id="uploadPath##" type="hidden" name="uploadPath" value="#DEST_PATH#" />' + '<input id="theName##" type="hidden" name="the_action" value="STOR" />' + '<input id="file_##_SINGLE_FILE_POST" type="file" multiple="" name="file_##_SINGLE_FILE_POST" />' + '</form>' + '<iframe name="iframeUploadSingle##" id="iframeUploadSingle##" src="javascript:false;" width="1" height="1" style="left:-5000px;display:none;">' + '</iframe>' + '</div>';
            //Column model for files XML
            o.colModel = [{
                name: 'type',
                index: 'type',
                sorttype: "text"
            }, {
                name: 'dateFormatted',
                index: 'dateFormatted',
                sorttype: "date"
            }, {
                name: 'date',
                index: 'date',
                sorttype: "date"
            }, {
                name: 'modified',
                index: 'modified',
                sorttype: "date"
            }, {
                name: 'size',
                index: 'size',
                sorttype: "number"
            }, {
                name: 'sizeFormatted',
                index: 'sizeFormatted',
                sorttype: "text"
            }, {
                name: 'name',
                index: 'name',
                sorttype: "text"
            }, {
                name: 'href_path',
                index: 'href_path',
                sorttype: "text"
            }, {
                name: 'keywords',
                index: 'keywords',
                sorttype: "text"
            }, {
                name: 'root_dir',
                index: 'root_dir',
                sorttype: "text"
            }, {
                name: 'preview',
                index: 'preview',
                sorttype: "text"
            }, {
                name: 'privs',
                index: 'privs',
                sorttype: "text"
            }];
            if (o.customData == undefined) o.customData = false;
            if (o.overrideFromHash == undefined)
            //It will load items  for particular folder as on hash location
            o.overrideFromHash = true;
            if (o.setHashLocation == undefined)
            //Enable or disable to set hash location on folder change
            o.setHashLocation = true;
            if (o.expandedImageURL == undefined)
            //Path to expanded image - displayed against expanded folder in a grid
            o.expandedImageURL = o.ImageFilePath + "expanded.png";
            if(typeof window.treeViewExpandedFolderMarkerIcon != "undefined")
                o.expandedImageURL = window.treeViewExpandedFolderMarkerIcon;
            if (o.collapsedImageURL == undefined)
            //Path to collapsed image - displayed against expanded folder in a grid
            o.collapsedImageURL = o.ImageFilePath + "collapsed.png";
            if(typeof window.treeViewCollapsedFolderMarkerIcon != "undefined")
                o.collapsedImageURL = window.treeViewCollapsedFolderMarkerIcon;
            if (o.refreshImageURL == undefined)
            //Path to refresj image - displayed against current folder name in a breadcrumbs
            o.refreshImageURL = o.ImageFilePath + "refresh.png";
            $(this).each(function () {
                //Template for a header for Grid view
                var headerTemplate = "<thead><tr><td class='thSelect theader'><input type='checkBox' class='chkBoxAll' /></td><td colName='name' class='thName theader'>" + getLocalizationKey("TreeviewHeaderNameText") + "</td><td colName='root_dir' class='thPath theader listRootDir'>" + getLocalizationKey("TreeviewHeaderPathText") + "</td><td colName='size' class='thSize theader'>" + getLocalizationKey("TreeviewHeaderSizeText") + "</td><td colName='modified' class='thModified theader'>" + getLocalizationKey("TreeviewHeaderModifiedText") + "</td><td colName='keywords' class='thKeywords theader'>" + getLocalizationKey("TreeviewHeaderKeywordsText") + "</td></tr></thead>";
                //Template for thumbnail view item
                var thumbnailItemTemplate = '<li class="vtip fileBox #CLASS#" index="#INDEX#" name="#NAME#" title="#TITLE#" privs="#PRIVS#" size="#SIZE#" fulldate="#FULLDATE#" Date="#DATE#" Keywords="#KEYWORDS#" preview="#PREVIEW#"><span class="fileSelectionMark"></span><div>' + '        <div class="imgBox"><div class="imgWrapper">' + '            <table cellspacing="0" cellpadding="0" align="center">' + '                <tbody>' + '                    <tr>' + '                        <td valign="middle" align="center">' + '                            <a class="imgLink" rel="#REL#" href="#HREF#">' + '                                <img alt="#NAME#" title="#NAME#" style="border: 0px none;" src="#SRC#">' + '                            </a>' + '                        </td>' + '                    </tr>' + '                </tbody>' + '            </table></div>' + '        </div>' + '    </div>' + '    <div class="imgTitle">' + '        <a  rel="#PATHREL#" href="#HREF#">#NAME#</a>' + '    </div>' + '</li>';
                /*
                 * Shows tree to particular elemenet. First parameter is
                 * parent element, t is a path. Locatefolder in treeview
                 * replaces all content with items in the folder specified.
                 * Usehash is a boolean, which overrides any path supplied
                 * and uses hash from location as a path
                 */

                 //Serialize form
                window.serializeForm = function (form) {
                    if (!form || form.nodeName !== "FORM") {
                        return "";
                    }
                    var i, j, q = [], cbs = {};
                    for (i = form.elements.length - 1; i >= 0; i = i - 1) {
                        if (form.elements[i].name === "") {
                            continue;
                        }
                        switch (form.elements[i].nodeName.toUpperCase()) {
                        case 'INPUT':
                            switch (form.elements[i].type.toLowerCase()) {
                            case 'text':
                            case 'hidden':
                            case 'password':
                            case 'button':
                            case 'reset':
                            case 'submit':
                                q.push(form.elements[i].name + "=" + crushFTPTools.encodeURILocal(form.elements[i].value));
                                break;
                            case 'checkbox':
                                if (form.elements[i].checked && form.elements[i].value) {
                                    if(!cbs[form.elements[i].name])
                                        cbs[form.elements[i].name] = [];
                                    cbs[form.elements[i].name].push(crushFTPTools.encodeURILocal(form.elements[i].value));
                                }
                                break;
                            case 'radio':
                                if (form.elements[i].checked && form.elements[i].value) {
                                    q.push(form.elements[i].name + "=" + crushFTPTools.encodeURILocal(form.elements[i].value));
                                }
                                break;
                            case 'file':
                                break;
                            }
                            break;
                        case 'TEXTAREA':
                            q.push(form.elements[i].name + "=" + crushFTPTools.encodeURILocal(form.elements[i].value));
                            break;
                        case 'SELECT':
                            if($(form.elements[i]).hasClass("chosen"))
                            {
                                var val = $(form.elements[i]).val();
                                if($.isArray(val))
                                {
                                    var chosenItems = [];
                                    $(form.elements[i]).next().find(".chosen-choices").find("li:visible").each(function(){
                                        if($(this).text())
                                            chosenItems.push($(this).text());
                                    });
                                    q.push(form.elements[i].name + "=" + crushFTPTools.encodeURILocal(chosenItems.join(",")));
                                    break;
                                }
                            }
                            switch (form.elements[i].type) {
                            case 'select-one':
                                q.push(form.elements[i].name + "=" + crushFTPTools.encodeURILocal(
                                $("#" + form.elements[i].id).val()));
                                break;
                            case 'select-multiple':
                                for (j = form.elements[i].options.length - 1; j >= 0; j = j - 1) {
                                    if (form.elements[i].options[j].selected) {
                                        q.push(form.elements[i].name + "=" + crushFTPTools.encodeURILocal(form.elements[i].options[j].value));
                                    }
                                }
                                break;
                            }
                            break;
                        case 'BUTTON':
                            switch (form.elements[i].type) {
                            case 'reset':
                            case 'submit':
                            case 'button':
                                q.push(form.elements[i].name + "=" + crushFTPTools.encodeURILocal(form.elements[i].value));
                                break;
                            }
                            break;
                        }
                    }
                    for(var itm in cbs)
                    {
                        q.push(itm + "=" + cbs[itm].join(","));
                    }
                    return q.join("&");
                }

                window.IE = function (obj) {
                    if ($.browser.msie && parseInt(jQuery.browser.version) == 10) {
                        var itm = {};
                        itm.textContent = $(obj).text();
                        return itm;
                    }
                    else
                    {
                        if (window.ActiveXObject) {
                            var obj2 = {};
                            try {
                                if(typeof obj.text != "undefined")
                                    obj2.textContent = obj.text;
                                else
                                    obj2.textContent = $(obj).text();
                            } catch (ex) {
                            }
                            return obj2;
                        } else {
                            return obj;
                        }
                    }
                }

                //Disable or hide the fields on custom page based on their name
                window.setCustomFormFieldAttributes = function(panel)
                {
                    $(panel).find("*[name$='_disabled']").attr("disabled", "disabled");
                    $(panel).find("*[name$='_readonly']").attr("readonly", "readonly");
                    $(panel).find("*[name$='_hidden']").each(function(){
                        $(this).closest("tr").hide();
                    });
                    $(panel).find("*[name*='password']").each(function(){
                        try{
                            $(this).get(0).type='password';}
                        catch(ex){}
                    });
                    setTimeout(function(){
                        $(panel).find("input[name$='_db']").each(function(){
                            var formName = $(this).closest("form").find("#meta_form_name").val();
                            var elemName = $(this).attr("name");
                            var val = $(this).val();
                            if(!$(this).data("autoCompleteAdded"))
                            {
                                $(this).tokenInput("/WebInterface/function/?command=lookup_form_field&form_name="+formName+"&form_element_name=" + elemName + "&c2f=" + crushFTPTools.getCrushAuth(), {
                                    theme : "facebook",
                                    preventDuplicates : true,
                                    onResult: function (results, val) {
                                        if(results && results.length==0 && val)
                                        {
                                            results = [{"id":val,"name":val}];
                                        }
                                        return results;
                                    }
                                });
                                if(val)
                                    $(this).tokenInput("add", {id: val, name: val});
                                $(this).data("autoCompleteAdded", true);
                            }
                        });
                        $(panel).find("select[name$='_db']").each(function(){
                            var formName = $(this).closest("form").find("#meta_form_name").val();
                            var elemName = $(this).attr("name");
                            var elem = $(this).empty();
                            var obj = {
                                command: "lookup_form_field",
                                form_name: formName,
                                form_element_name: elemName,
                                q : '',
                                random: Math.random()
                            };

                            /* Make a call and receive list */
                            obj.c2f = crushFTPTools.getCrushAuth();
                            $.ajax({
                                type: "POST",
                                url: o.ajaxCallURL,
                                data: obj,
                                async: true,
                                dataType: "json",
                                beforeSend: function(x) {
                                    if(x && x.overrideMimeType) {
                                        x.overrideMimeType("application/j-son;charset=UTF-8");
                                    }
                                },
                                success: function (data) {
                                    if(data && data.length>0)
                                    {
                                        for (var i = 0; i < data.length; i++) {
                                            elem.append("<option value='"+data[i].id+"'>" + data[i].name + "</option>");
                                        };
                                    }
                                }
                            });
                        });
                        $(panel).find(".chosen").each(function(){
                            if($(this).attr("multiple"))
                                $(this).chosen();
                            else
                                $(this).css("width", "250px").chosen();
                        });
                    }, 500);
                    $(panel).find(".loadPage").each(function(){
                        var page = $(this).attr("page");
                        if(page)
                        {
                            var that = $(this).empty().append($("<div>"));
                            that = that.find("div");
                            if(page.indexOf("#")>0)
                            {
                                var _index = page.indexOf("#");
                                var style = page.substring(page.indexOf("#") + 1, page.length);
                                that.attr("style", style);
                            }
                            that.css("overflow", "auto");
                            that.text("Wait..");
                            that.load(page, function(response, status, xhr){
                                if (status == "error") {
                                    that.text(getLocalizationKey("loadingPageInFormFailedTitle") + page);
                                }
                            });
                        }
                    });

                    setTimeout(function(){
                        $(panel).find("[name*='_cascade']").each(function(){
                            var _this = $(this);
                            _this.bind("change", function(){
                                var drps = [];
                                var val = $(this).val();
                                var name = $(this).attr("name");
                                if($(this).is("select"))
                                {
                                    if(!$.isArray(val))
                                        val = [val];
                                    $(this).find('option').each(function(){
                                        $(panel).find("*[name$='"+$(this).attr("value")+"_not']").each(function(){
                                            $(this).closest("tr").show();
                                            if($(this).attr("name").indexOf("_cascade")>0 && $(this).attr("name")!=name)
                                                drps.push($(this));
                                        });
                                    });
                                    _this.find("option").each(function(){
                                        $(panel).find("*[name$='_"+$(this).val()+"']").closest("tr").hide();
                                    });
                                    for (var i = 0; i < val.length; i++) {
                                        var curVal = val[i];
                                        $(panel).find("*[name$='_"+curVal+"']").each(function(){
                                            $(this).closest("tr").show();
                                            if($(this).attr("name").indexOf("_cascade")>0 && $(this).attr("name")!=name)
                                                drps.push($(this));
                                        });
                                    }
                                    for (var i = 0; i < drps.length; i++) {
                                        drps[i].trigger('change');
                                    }
                                    for (var i = 0; i < val.length; i++) {
                                        var curVal = val[i];
                                        $(panel).find("*[name$='_"+curVal+"_not']").closest("tr").hide();
                                    }
                                }
                                else
                                {
                                    $(panel).find("[name='"+_this.attr("name")+"']").each(function(){
                                        $(panel).find("*[name$='_"+$(this).attr("value")+"']").closest("tr").hide();
                                        $(panel).find("*[name$='_"+$(this).attr("value")+"_not']").closest("tr").show();
                                    });
                                    $(panel).find("[name='"+_this.attr("name")+"']:checked").each(function(){
                                        $(panel).find("*[name$='_"+$(this).attr("value")+"']").closest("tr").show();
                                        $(panel).find("*[name$='_"+$(this).attr("value")+"_not']").closest("tr").hide();
                                    });
                                }
                                $(panel).find("[name*='_cascade']:not(.chosen):hidden").each(function(){
                                    var drps = [];
                                    var val = $(this).val();
                                    if($(this).is("select"))
                                    {
                                        $(this).find('option').each(function(){
                                            $(panel).find("*[name$='"+$(this).attr("value")+"_not']").closest("tr").hide();
                                            $(panel).find("*[name$='_"+$(this).val()+"']").closest("tr").hide();
                                        });
                                    }
                                    else
                                    {
                                        $(panel).find("[name='"+$(this).attr("name")+"']").each(function(){
                                            $(panel).find("*[name$='_"+$(this).attr("value")+"']").closest("tr").hide();
                                            $(panel).find("*[name$='_"+$(this).attr("value")+"_not']").closest("tr").hide();
                                        });
                                    }
                                });
                            }).trigger("change");
                        });
                    }, 500);
                    $(panel).find("input").each(function(){
                        var name = $(this).attr("name");
                        if(panel.find("input[name='"+name+"2']").length>0)
                        {
                            $(this).addClass("validatePasswords");
                            panel.find("input[name='"+name+"2']").addClass("validatePasswords");
                        }
                        if(name && name.indexOf("verify")>=0)
                        {
                            var origElem;
                            if(name.indexOf("_verify_")>=0 || name.indexOf("_verify")>=0)
                                origElem = name.replace("_verify", "");
                            else if(name.indexOf("verify_")>=0)
                                origElem = name.replace("verify_", "");
                            if(origElem)
                            {
                                panel.find("input[name='"+origElem+"']").addClass("validateSameValue").attr("compareWith", name);
                            }
                        }
                    });
                };

                //Attach calendar to date fields
                window.attachCalendarPopup = function(panel) {
                    var _nowDate = new Date();
                    _nowDate.setDate(_nowDate.getDate() + 1);
                    var _dateFormat = 'mm/dd/yy';
                    if (window.CustomFormyyyymmdd) { //Choose custom date format
                        _dateFormat = 'yy/MM/dd';
                    }
                    if(window.customDateFormat)
                    {
                        _dateFormat = window.customDateFormat.replace("yyyy","yy").replace("MMM","M").replace("MM","mm").replace(" hh:mm aa", "");
                    }
                    panel.find("input.futureDateField").each(function(){
                        if($(this).is(":disabled") || $(this).attr("readonly")) return;
                        $(this).datepicker({ //For date fields which accepts future dates
                            dateFormat: _dateFormat,
                            showOn: 'both',
                            buttonImage: o.ImageFilePath + 'calendar.png',
                            buttonImageOnly: true,
                            minDate: _nowDate
                        }).attr("readonly", "readonly");
                    });

                    panel.find("input.dateField").each(function(){
                        if($(this).is(":disabled") || $(this).attr("readonly")) return;
                        $(this).datepicker({  //Normal date fields
                            dateFormat: _dateFormat,
                            showOn: 'both',
                            buttonImage: o.ImageFilePath +'calendar.png',
                            buttonImageOnly: true
                        }).attr("readonly", "readonly");
                    });

                    panel.find("input.normalDateField").each(function(){
                        if($(this).is(":disabled") || $(this).attr("readonly")) return;
                        if($(this).is("#date1_value_display") || $(this).is("#date2_value_display"))
                        {
                            $(this).datepicker({  //Normal date fields
                                dateFormat: _dateFormat,
                                showOn: 'both',
                                buttonImage: o.ImageFilePath +'calendar.png',
                                buttonImageOnly: true,
                                onSelect : function(dt, inst){
                                    var _dt = $(this).datepicker("getDate");
                                    var _cdt = $.datepicker.formatDate("mm/dd/yy",_dt);
                                    if($(this).is("#date1_value_display"))
                                    {
                                        panel.find("#date1_value").val(_cdt);
                                    }
                                    else
                                    {
                                        panel.find("#date2_value").val(_cdt);
                                    }
                                }
                            });
                        }
                        else
                        {
                            $(this).datepicker({  //Normal date fields
                                dateFormat: _dateFormat,
                                showOn: 'both',
                                buttonImage: o.ImageFilePath +'calendar.png',
                                buttonImageOnly: true
                            });
                        }
                    });

                    panel.find("input.futureTimeField").each(function(){
                        var curElem = $(this);
                        if(curElem.is(":disabled") || curElem.attr("readonly")) return;
                        curElem.timepicker({
                            timeFormat: "hh:mm tt",
                            showOn: 'both',
                            buttonImage: o.ImageFilePath +'calendar.png',
                            buttonImageOnly: true,
                            hourMin : new Date().getHours(),
                            onClose : function(val){
                                if(val)
                                    curElem.trigger('change');
                            }
                        }).attr("readonly", "readonly");
                    });
                };

                //Hash listener plugin
                window.hashListener = {
                    ie: /MSIE/.test(navigator.userAgent),
                    ieSupportBack: true,
                    hash: document.location.hash,
                    check: function () {
                        var h = document.location.hash;
                        if (h != this.hash) {
                            this.hash = h;
                            this.onHashChanged();
                        }
                    },
                    init: function () {
                        if (this.ie && this.ieSupportBack) {
                            var frame = document.createElement("iframe");
                            frame.id = "state-frame";
                            frame.style.display = "none";
                            if (document.body) {
                                document.body.appendChild(frame);
                                this.writeFrame("");
                            }
                        }
                        var self = this;
                        if ("onpropertychange" in document && "attachEvent" in document) {
                            document.attachEvent("onpropertychange", function () {
                                if (event.propertyName == "location") {
                                    self.check();
                                }
                            });
                        }
                    },
                    setHash: function (s) {
                        if (this.ie && this.ieSupportBack) {
                            this.writeFrame(s);
                        }
                        document.location.hash = s;
                        if (document.location.hash != ("#" + s)) document.location.hash = crushFTPTools.encodeURILocal(s); //fix for Firefox refusing some strings...umlauts
                    },
                    getHash: function () {
                        return document.location.hash;
                    },
                    writeFrame: function (s) {
                    },
                    syncHash: function () {
                        var s = this._hash;
                        if (s != document.location.hash) {
                            document.location.hash = s;
                        }
                    },
                    onHashChanged: function () {
                        destroyAllInlinePlaybacks();
                        var t = escape(unescape(this.getHash().replace("#", "")));
                        var loc = unescape(t);
                        if(loc.lastIndexOf("/")!=loc.length-1)
                        {
                            var ext = getFileExtension(loc);
                            if(ext && ext.length>0)
                            {
                                setHashLocation(escape(unescape(t)));
                            }
                            else
                            {
                                t = loc + "/";
                                setHashLocation(escape(unescape(t)));
                            }
                        }
                        window.current_page = o.pagingCurrentPage = 0;
                        if (currentView() == "Thumbnail") {
                            showTree($("#filesContainerDiv"), t, true);
                        } else {
                            showTree($("#filesContainer"), t, true);
                        }
                    }
                };
                hashListener.init();

                if (o.signupPage) // If to display sign-up form
                {
                    window.doLogout = function (inactivityTimeout, sync) {
                        if($('#alertAutoLogoutMsg').is(":visible"))return;
                        window.logoutInitiated = true;
                        var obj = {
                            command: "logout",
                            random: Math.random()
                        };
                        obj.c2f = crushFTPTools.getCrushAuth();
                        var loginPage = "/WebInterface/login.html";
                        if(window.LogoutCustomRedirectPath)
                            loginPage = window.LogoutCustomRedirectPath;
                        $.ajax({
                            type: "POST",
                            async: !sync,
                            url: o.ajaxCallURL,
                            data: obj,
                            error: function (XMLHttpRequest, textStatus, errorThrown) {
                                if(inactivityTimeout && window.noRedirectToLoginAfterAutoLogout)
                                {
                                    showLoggedOutPopup();
                                }
                                else
                                    document.location = loginPage;
                            },
                            success: function (msg) {
                                if(inactivityTimeout && window.noRedirectToLoginAfterAutoLogout)
                                {
                                    showLoggedOutPopup();
                                }
                                else
                                    document.location = loginPage;
                            }
                        });
                    }
                    // function to retrive current page's name
                    function GetCurrentPageName() {
                        var sPath = window.location.pathname;
                        var sPage = sPath.substring(sPath.lastIndexOf("/") + 1);
                        return sPage;
                    }
                    if(window.hideTopLoginLink)
                        $("#topSwitchButtons").hide();
                    var customFormName = GetCurrentPageName();
                    customFormName = customFormName.replace(".html", "");
                    // Get custom form from server and display
                    getCustomForm(customFormName, function (data, hasForm, formName, showAlways) {
                        if (hasForm) {
                            var signupPanel = $("#panelSignup");
                            signupPanel.html("<form id='frmSignup' method='post' target='dummyIframe' action='/WebInterface/function/?command=discard&c2f="+crushFTPTools.getCrushAuth()+"'>" + data + "</form>").find("table").css("text-align", "left");
                            setCustomFormFieldAttributes(signupPanel)
                            attachCalendarPopup(signupPanel);
                            $("button#resetPasteForm", signupPanel).unbind().click(function (event) {
                                signupPanel.clearForm();
                                event.stopPropagation();
                                event.preventDefault();
                            });
                            signupPanel.find("input").keydown(function (evt) {
                                var evt = (evt) ? evt : ((event) ? event : null);
                                if (evt.keyCode == 13) {
                                    $("button.submitForm", signupPanel).click();
                                    return false;
                                } else if (evt.keyCode == 27) {
                                    $("button#resetPasteForm", signupPanel).click();
                                    return false;
                                }
                            });

                            function showVars(msg, form){
                                return msg.replace(/{username}/g , form.find("input[name$='username']").val()).replace(/{email}/g , form.find("input[name$='email']").val());
                            }

                            // a method to show error on signup page
                            function displayError(msg, isSuccess, formData) {
                                var form = signupPanel;
                                if (form.prev().hasClass("attention")) {
                                    form.prev().remove();
                                }
                                if(isSuccess)
                                {
                                    form.before("<div style='float: none;border: solid 1px #CCC;-moz-box-shadow: 2px 1px 3px #CCC;-webkit-box-shadow: 2px 1px 3px #CCC;box-shadow: 2px 1px 3px #CCC;background-color: #FEFFD3;padding: 18px;'><h3 style='background-image: url("+o.ImageFilePath +"checkmark.png);background-position: left 1px;background-repeat: no-repeat;padding-left:20px;'>"+showVars(localizations.RegisterWindowProcessCompletedTitle, formData)+"</h3><br> <div style='padding-left:20px;'> "+showVars(localizations.RegisterWindowProcessCompleteMessage, formData)+" <br><br><br> <a style='color:black;' href='javascript:window.location.reload();' id='registerAnotherUser'>Register Another User</a> <a  style='color:black;' href='/WebInterface/login.html' id='loginLink'>Login</a></div></div>");
                                    if(window.hideRegisterAnotherUserLinkAfterRegistration)
                                        $("#registerAnotherUser").hide();
                                    if(window.hideLoginLinkAfterRegistration)
                                        $("#loginLink").hide();
                                }
                                else
                                {
                                    form.before("<div class='attention' style='float: none;border: solid 1px #CCC;-moz-box-shadow: 2px 1px 3px #CCC;-webkit-box-shadow: 2px 1px 3px #CCC;box-shadow: 2px 1px 3px #CCC;background-color: #FEFFD3;padding: 10px;'><h3 style='padding-left:20px;'>"+showVars(msg, formData)+" : </h3><br> <div style='padding-left:20px;'>"+showVars(localizations.RegisterWindowProcessFailedMessage, formData)+"</div></div>");
                                }
                                form.prev().css("float", "none");
                            }
                            //Check if input has special characters
                            function hasSpecialCharacters(input, charset){
                                charset = charset || "&:/\;<>?+=%#";
                                for (var i = 0; i < input.length; i++) {
                                    if (charset.indexOf(input.charAt(i)) != -1) {
                                        return true;
                                    }
                                }
                                return false;
                            }

                            // a method to validate signup form
                            function validateForm(target, form) {
                                form = form || $("table.customForm", "#divUploadPanel");
                                form.find("input[name='meta_registration_username']").addClass("validateUserName");
                                var validated = true;
                                form.find(".required_true:visible, .validateEmail, .validateUserName, .validatePasswords, .validateSameValue").each(
                                function () {
                                    var ignoreRdOnly = $(this).hasClass("futureDateField") || $(this).hasClass("dateField");
                                    if(!ignoreRdOnly)
                                       if($(this).is(":disabled") || $(this).attr("readonly")) return;
                                    if ($(this).hasClass("chkbox")) {
                                        if (!$(this).is(":checked") && $(this).closest("td").find("input:checked").length == 0) {
                                            $(this).parent().addClass("validationFail");
                                            if (validated) {
                                                $(this).parent().focus();
                                            }
                                            validated = false;
                                        } else {
                                            $(this).parent().removeClass("validationFail");
                                        }
                                    } else {
                                        if ($.trim($(this).val()).length == 0 && $(this).hasClass("required_true")) {
                                            $(this).addClass("validationFail");
                                            if (validated) {
                                                $(this).focus();
                                            }
                                            validated = false;
                                        }
                                        else if($(this).hasClass("validateUserName") && hasSpecialCharacters($(this).val()))
                                        {
                                            $(this).addClass("validationFail");
                                            if (validated) {
                                                $(this).focus();
                                            }
                                            $(this).after("<span class='attention' style='float:none;position:absolute;margin:0px;'>User name can not contain these characters : & : / \ ; < > ? + = % # </span>");
                                            validated = false;
                                        }
                                        else {
                                            $(this).parent().find(".attention").remove();
                                            if($(this).hasClass("validateEmail"))
                                            {
                                                if ($.trim($(this).val()).length > 0 && !validateEmail($(this).val(), true)) {
                                                    $(this).addClass("validationFail emailFail");
                                                    if (validated) {
                                                        $(this).focus();
                                                    }
                                                    validated = false;
                                                }
                                                else if($(this).hasClass("emailFail"))
                                                {
                                                    $(this).removeClass("validationFail emailFail");
                                                }
                                            }
                                            else if($(this).hasClass("validatePasswords"))
                                            {
                                                var nextPass = form.find("input[name='"+$(this).attr("name")+"2']");
                                                if(nextPass.length>0)
                                                {
                                                    if ($.trim($(this).val()) != $.trim($(nextPass).val())) {
                                                        $(this).addClass("validationFail passMatchFail");
                                                        nextPass.addClass("validationFail passMatchFail");
                                                        $(this).parent().find(".passwordDsntMatch").remove();
                                                        $(this).after("<span class='requiredField passwordDsntMatch' style='float:none;'> "+getLocalizationKey("customFormPasswordMatchValidationFailedText")+"</span>");
                                                        if (validated) {
                                                            $(this).focus();
                                                        }
                                                        validated = false;
                                                    }
                                                    else if($(this).hasClass("emailFail") || $(this).hasClass("passMatchFail") || $(this).hasClass("matchFail"))
                                                    {
                                                        $(this).removeClass("validationFail passMatchFail");
                                                        nextPass.removeClass("validationFail passMatchFail");
                                                        form.find(".passwordDsntMatch").remove();
                                                    }
                                                    else if($(this).hasClass("required_true") && $(this).val().length>0)
                                                    {
                                                        $(this).removeClass("validationFail");
                                                    }
                                                }
                                            }
                                            else
                                            {
                                                $(this).removeClass("validationFail");
                                            }
                                            if($(this).hasClass("validateSameValue"))
                                            {
                                                var compareWith = form.find("input[name='"+$(this).attr("compareWith")+"']");
                                                if(compareWith.length>0)
                                                {
                                                    if ($.trim($(this).val()) != $.trim($(compareWith).val())) {
                                                        $(this).addClass("validationFail matchFail");
                                                        compareWith.addClass("validationFail matchFail");
                                                        $(this).parent().find(".valueDsntMatch").remove();
                                                        $(this).after("<span class='requiredField valueDsntMatch' style='float:none;'> "+getLocalizationKey("customFormCompareValueMatchValidationFailedText")+"</span>");
                                                        if (validated) {
                                                            $(this).focus();
                                                        }
                                                        validated = false;
                                                    }
                                                    else if($(this).hasClass("matchFail"))
                                                    {
                                                        $(this).removeClass("validationFail matchFail");
                                                        compareWith.removeClass("validationFail matchFail");
                                                        form.find(".valueDsntMatch").remove();
                                                    }
                                                    else if($(this).hasClass("required_true") && $(this).val().length>0)
                                                    {
                                                        $(this).removeClass("validationFail");
                                                    }
                                                }
                                            }
                                        }
                                    }
                                });
                                if (form.prev().hasClass("attention")) {
                                    form.prev().remove();
                                }
                                if (!validated) {
                                    form.before("<div class='attention'>" + getLocalizationKey("FormValidationFailText") + "</div>");
                                    if(form.find(".emailFail").length>0)
                                    {
                                        form.prev().append("<div>" + getLocalizationKey("FormEmailValidationFailText") + "</div>");
                                    }
                                }
                                else
                                {
                                    form.find(".passwordDsntMatch").remove();
                                }
                                return validated;
                            }
                            function continueSubmit(){
                                signupPanel.find("form").submit();
                                if (!validateForm("", $("#panelSignup"))) {
                                    return;
                                }
                                var messageForm = $("#panelSignup");
                                var formClone = messageForm.find("form");
                                messageForm = serializeForm(formClone[0]);
                                if (messageForm.length == 0) {
                                    return;
                                }
                                messageForm += "&command=selfRegistration&random=" + Math.random()+"&c2f="+crushFTPTools.getCrushAuth();
                                var obj = messageForm;
                                $("#panelSignup").addClass("spinner");
                                obj.c2f = crushFTPTools.getCrushAuth();
                                $.ajax({
                                    type: "POST",
                                    url: o.ajaxCallURL,
                                    data: obj,
                                    error: function (XMLHttpRequest, textStatus, errorThrown) {
                                        errorThrown = errorThrown || messageForm;
                                        displayError("Error : " + errorThrown, false, formClone);
                                    },
                                    success: function (msg) {
                                        $("#panelSignup").removeClass("spinner");
                                        var responseText = msg;
                                        var response = msg.getElementsByTagName("response");
                                        response = IE(response[0]).textContent;
                                        if (response.toLowerCase() == "success") {
                                            $("#panelSignup").hide();
                                            displayError(response, true, formClone);
                                        }
                                        else
                                            displayError(response, false, formClone);
                                    }
                                });
                            }
                            // signup window submit form
                            $("button.submitForm", signupPanel).unbind().click(function (event) {
                                if(window.onBeforeRegistrationFormSubmit)
                                {
                                    window.onBeforeRegistrationFormSubmit(continueSubmit);
                                }
                                else
                                    continueSubmit();
                                event.stopPropagation();
                                event.preventDefault();
                                return false;
                            });
                        }
                    }, "Sign up");
                    bindUserCustomizationInfo();
                    return;
                }

                function showTree(parentElement, path, locateFolder, useHash, callback, justRefresh) {
                    justRefresh = justRefresh || window.reloadFromCachedData;
                    function continueListingLoad()
                    {
                        stopAllPlayback();
                        destroyAllInlinePlaybacks();
                        parentElement = $(parentElement);
                        parentElement.addClass('wait'); /* Remove initial element */
                        $("#searchResultNotification").hide().removeAttr("search");
                        $(".jqueryFileTree.start").remove(); /* If to use custom data - Specific to CrushFTP */
                        if (o.customData) { /* Conditions if overrid location to use from location hash*/
                            if ((!$(this).data("initialized") && o.overrideFromHash) || useHash) {
                                $(this).data("initialized", true);
                                var hashLocation = unescape(hashListener.getHash().toString().replace("#", ""));
                                if(hashLocation.indexOf("/BASE64CRUSH_")==0 || hashLocation.indexOf("BASE64CRUSH_")==0)
                                {
                                    if(hashLocation.indexOf("/") == 0)
                                    {
                                        hashLocation = hashLocation.replace("/", "");
                                    }
                                    if(hashLocation.lastIndexOf("/") == hashLocation.length-1)
                                    {
                                        hashLocation = hashLocation.substring(0, hashLocation.length-1);
                                    }
                                    hashLocation = Base64.decode(hashLocation.replace("BASE64CRUSH_", ""));
                                    setTimeout(function(){
                                        setHashLocation(escape(hashLocation));
                                    });
                                    return false;
                                }
                                if (hashLocation) {
                                    path = hashLocation;
                                } else {
                                    path = "/";
                                }
                            }
                            /* If nothing specified use root directory */
                            if (path.length == 0 || path == 'null') path = "/"; /* Data to POST to receive file listing */
                            if (window.redirectRoot && path == "/") document.location = window.redirectRoot;
                            if(path.lastIndexOf("/")!=path.length-1)
                            {
                                var ext = getFileExtension(path);
                                if(ext && ext.length>0)
                                {
                                    setTimeout(function(){
                                        var extsToOpenPreview = $(document).data("OPEN_PREVIEW_EXTENSIONS");
                                        var extsToOpenSlideshow = $(document).data("OPEN_SLIDESHOW_EXTENSIONS");
                                        if(window.disableClickToDownload)
                                        {
                                            return false;
                                        }
                                        else if (extsToOpenPreview && extsToOpenPreview.length > 0 && ext.length > 0 && extsToOpenPreview.has(ext)) {
                                            window.downloadAfterDirectoryLoad = path;
                                        }
                                        else if(extsToOpenSlideshow && extsToOpenSlideshow.length > 0 && ext.length > 0 && extsToOpenSlideshow.has(ext)) {
                                            window.downloadAfterDirectoryLoad = path;
                                        }
                                        else
                                        {
                                            downloadItems(false, false, path);
                                        }
                                        path = path.substring(0, path.lastIndexOf("/")) || "/";
                                        if(o.buggyBrowser)
                                        {
                                            try{
                                                path = escape(decodeURI(path));
                                            }
                                            catch(ex)
                                            {
                                            }
                                        }
                                        setHashLocation(path);
                                    }, 200);
                                    return false;
                                }
                            }
                            $("div.mainNavigation").block({
                                message: "",
                                css: {
                                    border: 'none',
                                    color: '#000'
                                }
                            });
                            var loadingIndicator = $("#loadingIndicator").text(getLocalizationKey("loadingIndicatorText"));//.dialog('option', 'title', 'Loading');
                            loading.show();
                            var _path = ""
                            try{
                                _path = crushFTPTools.decodeURILocal(path);
                                _path = crushFTPTools.encodeURILocal(unescape(unescape(path)));
                            }
                            catch(ex)
                            {
                                _path = crushFTPTools.encodeURILocal(path);
                            }
                            var obj = {
                                command: "getXMLListing",
                                format: "JSONOBJ",
                                path: _path,
                                random: Math.random()
                            };
                            window.loadedPath = _path;
                            function processServerResponse(data){
                                loading.hide();
                                var msg = data.listing;
                                window.l = msg;
                                if(data.error_msg === "invalid_item"){
                                    setTimeout(function(){
                                        var format = window.customDateFormat || "mm/dd/yyyy";
                                        var timeFormat = window.customTimeFormat || "hh:nn:ss TT";
                                        timeFormat = timeFormat.replace(/mm/g, "nn");
                                        var date = new Date();
                                        if(format.toLowerCase().indexOf("hh")<0)
                                            date = date.format(format + " " + timeFormat);
                                        else
                                            date = date.format(format);

                                        $.growlUI(getLocalizationKey("InvalidPathGrowlTitle"), "<span class='nodataFoundErrorMsg'></span>" + getLocalizationKey("InvalidPathGrowlText") + crushFTPTools.textEncode(crushFTPTools.decodeURILocal(obj.path))+ "<br><small style='font-weight:normal;line-height:25px;'>("+date+")</small>", o.GrowlTimeout, "growlError", o.GrowlWithCloseButton);
                                    }, 1000);
                                    window.l = window.l || [];
                                }
                                var privs = resetPrivs(data.privs);
                                $(document).data("curDirPrivs", privs);
                                for (var i = 0; i < l.length; i++) {
                                    if(typeof l[i].privs === "undefined")
                                        l[i].privs = privs;
                                }
                                if(window.isSearchResult){
                                    data.privs = data.privs.replace("(makedir)", "").replace("(write)", "");
                                }
                                if(locateFolder || useHash || path == "/")
                                {
                                    if(data.comment)
                                    {
                                        var msg = decodeURIComponent(data.comment);
                                        var cmt = $("<div>"+ msg + "</div>");
                                        cmt.find("script,syle").remove();
                                        $("#comments_listing").show().empty().append(cmt);
                                    }
                                    else
                                    {
                                        setTimeout(function(){
                                            $("#comments_listing").empty().hide();
                                        });
                                    }
                                }
                                setTimeout(function(){
                                    if($.trim($("#comments_listing").text()).length==0)
                                        $("#comments_listing").hide();
                                });
                                var hideItemsStartingWithDot = $.cookie(o.CookieHideItemStartingWithDot);
                                hideItemsStartingWithDot = hideItemsStartingWithDot == "true";
                                if (!window.listingInfo) window.listingInfo = {};
                                window.listingInfo.hiddenItems = 0;
                                if(hideItemsStartingWithDot)
                                {
                                    var filtered = [];
                                    for (var i = 0; i < l.length; i++) {
                                        if(l[i] && l[i].name.charAt(0) != ".")
                                            filtered.push(l[i]);
                                        else
                                            window.listingInfo.hiddenItems++;
                                    };
                                    window.l = filtered;
                                }
                                if(window.useExtensionForAltMoviewPreview)
                                {
                                    var filtered = [];
                                    for (var i = 0; i < l.length; i++) {
                                        if(l[i]){
                                            if(l[i].type.toLowerCase() == "file")
                                            {
                                                if(!l[i].name.toLowerCase().endsWith("."+window.useExtensionForAltMoviewPreview))
                                                    filtered.push(l[i]);
                                            }
                                            else
                                            	filtered.push(l[i]);
                                        }
                                    };
                                    window.l = filtered;
                                }

                                if ($(document).data("uploadOnly")) {
                                    window.curTreeItems = window.curTreeItems ? window.curTreeItems : window.l ? window.l : {};
                                    var privs = resetPrivs(data.privs);
                                    $(document).data("folderPrivs", privs);
                                    return false;
                                }
                                var inverse = true;
                                if (window.listingSortColumn) {
                                    if (window.listingSortDirection == "up") {
                                        inverse = false;
                                    }
                                }
                                if(!locateFolder && parentElement.hasClass('directory'))
                                {
                                    window.l = data.listing = sortListing(false, false, true, true, data.listing);
                                    if(hideItemsStartingWithDot)
                                    {
                                        var filtered = [];
                                        for (var i = 0; i < l.length; i++) {
                                            if(l[i] && l[i].name.charAt(0) != ".")
                                                filtered.push(l[i]);
                                            else
                                                window.listingInfo.hiddenItems++;
                                        };
                                        window.l = filtered;
                                    }
                                    renderListing(parentElement, locateFolder, useHash, data);
                                }
                                else
                                {
                                    sortListing(false, false, true, true);
                                    data.listing = window.l;
                                    renderListing(parentElement, locateFolder, useHash, data);
                                }
                                if(l) {
                                    if(window.maxListItemsBeforeShowingWarning && l.length>window.maxListItemsBeforeShowingWarning){
                                        $.growlUI("Warning", window.maxListItemsWarningMessage || getLocalizationKey("maxListItemsWarningMessage"), o.GrowlTimeout, "growlError", o.GrowlWithCloseButton);
                                    }
                                    renderButtons();
                                    setTimeout(function(){
                                        applyPrivs();
                                        //its a reference to a file and not a folder, so do a download of it.
                                        if (currentView() == "Thumbnail") {
                                            if (!parentElement.hasClass("directory") && parentElement.find("a.imgLink[href='" + escape(unescape(path)) + "']")[0] && parentElement.find("a.imgLink[href='" + escape(unescape(path)) + "']").length == 1) {
                                                downloadItems(false, parentElement.find("a[rel='" + escape(unescape(path)) + "']").closest("td"));
                                                renderListing(parentElement, locateFolder, useHash, null); //empty the listing.
                                            }
                                        } else {
                                            if (!parentElement.is("table#filesContainer") && !parentElement.hasClass("directory") && parentElement.find("a[rel='" + escape(unescape(path)) + "']")[0] && parentElement.find("a[rel='" + escape(unescape(path)) + "']").length == 1) {
                                                downloadItems(false, parentElement.find("a[rel='" + escape(unescape(path)) + "']").closest("td"));
                                                renderListing(parentElement, locateFolder, useHash, null); //empty the listing.
                                            }
                                        }
                                        showItemsBasedOnData(true, obj);
                                        if(window.downloadAfterDirectoryLoad)
                                        {
                                            setTimeout(function() {
                                                path = window.downloadAfterDirectoryLoad;
                                                window.downloadAfterDirectoryLoad = false;
                                                if (currentView() == "Thumbnail") {
                                                    parentElement.find("a[rel='" + escape(unescape(path)) + "']").trigger("dblclick");
                                                }
                                                else
                                                    parentElement.find("a[rel='" + escape(unescape(path)) + "']").click();
                                            }, 100);
                                        }
                                    }, 100);
                                }
                                else
                                {
                                    showItemsBasedOnData(false, obj);
                                }
                                if (callback) {
                                    try {
                                        callback();
                                    } catch (ex) {
                                    }
                                }
                                blockFileListingUI(false);
                            }
                            if(justRefresh && window.curDirItemsClone)
                            {
                                processServerResponse(window.curDirItemsClone);
                            }
                            else
                            {
                                /* Make a call and receive list */
                                obj.c2f = crushFTPTools.getCrushAuth();
                                $.ajax({
                                    type: "POST",
                                    url: o.ajaxCallURL,
                                    data: obj,
                                    async: true,
                                    dataType: "json",
                                    beforeSend: function(x) {
                                        if(x && x.overrideMimeType) {
                                            x.overrideMimeType("application/j-son;charset=UTF-8");
                                        }
                                    },
                                    success: function (data) {
                                        window.curDirItemsClone = $.extend({}, data, true);
                                        processServerResponse(data);
                                    },
                                    error: function (XMLHttpRequest, textStatus, errorThrown) {
                                        //its a reference to a file or folder as zip, so start a zip on demand of it.
                                        if (path.lastIndexOf(".zip") == path.length - 4) {
                                            path = path.substring(0, path.lastIndexOf(".zip"));
                                            submitAction({
                                                '#command': "downloadAsZip",
                                                '#path': crushFTPTools.encodeURILocal("/"),
                                                '#paths': crushFTPTools.encodeURILocal(unescape(path)),
                                                '#random': Math.random()
                                            });
                                        } else {
                                            errorThrown = errorThrown || "getXMLListing failed";
                                            $.growlUI("Error : " + errorThrown, errorThrown, o.GrowlTimeout, "", o.GrowlWithCloseButton);
                                            showItemsBasedOnData(false, obj);
                                            applyPrivs();
                                            renderButtons();
                                        }
                                        if (!$(document).data("uploadOnly")) {
                                            if(locateFolder){
                                                renderListing(parentElement, locateFolder, useHash, null); //empty the listing.
                                            }
                                            else {
                                                blockFileListingUI(false);
                                                loading.hide();
                                                $("div.mainNavigation").unblock();
                                                if (callback) {
                                                    try {
                                                        callback();
                                                    } catch (ex) {}
                                                }
                                            }
                                        } else {
                                            window.curTreeItems = window.curTreeItems ? window.curTreeItems : window.l ? window.l : {};
                                        }
                                        blockFileListingUI(false);
                                        loading.hide();
                                    }
                                });
                            }
                        } else {
                            $.post(o.script, {
                                dir: path
                            }, function (data) {
                                parentElement.find('.start').html('');
                                parentElement.removeClass('wait').append(data);
                                blockFileListingUI(false);
                                parentElement.find('td.columnName:hidden').parent().show();
                                bindTree(parentElement);
                                if (callback) {
                                    try {
                                        callback();
                                    } catch (ex) {}
                                }
                            });
                        }
                    }
                    if(window.listingHTMLPage)
                    {
                        if(!$.CrushFTP.DNDAdded)
                        {
                            $.CrushFTP.attachDND(o);
                            $.CrushFTP.DNDAdded = true;
                        }
                        showDirListingFile(function(){
                            continueListingLoad();
                        });
                    }
                    else
                        continueListingLoad();
                }

                //Function to manage items on screen based on folder loaded
                function showItemsBasedOnData(folderLoaded, obj)
                {
                    if(!folderLoaded)
                    {
                        var _date = new Date();
                        var date = new Date();
                        date = date.format("mm/dd/yyyy hh:nn:ss TT");
                        var userInfo = window.userInfo;
                        var userName = userInfo.first_name || userInfo.user_name || userInfo.email;
                        var timeZone = _date.toString().match(/([A-Z]+[\+-][0-9]+.*)/)[1];
                        var timeStamp = _date.getTime();
                        var now_utc =  Date.UTC(_date.getUTCFullYear(), _date.getUTCMonth(), _date.getUTCDate(), _date.getUTCHours(), _date.getUTCMinutes(), _date.getUTCSeconds());
                        var utcTimeStamp = new Date(now_utc).getTime();
                        var info = "User: " + userName;
                        info += "<br>Local Time: " + date;
                        info += "<br>Time Zone: " + timeZone;
                        info += "<br>Local Timestamp: " + timeStamp;
                        info += "<br>UTC Timestamp: " + utcTimeStamp;

                        $.growlUI(getLocalizationKey("NoFilesFoundGrowlTitle"), "<span class='nodataFoundErrorMsg'></span>" + getLocalizationKey("NoFilesFoundGrowlText") + crushFTPTools.textEncode(crushFTPTools.decodeURILocal(obj.path)) + "<br><small style='font-weight:normal;line-height:20px;'>"+info+"</small>", o.GrowlTimeout, "growlError", o.GrowlWithCloseButton);
                    }
                    else
                    {
                        $(".nodataFoundErrorMsg").closest("div.blockUI").find("img.closeButton").trigger("click");
                    }
                }

                // method shows/hides menu items based on privs of current logged in user.
                function applyPrivs() {
                    var privs = $(document).data("curDirPrivs");
                    if(!privs)
                        return;
                    var _delete = privs.indexOf("(delete)") >= 0;
                    var _write = privs.indexOf("(write)") >= 0;
                    var _resume = privs.indexOf("(resume)") >= 0;
                    var _share = privs.indexOf("(share)") >= 0;
                    var _slideshow = privs.indexOf("(slideshow)") >= 0;
                    var _rename = privs.indexOf("(rename)") >= 0;
                    var _makedir = privs.indexOf("(makedir)") >= 0;
                    var _deleteDir = privs.indexOf("(deletedir)") >= 0;
                    var _download = privs.indexOf("(read)") >= 0;
                    var myMenu = $("#mainNavigation");
                    //myMenu.find("a[href*='changeIcon']").parent().hide();
                    if (!_delete) {
                        myMenu.find("a[href='javascript:delete_items();']").parent().remove();
                    }
                    if(!_write)
                    {
                        myMenu.find("a[href='javascript:performAction('cut');']").parent().remove();
                        myMenu.find("a[href='javascript:performAction('upload');']").parent().remove();
                        myMenu.find("a[href='javascript:performAction('paste');']").parent().remove();
                        $("#fileQueueInfo,#dndInfoTextHolder").hide();
                    }
                    else
                        $("#fileQueueInfo,#dndInfoTextHolder").show();
                    if (!_makedir) {
                        myMenu.find("a[href='javascript:performAction('createFolder');']").parent().remove();
                    }
                    if (!_slideshow) {
                        myMenu.find("a[href='javascript:performAction('slideshowDiv');']").parent().remove();
                        myMenu.find("a[href='javascript:performAction('Preview');']").parent().remove();
                    }
                    if (!_download) {
                        myMenu.find("a[href='javascript:performAction('download');']").parent().remove();
                        myMenu.find("a[href='javascript:performAction('cut');']").parent().remove();
                        myMenu.find("a[href='javascript:performAction('copy');']").parent().remove();
                        myMenu.find("a[href='javascript:performAction('paste');']").parent().remove();
                    }
                }

                // To preserve location of browser scroll
                function scrollToFileListing() {
                    if ($('html,body').scrollTop() > $("#mainContent").offset().top) {
                        $('html,body').animate({
                            scrollTop: $("#mainContent").offset().top
                        }, 0, false);
                    }
                }

                //Back to top link event
                function bindBackToTop() {
                    $(".backToTop").click(function () {
                        $('html,body').animate({
                            scrollTop: 0
                        }, 500, false);
                    });
                }
                var delay = (function () {
                    var timer = 0;
                    return function (callback, ms) {
                        clearTimeout(timer);
                        timer = setTimeout(callback, ms);
                    };
                })();

                // Sorting method for item listing
                function sortListing(column, dir, rebuild, isInit, data) {
                    if(window.listingPageShown)return;
                    var _data = data || window.l;
                    if(isInit && !$(document).data("listDefaultSortColumnIndex"))
                    {
                        if(_data)
                        {
                            var dirItems = [];
                            var fileItems = [];
                            for(var i=0;i<_data.length;i++)
                            {
                                var type = _data[i].type;
                                if(typeof type != "undefined" && type == "DIR")
                                    dirItems.push(_data[i]);
                                else
                                    fileItems.push(_data[i]);
                            }
                            dirItems.sort(function(a, b) {
                              if (a.name.toLowerCase() < b.name.toLowerCase()) { return -1; }
                              if (a.name.toLowerCase() > b.name.toLowerCase()) { return  1; }
                              return 0;
                            });

                            fileItems.sort(function(a, b) {
                              if (a.name.toLowerCase() < b.name.toLowerCase()) { return -1; }
                              if (a.name.toLowerCase() > b.name.toLowerCase()) { return  1; }
                              return 0;
                            });

                            if(window.alphanumericalSorting)
                            {
                                dirItems.naturalSort();
                                fileItems.naturalSort();
                            }
                            if(!data)
                                window.l = dirItems.concat(fileItems);
                            else
                                _data = dirItems.concat(fileItems);
                        }
                        if(!data)
                        {
                            if (window.filteredItems && window.last_search_item && window.last_search_item.length>0) {
                                if (rebuild) {
                                    filterItem(window.last_search_item, true);
                                }
                            } else {
                                if (rebuild) {
                                    reBuildListing();
                                }
                            }
                        }
                    }
                    else
                    {
                        if (!column) {
                            if (window.listingSortColumn) {
                                column = window.listingSortColumn;
                            }
                        }
                        window.listingSortDirection = dir;
                        window.listingSortColumn = column;
                        var inverse = window.listingSortDirection;

                        if(window.listingSortColumn){
                            var filesContainer = $("#filesContainer");
                            if(!$("thead", filesContainer).find("td[colName='" + window.listingSortColumn + "']").hasClass('headerSortDown, headerSortUp')){
                                if (!inverse) {
                                    $("thead", filesContainer).find("td[colName='" + window.listingSortColumn + "']").removeClass("headerSortDown, headerSortUp").addClass("headerSortUp");
                                } else {
                                    $("thead", filesContainer).find("td[colName='" + window.listingSortColumn + "']").removeClass("headerSortDown, headerSortUp").addClass("headerSortDown");
                                }
                            }
                        }

                        function IsNumeric(input) {
                            return !((input - 0) == input && input.length > 0);
                        }

                        function applySorting(x, y) {
                            if(x && x[window.listingSortColumn] && y && y[window.listingSortColumn])
                            {
                                var a = x[window.listingSortColumn].toLowerCase();
                                var b = y[window.listingSortColumn].toLowerCase();
                                return (IsNumeric(a) || IsNumeric(b) ? a > b : +a > +b) ? inverse ? -1 : 1 : inverse ? 1 : -1;
                            }
                            else
                                return inverse ? 1 : -1;
                        }
                        if(!data)
                        {
                            if(window.l)
                                l = l.sort(applySorting);
                            if (window.filteredItems && window.last_search_item && window.last_search_item.length>0) {
                                if (rebuild) {
                                    filterItem(window.last_search_item, true);
                                }
                            } else {
                                if (rebuild) {
                                    reBuildListing();
                                }
                            }
                        }
                        else
                        {
                            _data = _data.sort(applySorting);
                        }
                    }
                    return _data;
                }

                // Sorting method for item listing
                function sortBasketListing(column, dir, rebuild) {
                    if (!column) {
                        if (window.listingSortColumnBasket) {
                            column = window.listingSortColumnBasket;
                        }
                    }
                    window.listingSortDirectionBasket = dir;
                    window.listingSortColumnBasket = column;
                    var inverse = window.listingSortDirectionBasket;

                    function IsNumeric(input) {
                        return !((input - 0) == input && input.length > 0);
                    }

                    function applySorting(x, y) {
                        if(x && x[window.listingSortColumnBasket] && y && y[window.listingSortColumnBasket])
                        {
                            var a = x[window.listingSortColumnBasket].toLowerCase();
                            var b = y[window.listingSortColumnBasket].toLowerCase();
                            return (IsNumeric(a) || IsNumeric(b) ? a > b : +a > +b) ? inverse ? -1 : 1 : inverse ? 1 : -1;
                        }
                        else
                            return inverse ? 1 : -1;
                    }
                    var ItemsInTheBasket = $(document).data(o.BasketDataKey);
                    if(ItemsInTheBasket)
                    {
                        ItemsInTheBasket = ItemsInTheBasket.sort(applySorting);
                    }
                    $(document).data(o.BasketDataKey, ItemsInTheBasket);
                    if (rebuild) {
                        rebuildBasket();
                    }
                }

                function sortToDefaultsIfAvailable(isInit)
                {
                    if($(document).data("listDefaultSortColumnIndex"))
                    {
                        if (window.listingSortColumn) {
                        var inverse = true;
                        if (window.listingSortDirection == "up") {
                                inverse = false;
                            }
                        }
                        sortListing(window.listingSortColumn, inverse, true);
                    }
                }

                /*Create tree like hierarchy of expanded items*/
                function createPathHierarchy(items)
                {
                    var item, path;
                    var children = {};
                    var hasParent = {};
                    for (var i = 0; i < items.length; i++)
                    {
                        var path = items[i];
                        var parent = null;
                        if(path && path.length)
                        {
                            for (var j = 0; j < path.length; j++)
                            {
                                var item = path[j];
                                if (!children[item]) {
                                    children[item] = {};
                                }
                                if (parent) {
                                    children[parent][item] = true;
                                    hasParent[item] = true;
                                }
                                parent = item;
                            }
                        }
                    }
                    var result = [];
                    for (item in children) {
                        if (!hasParent[item]) {
                            result.push(buildNodeRecursive(item, children));
                        }
                    }
                    return result;
                }

                function buildNodeRecursive(item, children)
                {
                    var node = {dirName:item, children:[]};
                    for (var child in children[item]) {
                        node.children.push(buildNodeRecursive(child, children));
                    }
                    return node;
                }

                //Renders list of items
                function renderListing(parentElement, locateFolder, useHash, responseData, searchResult) {
                    $("#filter").val(""); // reset user filter
                    parentElement = $(parentElement);
                    window.isSearchResult = searchResult;
                    if (searchResult) { // if it is a search result
                        $("#searchResultNotification").show().attr("search", "true");
                        $("#filesListing").addClass("searchResult");
                    }
                    else
                        $("#filesListing").removeClass("searchResult");
                    if (!$("#filter").data("eventAdded")) // bind event of keyup on filter input to do live filter if event not added already
                    {
                        if(window.useFilterForSearch)
                        {
                            $("#filter").unbind("keyup").keyup(function (evt) {
                                var evt = (evt) ? evt : ((event) ? event : null);
                                var val = this.value;
                                function startFilter() {
                                    setTimeout(function () {
                                        if (window.last_search_item && window.last_search_item === val) {
                                            return false;
                                        }
                                        window.last_search_item = val || window.last_search_item;
                                        $("#keyword").val(val);
                                        startSearch(val);
                                    }, 10);
                                }
                                if (evt.keyCode == 13) {
                                    startFilter();
                                } else {
                                    if(window.startFileFilterOnlyAfterThisChars)
                                    {
                                        if(val && val.length<window.startFileFilterOnlyAfterThisChars)
                                            return;
                                    }
                                    delay(function () {
                                        startFilter();
                                    }, 700);
                                }
                            }).data("eventAdded", true);
                        }
                        else
                        {
                            $("#filter").unbind("keyup").keyup(function (evt) {
                                var evt = (evt) ? evt : ((event) ? event : null);
                                var val = this.value;

                                function startFilter() {
                                    if (window.last_search_item && window.last_search_item === val) { // if value is not updated, do nothing
                                        return false;
                                    }
                                    $("#itemCount").prepend("<span style='margin-right:15px;color:#777;'>(Applying filter...)</span>");
                                    setTimeout(function () {
                                        filterItem(val);
                                    }, 10);
                                }
                                if (evt.keyCode == 13) {
                                    startFilter();
                                } else {
                                    if(window.startFileFilterOnlyAfterThisChars)
                                    {
                                        if(val && val.length<window.startFileFilterOnlyAfterThisChars)
                                            return;
                                    }
                                    delay(function () {
                                        startFilter();
                                    }, 1000);
                                }
                            }).data("eventAdded", true);
                        }
                    }
                    $("#cluetip").hide(); // remove tooltip shown
                    //If current view is thumbnail
                    if (currentView() == "Thumbnail") {
                        //This will provide HTML for thumbnails
                        sortToDefaultsIfAvailable();
                        var data = mapXmlToTable(responseData, true);
                        parentElement.html(data);
                        prepareDataRow(parentElement.find("li"));
                        bindTree();
                        bindAllEventsForThumbnailView(parentElement, data);
                        $("#slider").show();
                        scrollToFileListing();
                    } else { /* If its tree view */
                        if (!$("table#filesContainer").data("columnsAdded")) {
                            $("table#filesContainer").find('.start').html('');
                            $("table#filesContainer").removeClass('wait').append("<tbody></tbody>").prepend(headerTemplate);
                            $("table#filesContainer").data("columnsAdded", true);
                        }
                        //added by carlos
                        generateInlinePlayers();
                        if (searchResult) { // Displaying result from search query
                            //reset checkbox selection added by carlos
                            window.checkBoxesSelected = [];
                            $(document).data("expandedFolders", []);
                            scrollToFileListing();
                            //Get the html after XML parsing for treeview
                            var data = mapXmlToTable(responseData, true);
                            //Remove old items
                            parentElement.find(".headerSortDown").removeClass("headerSortDown");
                            parentElement.find(".headerSortUp").removeClass("headerSortUp");
                            parentElement.find("tbody").html('');
                            //Remove spinner and add HTML
                            parentElement.find("tbody").append(data);
                            //Display new items
                            var elems = parentElement.find('TR:hidden:not(.hiddenFile)').show().addClass("subdirectory"); /* Bind various events */
                            prepareDataRow(parentElement.find("tr"));
                            bindTree(elems);
                            blockFileListingUI(false);
                            //Apply proper padding and make it look like Tree
                            var nameColumns = $(elems).find('.columnName');
                            nameColumns.addClass("subdirectory");
                            nameColumns.last().parent().addClass("subdirectoryLast");
                            var relLink = $("a[rel='" + $(nameColumns).first().parent().attr("rel") + "']");
                            var dirCheckBox = $(relLink).closest("tr").find(".chkBox:visible"); /* Handle checkboxes */
                            checkUnCheckDirectory(dirCheckBox.parent(), dirCheckBox.is(":checked"));
                            toggleMainCheckbox(dirCheckBox.closest("table"));
                            var padLeft = 0;
                            if (relLink.parent().css("padding-left")) {
                                try {
                                    padLeft = parseInt(relLink.parent().css("padding-left").replace("px", ""));
                                } catch (ex) {}
                            } else {
                                padLeft = 20;
                            }
                            if (padLeft != NaN) {
                                if (padLeft >= 20) {
                                    padLeft += 20;
                                    nameColumns.attr("style", "padding-left:" + padLeft + "px !important;");
                                }
                            }
                            bindAllEventsForTreeviewGrid(parentElement, true, data);
                            sortToDefaultsIfAvailable();
                        } else if (!locateFolder && parentElement.hasClass('directory')) {
                            //If  to  show folder items  under  tree
                            //Get the html after XML parsing for treeview
                            if(window.useExtensionForAltMoviewPreview)
                            {
                                var filtered = [];
                                for (var i = 0; i < l.length; i++) {
                                    if(l[i] && !l[i].name.toLowerCase().endsWith(window.useExtensionForAltMoviewPreview))
                                        filtered.push(l[i]);
                                };
                                window.l = filtered;
                            }
                            var data = mapXmlToTable(responseData, true, true, parentElement);
                            //Remove old items
                            var $parent = parentElement.closest('table') || $parent;
                            $parent.find(".headerSortDown").removeClass("headerSortDown");
                            $parent.find(".headerSortUp").removeClass("headerSortUp");
                            $parent.find("tbody").empty();
                            $parent.append(data).find('TR:hidden').show();
                            //Select and create an array of folders that are expanded
                            var expandedFolder = parentElement.find("a").attr("rel");
                            var expandedFolders = $(document).data("expandedFolders");
                            if (!expandedFolders) {
                                expandedFolders = [];
                            }
                            if (!expandedFolders.has(expandedFolder)) {
                                expandedFolders.push(expandedFolder);
                            }
                            $(document).data("expandedFolders", expandedFolders);
                            var items = [];
                            for (var i = 0; i < expandedFolders.length; i++) {
                                var curItem = expandedFolders[i];
                                curItem = curItem.split("/").clean("");
                                if(!items.has(curItem))
                                    items.push(curItem);
                            };
                            bindTree($parent);
                            bindAllEventsForTreeviewGrid($parent, true, data);
                            // set proper padding to list items to make it like a tree layout
                            $parent.find("tr.subdirectory").each(function () {
                                var rootdir = escape(unescape($(this).attr("rootdir")));
                                var rootPath = escape(unescape(hashListener.getHash().toString().replace("#", "")));
                                rootdir = rootdir.replace(rootPath, '');
                                var level = rootdir.split("/").clean("").length;
                                var padLeft = level * 20;
                                if (padLeft != NaN) {
                                    if (padLeft >= 20) {
                                        padLeft += 20; // add next level padding
                                        $(this).find("td.columnName").attr("style", "padding-left:" + padLeft + "px !important;");
                                    }
                                }
                            });
                            prepareDataRow($parent.find("tr"));
                            if(window.enableFolderPreview)
                            {
                                window.quitPreviewCalls = true;
                                setTimeout(function(){
                                    window.quitPreviewCalls = false;
                                    fetchFolderPreview();
                                }, 500);
                            }
                            if (window.filteredItems && window.last_search_item && window.last_search_item.length>0) {
                                filterItem(window.last_search_item, true);
                            }
                            if(window.curExpanding)
                            {
                                $('body').removeClass('stop-scrolling');
                                //window.scrollToElement($("a[rel='"+window.curExpanding+"']"));
                                delete window.curExpanding;
                            }
                            if (expandedFolders) {
                                // loop through expanded folders and set proper icon for expand view
                                for (var item in expandedFolders) {
                                    if (expandedFolders[item].toLowerCase) {
                                        var rootdir = escape(unescape(expandedFolders[item]));
                                        var dirSpan = $parent.find("span[rel='" + rootdir + "']");
                                        $(dirSpan).parent().removeClass('collapsed').addClass('expanded').find(".expandButton").addClass('expanded');
                                        $(dirSpan).find("img").attr("src", o.expandedImageURL);
                                    }
                                }
                            }
                        } else if (locateFolder) {
                            //reset checkbox selection added by carlos
                            window.checkBoxesSelected = [];
                            // Its simply showing all content of selected folder
                            $(document).data("expandedFolders", []);
                            scrollToFileListing();
                            //If to  show folder items only
                            //Get the html after XML parsing  for treeview
                            var data = mapXmlToTable(responseData);
                            //Replace all existing items  with new items and show them
                            var $parent = parentElement.closest('table') || $parent;
                            $parent.find(".headerSortDown").removeClass("headerSortDown");
                            $parent.find(".headerSortUp").removeClass("headerSortUp");
                            $parent.find("tbody").empty();
                            $parent.append(data).find('TR:hidden').show();
                            prepareDataRow(parentElement.find("tr"));
                            bindTree($parent);
                            bindAllEventsForTreeviewGrid(parentElement.closest('table'), true, data);
                            sortToDefaultsIfAvailable();
                        } else {
                            //reset checkbox selection added by carlos
                            window.checkBoxesSelected = [];
                            // Called for the first time
                            $(document).data("expandedFolders", []);
                            //If its called for first  time. Get the html after XML parsing for treeview
                            // sortListing(false, false, true, true);
                            responseData = responseData || {};
                            responseData.listing = window.l;
                            var data = mapXmlToTable(responseData);
                            //Replace all existing items with new items and show them
                            parentElement.find("tbody").append(data);
                            bindTree(parentElement);
                            parentElement.closest('table').find("tr").attr("style", "background-position:40px 3px !important;");
                            prepareDataRow(parentElement.find("tr"));
                            bindAllEventsForTreeviewGrid(parentElement.closest('table'), true, data);
                            sortToDefaultsIfAvailable(true);
                        }
                    }
                    previewDefaultFile();
                    // Bind properties of folder loaded
                    bindCountOfFiles();
                    try {
                        window.cancelDrop();
                    } catch (ex) {}
                    $("div.itemCount").find("span.quotaText").remove();
                    window.quota = false;
                    window.quotaBytes = false;
                    // Select and show quota information for current folder
                    if (responseData) {
                        var bytes_sent = responseData.bytes_sent;
                        var bytes_received = responseData.bytes_received;
                        var max_upload_amount_day = responseData.max_upload_amount_day;
                        var max_upload_amount_month = responseData.max_upload_amount_month;
                        var max_upload_amount = responseData.max_upload_amount;
                        var max_upload_amount_available = responseData.max_upload_amount_available;
                        var max_upload_amount_day_available = responseData.max_upload_amount_day_available;
                        var max_upload_amount_month_available = responseData.max_upload_amount_month_available;

                        var max_download_amount = responseData.max_download_amount;
                        var max_download_amount_day = responseData.max_download_amount_day;
                        var max_download_amount_month = responseData.max_download_amount_month;
                        var max_download_amount_available = responseData.max_download_amount_available;
                        var max_download_amount_day_available = responseData.max_download_amount_day_available;
                        var max_download_amount_month_available = responseData.max_download_amount_month_available;
                        var ratio_available = responseData.ratio_available;
                        if(responseData.quota)
                        {
                            window.quota = responseData.quota;
                            window.quotaBytes = responseData.quota_bytes;
                            if ($("div.itemCount").find("span.quotaText").length == 0 && window.quota && window.quota.length > 0)
                                $("div.itemCount").append("<span class='quotaText'>&nbsp;&nbsp;" + window.quota + " <span id='quotaAvailableLabelText'>" + getLocalizationKey('quotaAvailableLabelText') +"</span></span>");
                        }
                        if(!window.doNotDisplayDirectoryInformation)
                        {
                            var dirInfoText = $("span#dirInfoText");
                            if(dirInfoText.length==0){
                                $("div.itemCount").after("<span id='dirInfoText'></span>");
                            }
                            dirInfoText = $("span#dirInfoText");
                            var dirInfo = "";
                            var uploadInfo = "";
                            var downloadInfo = "";
                            if((bytes_sent && parseInt(bytes_sent)>0) || (bytes_received &&  parseInt(bytes_received)>0))
                            {
                                dirInfo += "<span class='dirInfoDivider'></span><span class='bytesSentLabelTextByClass ui-priority-primary'>" + getLocalizationKey('bytesSentLabelTextByClass') +"</span> " + formatBytes(bytes_sent, 1000);
                                dirInfo += " <span class='bytesReceivedLabelTextByClass ui-priority-primary'>" + getLocalizationKey('bytesReceivedLabelTextByClass') +"</span> " + formatBytes(bytes_received, 1000);
                            }
                            if(max_upload_amount && parseInt(max_upload_amount)>0)
                            {
                                uploadInfo += "<span class='maxAndAvailableAmountLabelTextByClass lbl'>" + getLocalizationKey('maxAndAvailableAmountLabelTextByClass') +"</span> " + formatBytes(max_upload_amount_available / 1024, 1000) + "/" + formatBytes(max_upload_amount, 1000);
                            }
                            if(max_upload_amount_day && parseInt(max_upload_amount_day)>0)
                            {
                                uploadInfo += " <span class='maxAmountPerDayLabelTextByClass lbl'>" + getLocalizationKey('maxAmountPerDayLabelTextByClass') +"</span> " + formatBytes(max_upload_amount_day, 1000);
                                if(parseInt(max_upload_amount_day_available)!= 0)
                                {
                                    uploadInfo += " (" + formatBytes(max_upload_amount_day_available / 1024, 1000) + " <span class='quotaAvailableTextByClass'>" + getLocalizationKey('quotaAvailableTextByClass') +"</span>)";
                                }
                            }
                            if(max_upload_amount_month && parseInt(max_upload_amount_month)>0)
                            {
                                uploadInfo += " <span class='maxAmountPerMonthLabelTextByClass lbl'>" + getLocalizationKey('maxAmountPerMonthLabelTextByClass') +"</span> " + formatBytes(max_upload_amount_month, 1000);
                                if(parseInt(max_upload_amount_month_available) != 0)
                                {
                                    uploadInfo += " (" + formatBytes(max_upload_amount_month_available / 1024, 1000) + " <span class='quotaAvailableTextByClass'>" + getLocalizationKey('quotaAvailableTextByClass') +"</span>)";
                                }
                            }
                            if(uploadInfo.length>0)
                                dirInfo += "<span class='dirInfoDivider'></span> <span class='dirInfoUploadLabelTextByClass ui-priority-primary'> " + getLocalizationKey("dirInfoUploadLabelTextByClass") + "</span>";
                            dirInfo += uploadInfo;

                            if(max_download_amount && parseInt(max_download_amount)>0)
                            {
                                downloadInfo += "<span class='maxAndAvailableAmountLabelTextByClass lbl'>" + getLocalizationKey('maxAndAvailableAmountLabelTextByClass') +"</span> " + formatBytes(max_download_amount_available / 1024, 1000) + "/" + formatBytes(max_download_amount, 1000);
                            }
                            if(max_download_amount_day && parseInt(max_download_amount_day)>0)
                            {
                                downloadInfo += " <span class='maxAmountPerDayLabelTextByClass lbl'>" + getLocalizationKey('maxAmountPerDayLabelTextByClass') +"</span> " + formatBytes(max_download_amount_day, 1000);
                                if(parseInt(max_download_amount_day_available)!=0)
                                {
                                    downloadInfo += " (" + formatBytes(max_download_amount_day_available / 1024, 1000) + " <span class='quotaAvailableTextByClass'>" + getLocalizationKey('quotaAvailableTextByClass') +"</span>)";
                                }
                            }
                            if(max_download_amount_month && parseInt(max_download_amount_month)>0)
                            {
                                downloadInfo += " <span class='maxAmountPerMonthLabelTextByClass lbl'>" + getLocalizationKey('maxAmountPerMonthLabelTextByClass') +"</span> " + formatBytes(max_download_amount_month, 1000);
                                if(parseInt(max_download_amount_month_available)!=0)
                                {
                                    downloadInfo += " (" + formatBytes(max_download_amount_month_available / 1024, 1000) + " <span class='quotaAvailableTextByClass'>" + getLocalizationKey('quotaAvailableTextByClass') +"</span>)";
                                }
                            }
                            if(ratio_available && parseInt(ratio_available)!=0)
                            {
                                downloadInfo += " (" + formatBytes(ratio_available / 1024, 1000) + " <span class='quotaAvailableTextByClass'>" + getLocalizationKey('quotaAvailableTextByClass') +"</span>)";
                            }
                            if(downloadInfo.length>0)
                                dirInfo += "<span class='dirInfoDivider'></span> <span class='dirInfoDownloadLabelTextByClass ui-priority-primary'> " + getLocalizationKey("dirInfoDownloadLabelTextByClass") + "</span> ";
                            dirInfo += downloadInfo;

                            dirInfoText.empty();
                            if(dirInfo.length>0){
                                dirInfoText.append(dirInfo + " <span class='dirInfoDivider'></span>");
                                $('.pageLinksTop').addClass('dirInfoAvailable');
                            }
                            else
                                $('.pageLinksTop').removeClass('dirInfoAvailable');
                        }
                    }
                    // clear filter link event
                    $("a.clearFilterLink", "#filterPanel").unbind("click").click(function(e) {
                        e.preventDefault();
                        if ($("#filter").val().length > 0) {
                            setTimeout(function(){
                                $("#filter").val("").keyup().blur();
                            }, 10);
                            window.last_search_item = false;
                        }
                        selectDeselectAllItems(false); //uncheck all items in grid/tree
                        return false;
                    });
                    if(window.isSearchResult)
                    {
                        pageSelected(0, false, $(document).data("searchData"));
                        $(".mainProcessIndicator").hide();
                    }
                    setTimeout(function() {
                        stickyRelocate();
                    }, 100);
                    applyLocalizations();
                }

                /* Refersh oly selected/expanded folders in treeview */
                function refreshTreePaths(paths)
                {
                    var filesContainer = $("#filesContainer");
                    var btns = [];
                    var refreshRoot = false;
                    var rootPath = escape(unescape(hashListener.getHash().toString().replace("#", "")));
                    for (var i = 0; i < paths.length; i++) {
                        var rel = escape(unescape(paths[i]));
                        if(rel != rootPath)
                        {
                            var prnt = filesContainer.find("a[rel='"+rel+"']").closest("td").removeClass('expanded').addClass('collapsed').find(".expandButton").removeClass('expanded');
                            var newItems = [];
                            for (var j = 0; j < window.curTreeItems.length; j++) {
                                var curItem = window.curTreeItems[j];
                                if (escape(curItem.root_dir) != rel) {
                                    newItems.push(curItem);
                                }
                            }
                            window.curTreeItems = newItems;
                        }
                        else
                            refreshRoot = true;
                        btns.push(rel);
                    };
                    btns = btns.sort();
                    var spanTop = $(document).scrollTop();
                    function refreshNow(){
                        if(btns.length>0)
                        {
                            var rel = btns[0];
                            var curBtn = $(filesContainer.find("a[rel='"+rel+"']").closest("td").removeClass('expanded').addClass('collapsed').closest('tr').find("span.expandButton").removeClass('expanded'));
                            if(curBtn.length>0)
                            {
                                curBtn.trigger("click", [function(){
                                    btns.remove(0);
                                    refreshNow();
                                }]);
                            }
                            else
                            {
                                btns.remove(0);
                                refreshNow();
                            }
                        }
                        else
                        {
                            $('body').removeClass('stop-scrolling');
                            if ($('html,body').scrollTop() < spanTop) {
                                $('html,body').animate({
                                    scrollTop: spanTop
                                }, 0, false);
                            }
                        }
                    }
                    if(refreshRoot)
                    {
                        var expandedFolders = createPathHierarchy([$(document).data("expandedFolders")]);
                        $(".refreshButton").trigger("click");
                    }
                    else
                        refreshNow();
                }

                window.expandAllItems = function(context, expand, path, all)
                {
                    var elem;
                    if(typeof all == 'undefined')
                        all = true;
                    var filesContainer = $("#filesContainer");
                    var curDir = (unescape(hashListener.getHash().toString().replace("#", ""))) || "/";
                    if(path)
                        curDir = path;
                    if (context) {
                        elem = currentContext();
                        if (elem) {
                            var $curElem = $(elem);
                            _fileName = $curElem.find("a:first").attr("rel");
                        }
                    }
                    if (elem) {
                        var parentElem = $(elem);
                        if (currentView() != "Thumbnail") {
                            parentElem = parentElem.closest("tr");
                            curDir = parentElem.find(".expandButton").attr("rel");
                        }
                        expand = parentElem.find(".expandButton:not(.expanded)").length>0;
                    }
                    else if(typeof expand == "undefined")
                    {
                        expand = filesContainer.find(".expandButton[rel^='"+curDir+"']:not(.expanded)").length>0;
                    }

                    if(expand)
                    {
                        var toExpand = [];
                        filesContainer.find(".expandButton[rel^='"+curDir+"']:not(.expanded)").each(function(){
                            toExpand.push($(this).attr("rel"));
                        });
                        if(toExpand.length>0)
                        {
                            // loading.show(true);
                            window.expandItems(createPathHierarchy([toExpand]), function(){
                                if(all)
                                    expandAllItems(false, true, curDir, all);
                                // loading.init();
                                // loadingIndicator.dialog("option", "modal", false);
                                // loading.hide();
                            });
                        }
                        else{
                            // loading.hide();
                        }
                    }
                    else
                    {
                        if(filesContainer.find(".expandButton[rel^='"+curDir+"'].expanded").length>0)
                        {
                            // loading.show(true);
                            function refreshNow()
                            {
                                var toCollapse = filesContainer.find(".expandButton[rel^='"+curDir+"'].expanded:first");
                                if(toCollapse.length>0)
                                {
                                    toCollapse.trigger("click");
                                    setTimeout(function() {
                                        refreshNow();
                                    }, 10);
                                }
                                else
                                {
                                    $(document).data("expandedFolders", []);
                                    // loading.hide();
                                }
                            }
                            refreshNow();
                        }
                    }
                }

                window.expandItems = function(items, callback){
                    var expandedTree;
                    if(!items)
                    {
                        var expandedFolders = [$(document).data("expandedFolders")];
                        expandedTree = createPathHierarchy(expandedFolders);
                    }
                    else
                        expandedTree = items;
                    if(expandedTree.length>0)
                        expandTreeItems(expandedTree, callback);
                    else if(callback)
                        callback();
                }

                function expandTreeItems(items, callback)
                {
                    var filesContainer = $("#filesContainer");
                    if(items.length>0)
                    {
                        for (var i = 0; i < items.length; i++) {
                            var curItem = items[i];
                            var thisDir = curItem.dirName;
                            if(thisDir)
                            {
                                var btn = filesContainer.find("a[rel='"+thisDir+"']").closest("td:not(.expanded)").find("span.expandButton");
                                if(btn.length>0)
                                {
                                    btn.trigger("click", [function(){
                                        expandItems(curItem.children, callback);
                                    }]);
                                }
                                else if(callback)
                                    callback();
                            }
                        };
                    }
                    else if(callback)
                        callback();
                }

                function isNumeric(value) {
                    return /^\d+$/.test(value);
                }

                var dirSizeInfo = $('#dirSizeInfo');
                var bindFileCountDelay = (function () {
                    var timer = 0;
                    return function (callback, ms) {
                        clearTimeout(timer);
                        timer = setTimeout(callback, ms);
                    };
                })();

                function bindCountOfFilesProxy(){
                    if (!window.listingInfo) window.listingInfo = {};
                    var curDir = "/";
                    if (hashListener.getHash() && hashListener.getHash().toString() != "") {
                        curDir = unescape(hashListener.getHash().toString().replace("#", ""));
                    }
                    window.listingInfo.hiddenItems = window.listingInfo.hiddenItems || 0;
                    if (currentView() == "Thumbnail") {
                        //sets listingInfo variable with various details of loaded folder
                        window.listingInfo.totalItems = $("li", "#filesContainerDiv").length;
                        window.listingInfo.totalVisibleItems = $("li:visible", "#filesContainerDiv").length;
                        window.listingInfo.totalDirs = $("li.directoryThumb:visible", "#filesContainerDiv").length;
                        window.listingInfo.totalFiles = window.listingInfo.totalVisibleItems - window.listingInfo.totalDirs;
                        window.listingInfo.totalItemsInDir = window.listingInfo.totalItems + window.listingInfo.hiddenItems;
                        window.listingInfo.filtered = false;
                        if (curDir != window.listingInfo.curDir) {
                            window.listingInfo.selectedEverything = false;
                        }
                        selectDeselectAllItems(window.listingInfo.selectedEverything);
                        if (window.listingInfo.selectedEverything) {
                            $("#selectionOfItemsOptions").show();
                        }
                        window.listingInfo.curDir = curDir;
                        window.listingInfo.isSearchResult = $("#searchResultNotification").attr("search");
                        var msg = window.listingInfo.totalVisibleItems + " " + getLocalizationKey("FileCounterItemsText") + " (";
                        if (window.listingInfo.totalDirs > 0) {
                            msg += window.listingInfo.totalDirs + " " + getLocalizationKey("FileCounterFoldersText") + ", ";
                        }
                        msg += window.listingInfo.totalFiles + " " + getLocalizationKey("FileCounterFilesText") + ") "
                        if (window.l && window.listingInfo.totalItems < l.length && !window.disableDirectoryItemCount) {
                            var items = l.length;// + window.listingInfo.hiddenItems;
                            msg += getLocalizationKey("TotalItemsInDirMsgText").replace("{count}", items);
                            window.listingInfo.totalItemsInDir = items;
                        }
                        if (window.listingInfo.hiddenItems > 0 && !window.hideHiddenFilesCount) {
                            msg += window.listingInfo.hiddenItems + " " + getLocalizationKey("FileCounterHiddenItemsText")
                        }
                        $("div.itemCount").html(msg);
                        if ($("div.itemCount").find("span.quotaText").length == 0 && window.quota && window.quota.length > 0) $("div.itemCount").append("<span class='quotaText'>&nbsp;&nbsp;" + window.quota + " " + getLocalizationKey('quotaAvailableLabelText') +"</span>");
                        if (window.filteredItems && $("#filter").val().length > 0) {
                            window.listingInfo.filtered = true;
                            var files = window.filteredItems.filesCount;
                            var dirs = window.filteredItems.dirsCount;
                            window.listingInfo.totalDirs = dirs;
                            window.listingInfo.totalFiles = files;
                            window.listingInfo.totalItems = files + dirs;
                            var FilterItemCountText = getLocalizationKey("FilterItemCountText");
                            var phrase = crushFTPTools.htmlEncode($("#filter").val(), false, true);
                            var itemCount = FilterItemCountText.replace("{filterVal}", phrase).replace("{totalItems}", window.listingInfo.totalItems).replace("{folders}", dirs).replace("{files}", files);
                            $("#itemCount").prepend("<span style='margin-right:15px;color:#777;'>" + itemCount + "</span>");
                        }
                    } else {
                        window.listingInfo.totalItems = $("tr", "#filesContainer>tbody").length;
                        window.listingInfo.totalVisibleItems = $("td.columnName:visible", "#filesContainer>tbody").length;
                        window.listingInfo.totalDirs = $("td.directory:visible", "#filesContainer>tbody").length;
                        window.listingInfo.totalFiles = window.listingInfo.totalVisibleItems - window.listingInfo.totalDirs;
                        window.listingInfo.totalItemsInDir = window.listingInfo.totalItems + window.listingInfo.hiddenItems;
                        window.listingInfo.filtered = false;
                        if (curDir != window.listingInfo.curDir) {
                            window.listingInfo.selectedEverything = false;
                        }
                        selectDeselectAllItems(window.listingInfo.selectedEverything);
                        if (window.listingInfo.selectedEverything) {
                            $("#selectionOfItemsOptions").show();
                        }
                        window.listingInfo.curDir = curDir;
                        window.listingInfo.isSearchResult = $("#searchResultNotification").attr("search");
                        var msg = window.listingInfo.totalVisibleItems + " " + getLocalizationKey("FileCounterItemsText") + " (";
                        if (window.listingInfo.totalDirs > 0) {
                            msg += window.listingInfo.totalDirs + " " + getLocalizationKey("FileCounterFoldersText") + ", ";
                        }
                        msg += window.listingInfo.totalFiles + " " + getLocalizationKey("FileCounterFilesText") + ") "
                        if (window.l && window.listingInfo.totalItems < l.length && !window.disableDirectoryItemCount) {
                            var items = l.length;// + window.listingInfo.hiddenItems;
                            msg += getLocalizationKey("TotalItemsInDirMsgText").replace("{count}", items);
                            window.listingInfo.totalItemsInDir = items;
                        }
                        if (window.listingInfo.hiddenItems > 0 && !window.hideHiddenFilesCount) {
                            msg += window.listingInfo.hiddenItems + " " + getLocalizationKey("FileCounterHiddenItemsText")
                        }
                        $("div.itemCount").html(msg);
                        if ($("div.itemCount").find("span.quotaText").length == 0 && window.quota && window.quota.length > 0) $("div.itemCount").append("<span class='quotaText'>&nbsp;&nbsp;" + window.quota + " " + getLocalizationKey('quotaAvailableLabelText') +"</span>");
                        if (window.filteredItems && $("#filter").val().length > 0) {
                            window.listingInfo.filtered = true;
                            var files = window.filteredItems.filesCount;
                            var dirs = window.filteredItems.dirsCount;
                            window.listingInfo.totalDirs = dirs;
                            window.listingInfo.totalFiles = files;
                            window.listingInfo.totalItems = files + dirs;
                            var FilterItemCountText = getLocalizationKey("FilterItemCountText");
                            var phrase = crushFTPTools.htmlEncode($("#filter").val(), false, true);
                            var itemCount = FilterItemCountText.replace("{filterVal}", phrase).replace("{totalItems}", window.listingInfo.totalItems).replace("{folders}", dirs).replace("{files}", files);
                            $("#itemCount").prepend("<span style='margin-right:15px;color:#777;'>" + itemCount + "</span>");
                        }
                    }
                    var items = window.curTreeItems;
                    if(items){
                        var currentPath = window.currentPath();
                        var size = 0;
                        for (var i = 0; i < items.length; i++) {
                            if(currentPath == unescape(items[i].root_dir))
                            {
                                var curSize = items[i].size;
                                if(curSize && isNumeric(curSize))
                                    size += parseInt(curSize);
                            }
                        }
                        var sizeFormatted = formatBytes(size);
                        var fileSizeText = getLocalizationKey("CurrentFileSizeText");
                        dirSizeInfo.text(fileSizeText.replace("{size}", sizeFormatted));
                    }
                    else{
                        dirSizeInfo.text("");
                    }
                }

                function previewDefaultFile(){
                    if(!window.autoPreviewMediaOnLoad)
                        return;
                    var extsToOpenPreview = $(document).data("OPEN_PREVIEW_EXTENSIONS");
                    var items = window.curTreeItems;
                    var toPlay;
                    if(items){
                        for (var i = 0; i < items.length; i++) {
                            var curItem = items[i];
                            var ext = getFileExtension(curItem.name);
                            if(extsToOpenPreview.has(ext)){
                                toPlay = curItem;
                                i = items.length;
                                continue;
                            }
                        }
                    }
                    if(toPlay){
                        if (currentView() == "Thumbnail") {
                            $("a[href='"+toPlay.href_path+"']:first", $("#filesContainerDiv")).dblclick()
                        } else {
                            $("a[href='"+toPlay.href_path+"']:first", $("#filesContainer")).click()
                        }
                    }
                }

                //Method to show properties of loaded folder
                function bindCountOfFiles() {
                    bindFileCountDelay(bindCountOfFilesProxy, 200);
                }

                // method to bind context menu on selectall checkbox to provide multiple options.
                function bindSelectionMenu() {
                    if ($("a.selectionLink") && $("a.selectionLink").contextMenu) {
                        $("a.selectionLink").contextMenu({
                            menu: 'selectionMenu'
                        }, function (action, el, pos, command) {
                            handleCheckBoxContextMenuEvents(action, el, pos, command);
                        }).click(function (evt) {
                            evt.stopPropagation();
                            evt.preventDefault();
                            $(this).trigger("mousedown").trigger("mouseup");
                            return false;
                        });
                    }
                }

                // method to bind paging size menu
                function bindPagingSizeMenu() {
                    if ($("a.pageSizeSelectionLink") && $("a.pageSizeSelectionLink").contextMenu) {
                        $("a.pageSizeSelectionLink").contextMenu({
                            menu: 'pagingSizeMenu'
                        }, function (action, el, pos, command) {
                            handlePageSizeContextMenuEvents(action, el, pos, command);
                        }).click(function (evt) {
                            evt.stopPropagation();
                            evt.preventDefault();
                            $(this).trigger("mousedown").trigger("mouseup");
                            return false;
                        });
                    }
                }

                function afterLocalizationLoaded(){
                    if (window.forSlideshow)
                    {
                        if(window.localizations && window.localizations.slideshow)
                        {
                            window.slideshowLocalizations = $.extend(window.slideshowLocalizations, window.localizations.slideshow);
                        }
                        if(window.persistentLocalizationStrings && window.persistentLocalizationStrings.slideshow)
                        {
                            window.slideshowLocalizations = $.extend({}, window.slideshowLocalizations, window.persistentLocalizationStrings.slideshow);
                        }
                        applySlideshowLocalizations();
                        setTimeout(function(){
                            applySlideshowLocalizations()
                        }, 100);
                    }
                    if(!window.useOldUploader && window.newUploadAdded && window.crushUpload){
                        window.crushUpload.refreshLoc();
                    }
                }

                function loadAndApplyLanguageLocalizations(name, fresh, force)
                {
                    var curLang = $.cookie("_i18n");
                    if(!window.saveLanguageSelectionInCookie)
                    {
                        curLang = window.languageLoaded || window.defaultWILanguage || "";
                        name = name || curLang;
                        if(window.languageLoaded != curLang)
                            force = true;
                    }
                    if(window.forSlideshow && crushFTPTools.queryString("lang"))
                    {
                        name = curLang = crushFTPTools.queryString("lang");
                        force = true;
                        fresh = false;
                    }
                    if(fresh)
                    {
                        window.isInitLocale = true;
                        if(typeof window._locals != "undefined")
                        {
                            window.differentLocale = {};
                            try{
                                for(item in localizations)
                                {
                                    if(window._locals[item] && typeof window._locals[item] == "string" && localizations[item] != window._locals[item])
                                    {
                                        differentLocale[item] = localizations[item];
                                    }
                                }
                            }catch(ex){}
                        }
                        curLang = curLang || window.defaultWILanguage;
                        if(curLang && window.saveLanguageSelectionInCookie)
                            loadAndApplyLanguageLocalizations(curLang + "", false, true);
                        else if(window.detectBrowserLanguage)
                        {
                            var languageMenu = $("#languageMenu");
                            var userLang = navigator.language || navigator.userLanguage;
                            if(languageMenu.find("a[href*='#"+userLang+"']").length>0)
                            {
                                curLang = userLang;
                            }
                            else if(userLang.indexOf("-")>0)
                            {
                                userLang = userLang.split("-")[0];
                                if(languageMenu.find("a[href*='#"+userLang+"']").length>0)
                                {
                                    curLang = userLang;
                                }
                            }
                        }
                    }
                    else
                    {
                        if(!force && curLang == name){
                            afterLocalizationLoaded();
                            return false;
                        }
                        if(!name){
                            afterLocalizationLoaded();
                            return false;
                        }
                        $.getScript("/WebInterface/localizations/" + name + ".js").done(function(){
                            if(typeof window.persistentLocalizationStrings != "undefined")
                            {
                                localizations = $.extend(localizations, window.persistentLocalizationStrings);
                            }
                            if(window.isInitLocale && window.differentLocale && !window.detectBrowserLanguage)
                            {
                                localizations = $.extend(localizations, window.differentLocale);
                                window.isInitLocale = false;
                            }
                            window.languageLoaded = name;
                            afterLocalizationLoaded();
                            setTimeout(function(){
                                $(document).data("localizations", localizations);
                                applyLocalizations();
                                applyButtonLocalizations();
                                bindCountOfFiles();
                                $("#filesContainerDiv").find("li").each(function(){
                                    loadIconPreview(false, true, $(this), false, true);
                                })
                                if(window.saveLanguageSelectionInCookie)
                                {
                                    var options = {
                                        path: '/',
                                        expires: 365
                                    };
                                    $.cookie("_i18n", name, options);
                                }
                                else
                                {
                                    $.cookie("_i18n", "", {
                                        path: '/',
                                        expires: -1
                                    });
                                }
                                var mainNav = $("#mainNavigation");
                                if(typeof window.navigationMenuItemChangeHTML != "undefined")
                                {
                                    for(var item in window.navigationMenuItemChangeHTML)
                                    {
                                        try{
                                            var val = window.navigationMenuItemChangeHTML[item];
                                            $("a:exacttext('"+item+"')", mainNav).html(val);
                                        }
                                        catch(ex){}
                                    }
                                }
                                try{
                                    if(typeof $.datepicker.regional[name] != "undefined")
                                    {
                                        $.datepicker.setDefaults($.datepicker.regional[name]);
                                    }
                                    else
                                    {
                                        $.datepicker.setDefaults($.datepicker.regional[""]);
                                    }
                                }catch(ex){
                                    $.datepicker.setDefaults($.datepicker.regional[""]);
                                }

                                try{
                                    window.dontShowBasket = true;
                                    $("#basketFilesContainer").remove();
                                    window.rebuildBasket();
                                    setTimeout(function(){
                                        window.dontShowBasket = false;
                                    }, 1000);
                                }
                                catch(ex){}
                                if(window.forSlideshow && window.initSlideShowEvents)
                                    window.initSlideShowEvents();
                            }, 500);
                        }).fail(function(){
                            growl("Error :", "Localization set for language " + name + " is not available", true, 3500);
                        });
                    }
                }

                function bindLanguageMenu(){
                    var languageSelector = $("div#languageSelector");
                    if (languageSelector && languageSelector.contextMenu) {
                        languageSelector.contextMenu({
                            menu: 'languageMenu',
                            topMargin:0,
                            leftMargin:-150
                        }, function (action, el, pos, command) {
                            if(action)
                            {
                                loadAndApplyLanguageLocalizations(action, false, true);
                            }
                        }).click(function (evt) {
                            evt.stopPropagation();
                            evt.preventDefault();
                            $(this).trigger("mousedown").trigger("mouseup");
                            return false;
                        });
                    }
                }

                var localdelay = (function () {
                    var timer = 0;
                    return function (callback, ms) {
                        clearTimeout(timer);
                        timer = setTimeout(callback, ms);
                    };
                })();

                // set of events combined to this method for thumbs view
                function bindAllEventsForThumbnailView(parentElement, data) {
                    // localdelay(function(){
                        bindBreadcrumbs(); // breadcrumbs
                        //Enable context menu
                        var ok = true;
                        try {
                            if (noMenus) ok = false;
                        } catch (e) {}
                        if (ok) {
                            $(".fileBox").contextMenu({
                                menu: 'myMenu'
                            }, function (action, el, pos, command) {
                                handleContextMenuEvents(action, el, pos, command);
                            });
                        }
                        bindSortingToTreeviewGrid();
                        bindGoToFolderEvents($(parentElement), o);
                        //Remove spinner
                        $('.wait').removeClass('wait');
                        // Set item title text to fit width
                        setTitleText();
                        // Set icons to proper zoom as selection
                        zoomInOutView(zoomSlider.slider("value"));
                        checkFilesAvailable(data);
                        refreshView();
                        loadDirectoryPreview();
                        execAfterDirLoad();
                    // }, 300);
                }

                // set of events combined to this method for tree view
                function bindAllEventsForTreeviewGrid(element, checkForFiles, data) {
                    // localdelay(function(){
                        $(element).find("tr:even").addClass("jqueryFileTreeAlt");
                        howerEffect();
                        bindCheckboxEvents();
                        bindBreadcrumbs();
                        if (checkForFiles)
                        {
                            checkFilesAvailable(data);
                        }
                        var itemCount = 0;
                        if (currentView() == "Thumbnail") {
                            itemCount = $("li", "#filesContainerDiv").length;
                        } else {
                            itemCount = $("tr", "#filesContainer>tbody").length;
                            bindSortingToTreeviewGrid();
                        }
                        if (navigator.appName.indexOf("Explorer") < 0 || (navigator.appName.indexOf("Explorer") >= 0 && itemCount < 200)) {
                            bindContextMenu(element); //no context menu on explorer...jsut too slow!
                        }
                        bindGoToFolderEvents(element, o);
                        refreshView();
                        loadDirectoryPreview();
                        execAfterDirLoad();
                    // }, 300);
                }

                //refreshes current view
                function refreshView() {
                    // If to show items starting with a dot
                    var hideItemsStartingWithDot = $.cookie(o.CookieHideItemStartingWithDot);
                    hideItemsStartingWithDot = hideItemsStartingWithDot == "true";
                    if (hideItemsStartingWithDot) {
                        $("#SelectCheckboxContextMenuCheckItemsWithDotText").parent().hide();
                    } else {
                        $("#SelectCheckboxContextMenuCheckItemsWithDotText").parent().show();
                    }
                    if(hideItemsStartingWithDot)
                        $("#hideItemsStartingWithDot").attr("checked", "checked");
                    else
                        $("#hideItemsStartingWithDot").removeAttr("checked");

                    // If to show filter on screen
                    var _hideFilter = $.cookie(o.CookieHideFilter);
                    _hideFilter = _hideFilter == "true";
                    var selectionLink = $(".selectionLink").show();
                    if (_hideFilter) {
                        $(".filterArea").hide();
                    } else {
                        $(".filterArea").show();
                    }
                    // If to show checkbox column in listing
                    var hideCheckBoxColumn = $.cookie(o.CookieHideCheckBoxColumn);
                    if (hideCheckBoxColumn && hideCheckBoxColumn != "true" && typeof $(document).data("disableCheckCol") !="undefined") {
                        hideCheckBoxColumn = $(document).data("disableCheckCol");
                        if (hideCheckBoxColumn == "true") {
                            $("#hideCheckBoxColumn").attr("disabled", "disabled");
                        }
                    }
                    hideCheckBoxColumn = hideCheckBoxColumn == "true";
                    // If to disable name column
                    var disableNameCol = $(document).data("disableNameCol");
                    disableNameCol = disableNameCol == "true";
                    // If to disable size column
                    var disableSizeCol = $(document).data("disableSizeCol");
                    disableSizeCol = disableSizeCol == "true";
                    // If to disable modified column
                    var disableModifiedCol = $(document).data("disableModifiedCol");
                    disableModifiedCol = disableModifiedCol == "true";
                    // If to disable keywords column
                    var disableKeywordsCol = $(document).data("disableKeywordsCol");
                    disableKeywordsCol = disableKeywordsCol == "true";
                    window.hideKeywordCol = disableKeywordsCol;
                    window.hideModifiedCol = disableModifiedCol;
                    window.hideCheckboxCol = hideCheckBoxColumn;
                    window.hideNameCol = disableNameCol;
                    window.hideSizeCol = disableSizeCol;
                    //Shows/hides columns and properties based on customization set
                    if (currentView() != "Thumbnail") {
                        var filesContainer = $("#filesContainer");
                        if (hideCheckBoxColumn) {
                            filesContainer.find("td.columnSelect").hide();
                            filesContainer.find("thead > tr > td:first").hide();
                            selectionLink.hide();
                        } else {
                            filesContainer.find("td.columnSelect").show();
                            filesContainer.find("thead > tr > td:first").show();
                        }
                        if (disableNameCol) {
                            filesContainer.find("td.columnName,td.thName").hide();
                        } else {
                            filesContainer.find("td.columnName").show();
                        }
                        if (disableSizeCol) {
                            filesContainer.find("td.columnSize,td.thSize").hide();
                        } else {
                            filesContainer.find("td.columnSize").show();
                        }
                        if (disableModifiedCol) {
                            filesContainer.find("td.columnModified, td.thModified").hide();
                        } else {
                            filesContainer.find("td.columnModified, td.thModified").show();
                        }
                        if (disableKeywordsCol) {
                            filesContainer.find("td.columnKeywords,td.thKeywords").hide();
                        } else {
                            filesContainer.find("td.columnKeywords").show();
                        }
                        if(window.metaInfoKeysToShowInTreeview)
                        {
                            var columns = window.metaInfoKeysToShowInTreeview.split("\n");
                            var hdrs = $(headerTemplate);
                            if(columns.length>0){
                                for (var i = 0; i < columns.length; i++) {
                                    var curCol = columns[i].split("||");
                                    if(hdrs.find("td.col-"+curCol[0]).length==0)
                                    {
                                        var name = curCol[1] ? curCol[1] : curCol[0];
                                        var index = curCol[2] ? parseInt(curCol[2]) : -1;
                                        if(index >= 0)
                                        {
                                            hdrs.find("tr").insertAt(index, "<td class='col-"+curCol[0]+"'><span id='col_"+curCol[0]+"'>"+name+"</span></td>");
                                        }
                                    }
                                }
                                headerTemplate = "<thead>" + hdrs.html() + "</thead>";
                            }
                        }
                    }
                    // re-bind file count
                    bindCountOfFiles();
                }

                // Bind sorting to treeview grid
                function bindSortingToTreeviewGrid() {
                    var filesContainer = jQuery('#filesContainer');
                    var th = filesContainer.find('thead').find('td').addClass("header"),
                        inverse = true;
                    // sort direction
                    window.listingSortDirection = $(document).data("listDefaultSortDirection") || "up";
                    // column sorted
                    window.listingSortColumn = $(document).data("listDefaultSortColumnIndex") || 1;
                    // select default column to sort
                    if ($("thead", filesContainer).find("td").eq(window.listingSortColumn)) {
                        window.listingSortColumn = $("thead", filesContainer).find("td").eq(window.listingSortColumn).attr("colName");
                        window.listingSortColumn = window.listingSortColumn || "name";
                    } else {
                        window.listingSortColumn = "name";
                    }
                    if (window.listingSortColumn) {
                        if (window.listingSortDirection == "up") {
                            inverse = false;
                        }
                    }
                    $(".chkBoxAll", filesContainer).unbind().click(function (event) {
                        var chkBox = $(this);
                        toggleCheckBoxesAll($(this).closest("table"), chkBox.is(":checked"));
                    });

                    th.unbind().click(function () {
                        if ($(this).hasClass("thSelect")) {
                            return;
                        }
                        inverse = $(this).hasClass("headerSortUp");
                        sortListing($(this).attr("colName"), inverse, true);
                        $(this).removeClass("headerSortDown, headerSortUp");
                        $(this).parent().find(".headerSortDown").removeClass("headerSortDown");
                        $(this).parent().find(".headerSortUp").removeClass("headerSortUp");
                        if (!inverse) {
                            $(this).addClass("headerSortUp");
                        } else {
                            $(this).addClass("headerSortDown");
                        }
                    });
                }

                // Bind sorting to treeview grid in basket
                function bindSortingToBasketTreeviewGrid() {
                    var th = jQuery('#FileBasketList').find('thead > tr > td').addClass("header"),
                        inverseBasket = true;
                    // sort direction
                    window.listingSortDirectionBasket = $(document).data("listDefaultSortDirection") || "up";
                    // column sorted
                    window.listingSortColumnBasket = $(document).data("listDefaultSortColumnIndex") || 1;
                    var basketFilesContainer = $("table#basketFilesContainer");
                    // select default column to sort
                    if ($("thead", basketFilesContainer).find("td").eq(window.listingSortColumnBasket)) {
                        window.listingSortColumnBasket = $("thead", basketFilesContainer).find("td").eq(window.listingSortColumnBasket).attr("colName");
                        window.listingSortColumnBasket = window.listingSortColumnBasket || "name";
                    } else {
                        window.listingSortColumnBasket = "name";
                    }
                    if (window.listingSortColumnBasket) {
                        if (window.listingSortDirectionBasket == "up") {
                            inverseBasket = false;
                        }
                    }
                    if (!inverseBasket) {
                        $("thead", basketFilesContainer).find("td[colName='" + window.listingSortColumnBasket + "']").addClass("headerSortUp");
                    } else {
                        $("thead", basketFilesContainer).find("td[colName='" + window.listingSortColumnBasket + "']").addClass("headerSortDown");
                    }
                    $(".chkBoxAll", basketFilesContainer).unbind().click(function (event) {
                        var chkBox = $(this);
                        if(chkBox.is(":checked"))
                            basketFilesContainer.find(".chkBox").attr("checked", "checked");
                        else
                            basketFilesContainer.find(".chkBox").removeAttr("checked");
                        fileselectionUpdated(true);
                    });
                    // Add sorting event
                    th.unbind().click(function () {
                        if ($(this).hasClass("thSelect")) {
                            return;
                        }
                        inverseBasket = !inverseBasket;
                        sortBasketListing($(this).attr("colName"), inverseBasket, true);
                        $(th).parent().find(".headerSortDown").removeClass("headerSortDown");
                        $(th).parent().find(".headerSortUp").removeClass("headerSortUp");
                        if (!inverseBasket) {
                            $(this).removeClass("headerSortDown").addClass("headerSortUp");
                        } else {
                            $(this).removeClass("headerSortUp").addClass("headerSortDown");
                        }
                    });
                    if (!$("#FileBasketList").data("sortingAdded")) {
                        // Sort the list with options selected above.
                        sortBasketListing(window.listingSortColumnBasket, inverseBasket, true);
                        $("#FileBasketList").data("sortingAdded", true);
                    }
                }

                // Context menu events
                function bindContextMenu(elems) {
                    var addMenu = true;
                    // noMenus is global variable, if it is set to true no context menu should be bound
                    try {
                        if (noMenus) addMenu = false;
                    } catch (e) {}
                    if (addMenu) {
                        var $filesContainer = elems || $("#filesContainer");
                        $("td.fileTR, td.directory, td.file").contextMenu({
                            menu: 'myMenu',
                            addHoverClass: true
                        }, function (action, el, pos, command) {
                            handleContextMenuEvents(action, el, pos, command);
                        });
                    }
                    $(".chkBoxAll").contextMenu({
                        menu: 'checkBoxMenu'
                    }, function (action, el, pos, command) {
                        handleCheckBoxContextMenuEvents(action, el, pos, command);
                    });
                }

                //Context menu item for message when no files available in a folder
                function bindContextMenuOnEmptyMessageBlock(elem){
                    if(window.enableBlankContext)return;
                    window.enableBlankContext = true;
                    var addMenu = true;
                    try {
                        if (noMenus) addMenu = false;
                    } catch (e) {}
                    if (addMenu) {
                        elem.contextMenu({
                            menu: 'myMenu',
                            addHoverClass: true
                        }, function (action, el, pos, command) {
                            handleContextMenuEvents(action, el, pos, command);
                        });
                    }
                }

                // sets a message if nothing to display, else clears loading info
                function checkFilesAvailable(fileList) {
                    if ((fileList && fileList.length == 0) || !fileList) {
                        var ovrlayBGColor = window.noFilesOverlayBGColor || "#000";
                        var overlayTransparency = window.noFilesOverlayTransparency || 0.6;
                        o.FileListingElement.block({
                            message: "<div id='FilesNotAvailableMessage'>" + getLocalizationKey("FilesNotAvailableMessage") + "</div>",
                            css: {
                                border: 'none',
                                padding: '5px',
                                backgroundColor: '#fff',
                                color: '#000',
                                width: '200px',
                                'margin-left': '-100px',
                                top: '40px',
                                left: '50%',
                                '-webkit-border-radius': '10px',
                                '-moz-border-radius': '10px',
                                'text-align': 'center',
                                'font-size': '11px'
                            },
                            overlayCSS :
                            {
                                backgroundColor : ovrlayBGColor,
                                opacity : overlayTransparency
                            },
                            onBlock : function(elem){
                                bindContextMenuOnEmptyMessageBlock(o.FileListingElement);
                            }
                        });
                    } else {
                        o.FileListingElement.unblock();
                    }
                }

                // This method loops through list item and sets data like name, size, privs etc for each item. Which isused later on actions.
                function prepareDataRow(elems) {
                    $(elems).each(function () {
                        if(typeof $(this).data("dataRow") == "undefined")
                        {
                            var keywords = unescape($(this).attr("keywords"));
                            if (keywords && keywords.length >= o.keywordsCharLimit) {
                                keywords = keywords.substr(
                                0, o.keywordsCharLimit) + "...";
                            }
                            var data = {
                                name: $(this).attr("name"),
                                size: $(this).attr("size"),
                                sizeB: $(this).attr("sizeInBytes"),
                                date: $(this).attr("date"),
                                fulldate: $(this).attr("fulldate"),
                                keywords: keywords,
                                preview: $(this).attr("preview"),
                                root_dir: $(this).attr("root_dir"),
                                privs: unescape($(this).attr("privs"))
                            };
                            $(this).data("dataRow", data);
                            $(this).removeAttr("name").removeAttr("size").removeAttr("date").removeAttr("privs").removeAttr("fulldate");
                        }
                    });
                }
                var regexpCache = {};

                // Adds line break in title of an item if it exceeds provided length
                function wbr(str, num) {
                    if (!regexpCache[num]) {
                        regexpCache[num] = RegExp("(\[^\s-].{" + num + "})(?=\[^\s-].)", "g");
                    }
                    return str.replace(regexpCache[num], "$1<br>");
                }

                // Sets title of an item based on allowed characters length
                function setTitleText(elem, chars) {
                    elem = elem || $(".imgTitle").find("a");
                    chars = chars || o.thumbnailTextCharsLimit;
                    elem.addClass("wordwrap");
                    if ($.browser.msie && parseInt(jQuery.browser.version) == 8) {
                        elem.each(function () {
                            try {
                                var title = $(this).closest("li").data("dataRow").name;
                                $(this).html(wbr($(this).text(), chars));
                            } catch (ex) {}
                        });
                    }
                }

                function clearUIDNDData(srcPanel){
                    try{
                        $(document).unbind("keyup.crushDraggables");
                        srcPanel = srcPanel || $("#filesListing");
                        srcPanel.removeData("dragging");
                        var dragUIInformationPopup = $("#dragUIInformationPopup");
                        $(".dragdropItems").hide();
                        window.disableVtip = false;
                        if($('.ui-draggable-dragging').length>0)
                            $('.ui-draggable-dragging').draggable().trigger('mouseup');
                        $(".uiDragHover").removeClass('uiDragHover');
                        var is_chrome = navigator.userAgent.indexOf('Chrome') > -1;
                        if(is_chrome)
                            dragUIInformationPopup.slideUp('fast');
                    }catch(ex){}
                }

                function bindDragDropFiles(){
                    var localdelay = (function () {
                        var timer = 0;
                        return function (callback, ms) {
                            clearTimeout(timer);
                            timer = setTimeout(callback, ms);
                        };
                    })();
                    localdelay(function () {
                        bindDragDropFilesProxy();
                    }, 300);
                }

                function bindDragDropFilesProxy()
                {
                    if (window.disableUIItemDragDrop) {
                        var filesListing = $("#filesListing");
                        if (currentView() == "Thumbnail") {
                            filesListing.find("[draggable]").removeAttr("draggable");
                        }
                        else{
                            filesListing.find("td.columnName[draggable]").removeAttr("draggable");
                        }
                        return false;
                    }

                    if(window.isCrush7Ready())
                    {
                        window.isUIDNDReady = true;
                        var is_MacOs = navigator.userAgent.indexOf('Mac') > -1;
                        var is_chrome = navigator.userAgent.indexOf('Chrome') > -1;
                        var dragUIInformationPopup = $("#dragUIInformationPopup");
                        var filesBasket = $("#filesBasket");
                        var droppableItems;
                        var filesListing = $("#filesListing");
                        if(currentView() == "Thumbnail") {
                            var draggableItems = filesListing.find("[draggable]");
                            draggableItems = draggableItems.filter(":not(.dndApplied)");
                            draggableItems.addClass('dndApplied');
                            try{
                                draggableItems.crushDraggables("destroy");
                            }catch(ex){}
                            draggableItems.crushDraggables({
                                revert: true,
                                delay : 700,
                                distance : 100,
                                crushdrag : function(event) {
                                    $(".dragdropItems").hide();
                                },
                                start : function(e, ui){
                                    window.dragCancelled = false;
                                    $(document).bind("keyup.crushDraggables", function(e) {
                                        if (e.keyCode == 27) {
                                            window.dragCancelled = true;
                                            $(document).trigger('mouseup');
                                        }
                                    });
                                },
                                stop: function(event, ui) {
                                    window.dragCancelled = false;
                                    clearUIDNDData();
                                    if(is_chrome)
                                        dragUIInformationPopup.slideUp('fast');
                                },
                                helper: function(e){
                                    window.disableVtip = true;
                                    if(is_chrome)
                                        dragUIInformationPopup.slideDown('fast');
                                    var elem = $(e.currentTarget);
                                    var selected = filesListing.find("li.fileBoxSelected:visible");
                                    var arrPath = [];
                                    arrPath.push(unescape(elem.attr("root_dir")));

                                    var arrFileNames = [];
                                    arrFileNames.push(elem.find("div.imgTitle").find("a").text());
                                    var arr = [];
                                    arr.push(unescape(elem.find("a:first").attr("rel")));
                                    selected.each(function(index, el) {
                                        var path = unescape($(this).find("a:first").attr("rel"));
                                        if(!arr.has(path))
                                            arr.push(path);

                                        var name = unescape($(this).find("div.imgTitle").find("a").text());
                                        if(!arrFileNames.has(name))
                                        {
                                            arrFileNames.push(name);
                                            var rootpath = unescape($(this).attr("root_dir"));
                                            arrPath.push(rootpath);
                                        }

                                    });
                                    var text = "Moving "+arr.length+" Items";
                                    if(arr.length==1)
                                        text = "Moving 1 Item";
                                    var list = $("<ul class='dragdropItems fileListing ui-corner-all ui-state-highlight'><li class='ui-priority-primary'>"+crushFTPTools.textEncode(text)+" <span class='targetPath'></span></li></ul>");
                                    if(arr.length>10)
                                    {
                                        for (var i = 0; i < 10; i++) {
                                            list.append("<li>"+crushFTPTools.textEncode(arr[i])+"</li>");
                                        };
                                        var count = arr.length - 10;
                                        list.append("<li class='ui-priority-primary'>And "+ count + " more...</li>");
                                    }
                                    else
                                    {
                                        for (var i = 0; i < arr.length; i++) {
                                            list.append("<li>"+crushFTPTools.textEncode(arr[i])+"</li>");
                                        };
                                    }
                                    filesListing.data("dragging", {
                                        items : arr,
                                        names : arrFileNames,
                                        paths : arrPath
                                    });
                                    return list;
                                },
                                appendTo:"body",
                                cursorAt : {left:-15, top : -15},
                                addClasses : false,
                                distance: 30
                            });
                            filesListing.find("[draggable]").dragout()
                            droppableItems = $(".fileThumb, .directoryThumb", filesListing.parent().parent());
                            try{
                                droppableItems.droppable("destroy");
                            }catch(ex){}
                            droppableItems.droppable({
                              accept: ".fileThumb, .directoryThumb, td",
                              addClasses: true,
                              greedy: true,
                              tolerance: "pointer",
                              hoverClass : "uiDragHover"
                            });

                            function dropHandleThumbs(event){
                                var dragdropItems = $(".dragdropItems");
                                var srcPanel, isBasket;
                                if(!dragdropItems.hasClass('fileListing'))
                                {
                                    srcPanel = filesBasket;
                                    isBasket = true;
                                }
                                else
                                    srcPanel = filesListing;
                                if(window.dragCancelled)
                                {
                                    filesListing.removeData("dragging");
                                    return false;
                                }
                                setTimeout(function(){
                                    clearUIDNDData();
                                }, 10);
                                window.dragCancelled = true;
                                try{
                                    var draggingInfo = srcPanel.data("dragging");
                                    if(!draggingInfo)
                                        return false;
                                    clearUIDNDData(srcPanel);
                                    var items = draggingInfo.items;
                                    var paths = draggingInfo.paths;
                                    var etTarget = $(event.target);
                                    var target;
                                    if(etTarget.closest(".directoryThumb").length>0 || etTarget.is(".directoryThumb"))
                                    {
                                        if(!etTarget.is(".directoryThumb"))
                                            target = unescape(etTarget.closest(".directoryThumb").find("a:first").attr("rel"));
                                        else
                                            target = unescape(etTarget.find("a:first").attr("rel"));
                                    }
                                    else if(etTarget.closest(".fileThumb").length>0 || etTarget.is(".fileThumb"))
                                    {
                                        if(!etTarget.is(".fileThumb"))
                                            target = unescape(etTarget.closest(".fileThumb").attr("rel"));
                                        else
                                            target = unescape(etTarget.attr("rel"));
                                    }
                                    else if(etTarget.closest('#filesListing').length>0)
                                    {
                                        target = unescape(hashListener.getHash().toString().replace("#", ""));
                                        target = target || "/";
                                    }
                                    else
                                    {
                                        return false;
                                    }
                                    if(items)
                                    {
                                        if(paths.has(target))
                                        {
                                            growl("Error :", "Cant move item(s) to same folder.", true, 3500);
                                            return false;
                                        }
                                        else
                                        {
                                            dragAndMove(target, draggingInfo, function(info){
                                                $(".refreshButton").click();
                                                if(isBasket)
                                                {
                                                    updateItmsInBasket(info, target);
                                                }
                                            });
                                        }
                                    }
                                }catch(e){
                                    throw e;
                                }
                            }
                            setTimeout(function(){
                                filesListing.unbind("mouseup.proxyDND").bind("mouseup.proxyDND", function(event) {
                                    dropHandleThumbs(event);
                                });
                            }, 100);
                        }
                        else
                        {
                            var draggableItems = filesListing.find("td.columnName[draggable]");
                            draggableItems = draggableItems.filter(":not(.dndApplied)");
                            draggableItems.addClass('dndApplied');
                            try{
                                draggableItems.crushDraggables("destroy");
                            }catch(ex){}
                            draggableItems.unbind("click.crd").bind("click.crd",function (evt) {
                                clearUIDNDData();
                            });
                            draggableItems.crushDraggables({
                                containment: filesListing,
                                revert: true,
                                scroll : true,
                                crushdrag : function(event) {
                                    $(".dragdropItems").hide();
                                },
                                start : function(e, ui){
                                    window.dragCancelled = false;
                                    $(document).bind("keyup.crushDraggables", function(e) {
                                        if (e.keyCode == 27) {
                                            window.dragCancelled = true;
                                            $(document).trigger('mouseup');
                                        }
                                    });
                                },
                                stop: function(event, ui) {
                                    window.dragCancelled = false;
                                    clearUIDNDData();
                                    if(is_chrome)
                                        dragUIInformationPopup.slideUp('fast');
                                    $(event.toElement).one('click', function(e){ e.stopImmediatePropagation(); } );
                                },
                                helper: function(e){
                                    if(is_chrome)
                                        dragUIInformationPopup.slideDown('fast');
                                    var elem = $(e.currentTarget).closest("tr");
                                    var selected = filesListing.find("input.chkBox:visible:checked").closest("tr");
                                    var arrFileNames = [];
                                    arrFileNames.push(elem.find("a:first").text());

                                    var arrPath = [];
                                    arrPath.push(unescape(elem.attr("rootdir")));

                                    var arr = [];
                                    arr.push(unescape(elem.find("a:first").attr("rel")));
                                    selected.each(function(index, el) {
                                        var path = unescape($(this).find("a:first").attr("rel"));
                                        if(!arr.has(path))
                                            arr.push(path);

                                        var name = unescape($(this).find("a:first").text());
                                        if(!arrFileNames.has(name))
                                        {
                                            arrFileNames.push(name);
                                            var rootpath = unescape($(this).attr("rootdir"));
                                            arrPath.push(rootpath);
                                        }
                                    });
                                    var text = "Moving "+arr.length+" Items";
                                    if(arr.length==1)
                                        text = "Moving 1 Item";
                                    var list = $("<ul class='dragdropItems fileListing ui-corner-all ui-state-highlight'><li class='ui-priority-primary'>"+crushFTPTools.textEncode(text)+" <span class='targetPath'></span></li></ul>");
                                    if(arr.length>10)
                                    {
                                        for (var i = 0; i < 10; i++) {
                                            list.append("<li>"+crushFTPTools.textEncode(arr[i])+"</li>");
                                        };
                                        var count = arr.length - 10;
                                        list.append("<li class='ui-priority-primary'>And "+ count + " more...</li>");
                                    }
                                    else
                                    {
                                        for (var i = 0; i < arr.length; i++) {
                                            list.append("<li>"+crushFTPTools.textEncode(arr[i])+"</li>");
                                        };
                                    }
                                    filesListing.data("dragging", {
                                        items : arr,
                                        names : arrFileNames,
                                        paths : arrPath
                                    });
                                    return list;
                                },
                                appendTo:"body",
                                cursorAt : {left:-15, top : -15},
                                addClasses : false,
                                distance: 30
                            });

                            filesListing.find("[draggable]").dragout();
                            droppableItems = $(".dirItemTR, .fileItemTR, #filesContainer", filesListing.parent().parent());
                            droppableItems = droppableItems.filter(":not(.dndApplied)");
                            droppableItems.addClass('dndApplied');
                            try{
                                droppableItems.droppable("destroy");
                            }catch(ex){}
                            droppableItems.droppable({
                              accept: ".fileThumb, .directoryThumb, td.columnName",
                              addClasses: true,
                              greedy: true,
                              tolerance: "touch",
                              hoverClass : "uiDragHover"
                            });

                            function dropHandle(event){
                                var dragdropItems = $(".dragdropItems");
                                var srcPanel, isBasket;
                                if(!dragdropItems.hasClass('fileListing'))
                                {
                                    srcPanel = filesBasket;
                                    isBasket = true;
                                }
                                else
                                    srcPanel = filesListing;
                                if(window.dragCancelled)
                                {
                                    filesListing.removeData("dragging");
                                    return false;
                                }
                                setTimeout(function(){
                                    clearUIDNDData();
                                }, 10);
                                window.dragCancelled = true;
                                try{
                                    var draggingInfo = srcPanel.data("dragging");
                                    if(!draggingInfo)
                                        return false;
                                    clearUIDNDData(srcPanel);
                                    var items = draggingInfo.items;
                                    var paths = draggingInfo.paths;
                                    var etTarget = $(event.target);
                                    var target;
                                    if(etTarget.closest("tr.dirItemTR").length>0 || etTarget.is("tr.dirItemTR"))
                                    {
                                        if(!etTarget.is("tr.dirItemTR"))
                                            target = unescape(etTarget.closest("tr.dirItemTR").find("a:first").attr("rel"));
                                        else
                                            target = unescape(etTarget.find("a:first").attr("rel"));
                                    }
                                    else if(etTarget.closest("tr.fileItemTR").length>0 || etTarget.is("tr.fileItemTR"))
                                    {
                                        if(!etTarget.is("tr.fileItemTR"))
                                            target = unescape(etTarget.closest("tr.fileItemTR").attr("rel"));
                                        else
                                            target = unescape(etTarget.attr("rel"));
                                    }
                                    else if(etTarget.closest('#filesListing').length>0)
                                    {
                                        target = unescape(hashListener.getHash().toString().replace("#", ""));
                                        target = target || "/";
                                    }
                                    else
                                    {
                                        return false;
                                    }
                                    if(items)
                                    {
                                        if(paths.has(target))
                                        {
                                            growl("Error :", "Cant move item(s) to same folder.", true, 3500);
                                            return false;
                                        }
                                        else
                                        {
                                            dragAndMove(target, draggingInfo, function(info){
                                                var paths = draggingInfo.paths || [];
                                                paths.push(target);
                                                paths = paths.filter(function(elem, pos, self) {
                                                    return self.indexOf(elem) == pos;
                                                });
                                                var destinationPath = crushFTPTools.encodeURILocal(unescape(hashListener.getHash().toString().replace("#", "")));
                                                if(paths && paths.length>0 && destinationPath.length>0)
                                                    refreshTreePaths(paths);
                                                else
                                                    $(".refreshButton").click();
                                                if(isBasket)
                                                {
                                                    updateItmsInBasket(info, target);
                                                }
                                            });
                                        }
                                    }
                                }catch(e){
                                    throw e;
                                }
                            }
                            setTimeout(function(){
                                filesListing.unbind("mouseup.proxyDND").bind("mouseup.proxyDND", function(event) {
                                    dropHandle(event);
                                });
                                filesListing.find("th").unbind("mouseup.proxyDND").bind("mouseup.proxyDND", function(event) {
                                    clearUIDNDData();
                                });
                            }, 100);
                        }
                        try{
                            filesBasket.droppable("destroy");
                        }catch(ex){}
                        filesBasket.droppable({
                          accept: "#filesListing td,#filesListing .fileThumb, #filesListing .directoryThumb",
                          addClasses: false,
                          greedy: true,
                          tolerance: "pointer",
                          hoverClass : "uiDragHover",
                          drop : function(event, ui){
                            $(".dragdropItems").hide();
                            droppableItems.droppable("enable");
                            try{
                                window.disableVtip = false;
                                if($('.ui-draggable-dragging').length>0)
                                    $('.ui-draggable-dragging').draggable('option', 'revert', true).trigger('mouseup');
                                $(".uiDragHover").removeClass('uiDragHover');
                            }catch(e){}
                            addToBasket(ui.draggable, true);
                            selectDeselectAllItems(false);
                          },
                          over : function()
                          {
                            droppableItems.droppable("disable");
                          },
                          out : function()
                          {
                            droppableItems.droppable("enable");
                          }
                        });
                    }
                }

                function updateItmsInBasket(items, target){
                    if(items && items.length>0)
                    {
                        if(items[0]=="cut")
                            items.remove(0);
                        var itemsInTheBasket = $(document).data(o.BasketDataKey);
                        var filteredItems = [];
                        for (var i = 0; i < itemsInTheBasket.length; i++) {
                            var curItem = itemsInTheBasket[i];
                            if(items.has(curItem.file))
                            {
                                var file = curItem.file;
                                file = file.split("/");
                                if(file.length>0)
                                {
                                    var name = file[file.length-1];
                                    if(name=="")
                                        name = file[file.length-2] + "/";
                                    if(name)
                                    {
                                        name = target + name;
                                        curItem.file = name;
                                        curItem.path = target;
                                        filteredItems.push(curItem);
                                    }
                                }
                            }
                            else
                                filteredItems.push(curItem);
                        };
                        $(document).data(o.BasketDataKey, filteredItems);
                        rebuildBasket();
                    }
                }

                function bindDragDropFilesBasket()
                {
                    var filesBasket = $("#filesBasket");
                    try{
                        filesBasket.find("[draggable]").dragout();
                    }catch(ex){}

                    if(window.isCrush7Ready())
                    {
                        var is_MacOs = navigator.userAgent.indexOf('Mac') > -1;
                        var is_chrome = navigator.userAgent.indexOf('Chrome') > -1;
                        var dragUIInformationPopup = $("#dragUIInformationPopup");
                        var filesBasket = $("#filesBasket");
                        var droppableItems;
                        if(currentView(true) == "Thumbnail") {
                            var draggableItems = filesBasket.find("[draggable]");
                            draggableItems = draggableItems.filter(":not(.dndApplied)");
                            draggableItems.addClass('dndApplied');
                            try{
                                draggableItems.crushDraggables("destroy");
                            }catch(ex){}
                            draggableItems.crushDraggables({
                                revert: true,
                                delay : 300,
                                distance : 30,
                                crushdrag : function(event) {
                                    $(".dragdropItems").hide();
                                },
                                stop: function(event, ui) {
                                    filesBasket.removeData("dragging");
                                    $(".dragdropItems").hide();
                                    if(is_chrome)
                                        dragUIInformationPopup.slideUp('fast');
                                },
                                helper: function(e){
                                    window.disableVtip = true;
                                    if(is_chrome)
                                        dragUIInformationPopup.slideDown('fast');
                                    var elem = $(e.currentTarget);
                                    var selected = filesBasket.find("li.fileBoxSelected:visible");
                                    var arrPath = [];
                                    arrPath.push(unescape(elem.attr("rootdir")));

                                    var arrFileNames = [];
                                    arrFileNames.push(elem.find("div.imgTitle").find("a").text());
                                    var arr = [];
                                    arr.push(unescape(elem.find("a:first").attr("rel")));
                                    selected.each(function(index, el) {
                                        var path = unescape($(this).find("a:first").attr("rel"));
                                        if(!arr.has(path))
                                            arr.push(path);

                                        var name = unescape($(this).find("div.imgTitle").find("a").text());
                                        if(!arrFileNames.has(name))
                                        {
                                            arrFileNames.push(name);
                                            var rootpath = unescape($(this).attr("rootdir"));
                                            arrPath.push(rootpath);
                                        }

                                    });
                                    var text = "Moving "+arr.length+" Items";
                                    if(arr.length==1)
                                        text = "Moving 1 Item";
                                    var list = $("<ul class='dragdropItems ui-corner-all ui-state-highlight'><li class='ui-priority-primary'>"+text+" <span class='targetPath'></span></li></ul>");
                                    if(arr.length>10)
                                    {
                                        for (var i = 0; i < 10; i++) {
                                            list.append("<li>"+crushFTPTools.textEncode(arr[i])+"</li>");
                                        };
                                        var count = arr.length - 10;
                                        list.append("<li class='ui-priority-primary'>And "+ count + " more...</li>");
                                    }
                                    else
                                    {
                                        for (var i = 0; i < arr.length; i++) {
                                            list.append("<li>"+crushFTPTools.textEncode(arr[i])+"</li>");
                                        };
                                    }
                                    filesBasket.data("dragging", {
                                        items : arr,
                                        names : arrFileNames,
                                        paths : arrPath
                                    });
                                    return list;
                                },
                                appendTo:"body",
                                cursorAt : {left:-15, top : -15},
                                addClasses : false
                            });
                            filesBasket.find("[draggable]").dragout();
                        }
                        else
                        {
                            var draggableItems = filesBasket.find("[draggable]>td");
                            draggableItems = draggableItems.filter(":not(.dndApplied)");
                            draggableItems.addClass('dndApplied');
                            try{
                                draggableItems.crushDraggables("destroy");
                            }catch(ex){}
                            draggableItems.crushDraggables({
                                containment: 'document',
                                revert: true,
                                distance : 30,
                                delay : 300,
                                crushdrag : function(event) {
                                    $(".dragdropItems").hide();
                                },
                                stop: function(event, ui) {
                                    filesBasket.removeData("dragging");
                                    $(".dragdropItems").hide();
                                    if(is_chrome)
                                        dragUIInformationPopup.slideUp('fast');
                                },
                                helper: function(e){
                                    if(is_chrome)
                                        dragUIInformationPopup.slideDown('fast');
                                    var elem = $(e.currentTarget).closest("tr");
                                    var selected = filesBasket.find("input.chkBox:visible:checked").closest("tr");
                                    var arrFileNames = [];
                                    arrFileNames.push(elem.find("a:first").text());

                                    var arrPath = [];
                                    arrPath.push(unescape(elem.attr("rootdir")));

                                    var arr = [];
                                    arr.push(unescape(elem.find("a:first").attr("rel")));
                                    selected.each(function(index, el) {
                                        var path = unescape($(this).find("a:first").attr("rel"));
                                        if(!arr.has(path))
                                            arr.push(path);

                                        var name = unescape($(this).find("a:first").text());
                                        if(!arrFileNames.has(name))
                                        {
                                            arrFileNames.push(name);
                                            var rootpath = unescape($(this).attr("rootdir"));
                                            arrPath.push(rootpath);
                                        }
                                    });
                                    var text = "Moving "+arr.length+" Items";
                                    if(arr.length==1)
                                        text = "Moving 1 Item";
                                    var list = $("<ul class='dragdropItems ui-corner-all ui-state-highlight'><li class='ui-priority-primary'>"+text+" <span class='targetPath'></span></li></ul>");
                                    if(arr.length>10)
                                    {
                                        for (var i = 0; i < 10; i++) {
                                            list.append("<li>"+crushFTPTools.textEncode(arr[i])+"</li>");
                                        };
                                        var count = arr.length - 10;
                                        list.append("<li class='ui-priority-primary'>And "+ count + " more...</li>");
                                    }
                                    else
                                    {
                                        for (var i = 0; i < arr.length; i++) {
                                            list.append("<li>"+crushFTPTools.textEncode(arr[i])+"</li>");
                                        };
                                    }
                                    filesBasket.data("dragging", {
                                        items : arr,
                                        names : arrFileNames,
                                        paths : arrPath
                                    });
                                    return list;
                                },
                                appendTo:"body",
                                cursorAt : {left:-15, top : -15},
                                addClasses : false
                            });
                            filesBasket.find("[draggable]").dragout();
                        }
                    }
                }

                //Method to load icon previews, based on size and generic icon
                function loadIconPreview(size, force, elem, basket, localize) {
                    var genericIconTree = $(document).data("genericIconTree");
                    var genericIconThumbnail = $(document).data("genericIconThumbnail");
                    var randomNo = Math.random();
                    var parentElem = basket ? $("#FileBasketList") : $("#filesListing");
                    if(window.maxImageSizeForThumbnail && size > window.maxImageSizeForThumbnail)
                        size = window.maxImageSizeForThumbnail || size;
                    if (currentView(basket) == "Thumbnail") {
                        var zoomValue = parseInt(window.zoomSlider.slider("value")); // Current zoom level
                        if(basket)
                        {
                            zoomValue = parseInt(window.zoomSliderBasket.slider("value")); // Current zoom level
                        }
                        size = size || 2; // default size is 2
                        var iconSize = 48;
                        if (zoomValue < 3) {
                            iconSize = 48; //Icon size 48 if zoom level is less than 3
                        } else if (zoomValue < 6) {
                            iconSize = 128; //Icon size 128 if zoom level is less than 6
                        } else if (zoomValue < 10) {
                            iconSize = 256; //Icon size 256 if zoom level is less than 10
                        } else {
                            iconSize = 512; //Icon size 512 if zoom level is higher than 10
                        }
                        var disableHover = false;
                        if ($(document).data("disableThumbnailHover") && $(document).data("disableThumbnailHover") == "true") disableHover = true;
                        if (!disableHover) {
                            disableHover = zoomValue >= 13; // hover info, tooltip should be disabled if zoom level is more than 12
                        }
                        if (disableHover) {
                            //If hover is disabled, it will loop through items and disable tooltip
                            $("li.directoryThumb", parentElem).each(function () {
                                var $curElem = $(this);
                                var item = $curElem.closest("li").addClass("vtipDisabled");
                            });
                        } else {
                            //If hover is enabled, it will loop through items and enable tooltip
                            $("li.directoryThumb", parentElem).each(function () {
                                var $curElem = $(this);
                                var item = $curElem.closest("li").removeClass("vtipDisabled");
                            });
                        }

                        if(localize)
                        {
                            if (elem) {
                                opt = $(elem).data("dataRow");
                                elem = elem.closest("li") || elem;
                                if (elem.hasClass("vtip")) {
                                    if(basket)
                                    {
                                        var tooltipText = "<strong>"+localizations.TooltipNameLabelText+" : </strong>"+crushFTPTools.htmlEncode(elem.find("div.imgTitle>a").text())+"<br /><strong>"+localizations.TooltipPathLabelText+" : </strong>"+crushFTPTools.htmlEncode(opt.path)+"<br /><strong>"+localizations.TooltipSizeLabelText+" : </strong>"+opt.size+ " <span class='syncSc'>("+opt.sizeB+" bytes)</span><br /><strong>"+localizations.TooltipModifiedLabelText+" : </strong>"+opt.date+"<br /><strong>"+localizations.TooltipKeywordsLabelText+" : </strong> "+crushFTPTools.htmlEncode(opt.keywords);
                                        elem.attr("title", tooltipText);
                                    }
                                    else
                                    {
                                        var tooltipText = "<strong>"+localizations.TooltipNameLabelText+" : </strong>"+crushFTPTools.htmlEncode(elem.find("div.imgTitle>a").text())+"<br /><strong>"+localizations.TooltipSizeLabelText+" : </strong>"+opt.size+ " <span class='syncSc'>("+opt.sizeB+" bytes)</span><br /><strong>"+localizations.TooltipModifiedLabelText+" : </strong>"+opt.date+"<br /><strong>"+localizations.TooltipKeywordsLabelText+" : </strong> "+crushFTPTools.htmlEncode(opt.keywords);
                                        elem.attr("title", tooltipText);
                                    }
                                    elem.removeData("thisInfo");
                                    vtip(elem);
                                }
                            }
                            return;
                        }

                        // Not required for directory icon
                        // if (elem && elem.hasClass("directoryThumb")) {
                        //     return;
                        // }
                        var opt = false;
                        if (force) {
                            // load icons forcefuly
                            if (elem) {
                                opt = $(elem).data("dataRow");
                                elem = elem.closest("li") || elem;
                                if (elem.hasClass("vtip")) {
                                    if(basket)
                                    {
                                        var tooltipText = "<strong>"+localizations.TooltipNameLabelText+" : </strong>"+crushFTPTools.htmlEncode(elem.find("div.imgTitle>a").text())+"<br /><strong>"+localizations.TooltipPathLabelText+" : </strong>"+crushFTPTools.htmlEncode(unescape(opt.path))+"<br /><strong>"+localizations.TooltipSizeLabelText+" : </strong>"+opt.size+ " <span class='syncSc'>("+opt.sizeB+" bytes)</span><br /><strong>"+localizations.TooltipModifiedLabelText+" : </strong>"+opt.date+"<br /><strong>"+localizations.TooltipKeywordsLabelText+" : </strong> "+(opt.keywords);
                                        elem.attr("title", tooltipText);
                                    }
                                    else
                                    {
                                        var tooltipText = "<strong>"+localizations.TooltipNameLabelText+" : </strong>"+crushFTPTools.htmlEncode(elem.find("div.imgTitle>a").text())+"<br /><strong>"+localizations.TooltipSizeLabelText+" : </strong>"+opt.size+ " <span class='syncSc'>("+opt.sizeB+" bytes)</span><br /><strong>"+localizations.TooltipModifiedLabelText+" : </strong>"+opt.date+"<br /><strong>"+localizations.TooltipKeywordsLabelText+" : </strong> "+crushFTPTools.xmlEncode(opt.keywords);
                                        elem.attr("title", tooltipText);
                                    }
                                }
                                elem = elem.find("a.imgLink").find("img");
                                elem.removeClass("loadedPreview").attr("src", o.spinerImage);
                            } else {
                                $("img.loadedPreview", parentElem).removeClass("loadedPreview").attr("src", o.spinerImage);
                            }
                        }
                        elem = elem || $("img[src$='" + o.spinerImage + "']", parentElem);
                        var isFF = navigator.userAgent.toLowerCase().indexOf('firefox') > -1;
                        // Loop through items and load preview icons, if icon not available generic icon will be shown
                        elem.each(function () {
                            var $curElem = $(this);
                            // if($curElem.closest("li").hasClass("directoryThumb")) {
                            //     return;
                            // }
                            if (disableHover) {
                                var item = $curElem.closest("li").addClass("vtipDisabled");
                            } else {
                                var item = $curElem.closest("li").removeClass("vtipDisabled");
                            }
                            // binds images' load event
                            $curElem.unbind().bind("load", function (e) {
                                $(this).unbind();
                                var parentElem = $(this).closest("li") || parentElem;
                                var relLink = parentElem.find("a:first");
                                var $this = $(this);
                                $(this).removeAttr("width").removeAttr("height").css({
                                    width: "",
                                    height: ""
                                });
                                var pic_real_width = this.width;
                                var pic_real_height = this.height;
                                var imgRatio = pic_real_width / pic_real_height;
                                if(isFF)
                                    $this.closest("div").css("overflow", "auto");
                                var divRatio = $this.closest("div").width() / $this.closest("div").height();
                                // Calculate image's real width and height and fix it to fit to the image holder DIV
                                if (pic_real_width < $this.closest("div").width() && pic_real_height < $this.closest("div").height()) {
                                    $this.css("height", "auto");
                                    $this.css("width", "auto");
                                }
                                else if (imgRatio > divRatio) {
                                    $this.css("height", "auto");
                                    $this.css("width", $this.closest("div").width());
                                } else {
                                    $this.css("width", "auto");
                                    $this.css("height", $this.closest("div").height());
                                }
                                if(isFF)
                                    $this.closest("div").css("overflow", "hidden");
                            }).error(function(){
                                if ($.browser.msie)
                                {
                                    if($(this).attr("ie_hasPreview"))
                                        return;
                                }
                                var fileName = $(this).closest("li").find(".imgTitle").text();
                                var ext = getFileExtension(fileName);
                                if (o.availableFileExtensionImages.has(ext)) {
                                    $(this).attr("src", o.FileExtensionImageFilePath + ext + "_"+iconSize+".png");
                                } else {
                                    $(this).attr("src", o.fileLarge + "_"+iconSize+".png").attr("style", o.PreviewIconThumbnailStyle);
                                }
                            });
                            var genericIcon = true;
                            var itemListed = $curElem.closest("li");
                            opt = itemListed.data("dataRow");
                            if (opt && opt.preview && opt.preview.toString() != "0") {
                                //if current item has preview, show preview image as an icon. Generic icon otherwise
                                if (!genericIconThumbnail) {
                                    if(itemListed.is(".directoryThumb"))
                                        itemListed.addClass("hasPreview");
                                    $curElem.attr("src", o.ajaxCallURL + "?command=getPreview&size=" + size + "&path=" + crushFTPTools.encodeURILocal(unescape($curElem.parent().attr("rel"))) + "&frame=1"+"&c2f="+crushFTPTools.getCrushAuth()).attr("style", o.PreviewIconThumbnailStyle);
                                    if ($.browser.msie)
                                    {
                                        $curElem.attr("ie_hasPreview", "true");
                                    }
                                    genericIcon = false;
                                }
                                var parentElem = itemListed || $curElem;
                                var relLink = parentElem.find("a:first");
                                var title = $(parentElem).attr("title") || $(parentElem).attr("original-title");
                                if (title && title.indexOf("getPreview") < 0) {
                                    $(parentElem).attr("title", "<img src=\"" + o.ajaxCallURL + "?command=getPreview&size=3&path=" + crushFTPTools.encodeURILocal(unescape(relLink.attr("rel")))+"&c2f="+crushFTPTools.getCrushAuth() +"&frame=1" + "\" border=\"0\" /> <br />" + $(parentElem).attr("title"));
                                }

                                if(parseInt(opt.preview)>1 && window.animateVideoPlaybackInPreview)
                                {
                                    $curElem.data("frames", parseInt(opt.preview));
                                    roatateImagePreview($curElem);
                                }
                            }
                            // If generic icon to be shown, set it based on current file's extension. Which will be replaced with common file icon if current icon set does not have an icon for this extension.
                            if (genericIcon) {
                                var fileName = $(this).closest("li").find(".imgTitle").text();
                                var ext = getFileExtension(fileName);
                                if (o.availableFileExtensionImages.has(ext)) {
                                    $(this).attr("src", o.FileExtensionImageFilePath + ext + "_" + iconSize + ".png");
                                } else {
                                    $(this).attr("src", o.fileLarge + "_" + iconSize + ".png").attr("style", o.PreviewIconThumbnailStyle);
                                }
                            }
                            var src = $(this).attr("src");
                            $(this).attr("src", "");
                            $(this).attr("src", src).addClass("loadedPreview");
                        });
                        //Resetting iconSize as this will be used when preview images load
                        if (zoomValue < 3) {
                            $("li.directoryThumb", parentElem).not(".hasPreview").find("a.imgLink").find("img").attr("src", o.fileFolder);
                            iconSize = 48;
                        } else if (zoomValue < 6) {
                            $("li.directoryThumb", parentElem).not(".hasPreview").find("a.imgLink").find("img").attr("src", o.fileFolder1);
                            iconSize = 128;
                        } else if (zoomValue < 10) {
                            $("li.directoryThumb", parentElem).not(".hasPreview").find("a.imgLink").find("img").attr("src", o.fileFolder2);
                            iconSize = 256;
                        } else {
                            $("li.directoryThumb", parentElem).not(".hasPreview").find("a.imgLink").find("img").attr("src", o.fileFolder3);
                            iconSize = 512;
                        }
                    } else {
                        //for treeview
                        size = 1; // default size for preview icon is 1 for treeview
                        elem = elem || $("td.columnName", parentElem);
                        var disableHover = false;
                        if ($(document).data("disableTreeviewHover") && $(document).data("disableTreeviewHover") == "true") disableHover = true;
                        // loop through images and load relevant preview or generic icon
                        elem.each(function () {
                            var $curElem = $(this);
                            var newImg = $("<img />");
                            if ($curElem && $curElem.hasClass("directory") && (!$curElem.attr("preview") || $curElem.attr("preview") == "0")) {
                                return;
                            }
                            if($curElem && $curElem.hasClass("directory")){
                                $curElem.find("a").css("background","url("+o.ajaxCallURL + "?command=getPreview&size=" + size + "&path=" + crushFTPTools.encodeURILocal(unescape($curElem.find("a").attr("rel"))) + "&frame=1"+"&c2f="+crushFTPTools.getCrushAuth()+") left center no-repeat").css("background-size", "18px");
                                return;
                            }
                            $curElem.find(".previewIcon, .previewIconTN").remove();
                            $curElem.prepend("<span class=\"previewIcon\"></span>");
                            $curElem.find(".previewIcon").append(newImg);
                            // If item has preview and no generic icon to show
                            if ($curElem.attr("preview") != "0" && !genericIconTree) {
                                $curElem.find(".previewIcon").remove();
                                $curElem.prepend("<span class=\"previewIconTN\"></span>");
                                $curElem.find(".previewIconTN").append(newImg);
                                newImg = $curElem.find("img");
                                newImg.attr("src", o.ajaxCallURL + "?command=getPreview&size=" + size + "&path=" + crushFTPTools.encodeURILocal(unescape($curElem.find("a").attr("rel"))) + "&frame=1"+"&c2f="+crushFTPTools.getCrushAuth());
                                var relLink = $curElem.find("a").addClass("iconPreviewLink");
                                $curElem.removeClass("fileItem");
                                if (!disableHover) {
                                    $curElem = $curElem.find("a").addClass("vtip");
                                    $curElem.attr("title", "<img src=\"" + o.ajaxCallURL + "?command=getPreview&size=3&path=" + crushFTPTools.encodeURILocal(unescape(relLink.attr("rel"))) + "&frame=1"+"&c2f="+crushFTPTools.getCrushAuth() + "\" border=\"0\" />");
                                    vtip($curElem);
                                }
                            } else {
                                //If generic icon to show
                                newImg = $curElem.find("img");
                                var fileName = $curElem.find("a:first").text();
                                var ext = getFileExtension(fileName);
                                if (o.availableFileExtensionImages.has(ext)) {
                                    newImg.attr("src", o.FileExtensionImageFilePath + ext + "_16.png");
                                } else {
                                    newImg.attr("src", o.fileLarge + "_16.png").attr("style", o.PreviewIconThumbnailStyle);
                                }
                                if ($curElem.attr("preview") != "0") {
                                    var relLink = $curElem.find("a").addClass("iconPreviewLink");
                                    $curElem.removeClass("fileItem");
                                    if (!disableHover) {
                                        $curElem = $curElem.find("a").addClass("vtip");
                                        $curElem.attr("title", "<img src=\"" + o.ajaxCallURL + "?command=getPreview&size=3&path=" + crushFTPTools.encodeURILocal(unescape(relLink.attr("rel"))) +"&frame=1"+"&c2f="+crushFTPTools.getCrushAuth() + "\" border=\"0\" />");
                                        vtip($curElem);
                                    }
                                }
                            }
                        });
                    }
                }

                // Bind view changer links events.
                function bindEventsToViewChanger() {
                    $(".thumbnailViewLink,.treeViewLink").unbind("click").click(
                    function (evt) {
                        var isBasket = $(this).parent().attr("id") == "viewSelectorPanelBasket";
                        if ($(this).attr("rel") != currentView(isBasket)) {
                            $(this).parent().find("a").animate({
                                opacity: 1
                            }, 0);
                            $(this).animate({
                                opacity: 0.3
                            }, 500);
                            changeView($(this).attr("rel"), true, isBasket);
                        }
                        $(this).blur();
                        evt.preventDefault();
                        return false;
                    });
                    if (!$("#slider").attr("added")) {
                        window.zoomSlider = $("#slider").slider({
                            min: 0,
                            max: 30,
                            change: function (event, ui) {
                                zoomInOutView(ui.value);
                            }
                        });
                        if(typeof window.defaultThumbnailSize != "undefined")
                        {
                            window.zoomSlider.slider("value", window.defaultThumbnailSize);
                        }
                    }
                    if (!$("#sliderBasket").attr("added")) {
                        window.zoomSliderBasket = $("#sliderBasket").slider({
                            min: 0,
                            max: 30,
                            change: function (event, ui) {
                                zoomInOutView(ui.value, false, true);
                            }
                        });
                    }
                }
                bindEventsToViewChanger();
                //Method which sets elements sizes based on zoom level
                window.zoomInOutView = function (val, elem, basket) {
                    elem = elem || false;
                    if (val > 0) {
                        if(basket)
                        {
                            $.cssRule({
                                ".fileBoxBasket": [
                                    ["width", o.lowestThumbnailBoxWidth + (val * 30) + "px"],
                                    ["height", o.lowestThumbnailBoxHeight + (val * 20) + "px"]
                                    ]
                            });
                            $.cssRule({
                                ".fileBoxBasket .imgBox": [
                                    ["height", o.lowestThumbnailBoxHeight + (val * 20) - 50 + "px"]
                                    ]
                            });
                            $.cssRule({
                                ".fileBoxBasket .imgWrapper": [
                                    ["height", o.lowestThumbnailBoxHeight + (val * 20) - 52 + "px"]
                                    ]
                            });
                        }
                        else
                        {
                            $.cssRule({
                                ".fileBox": [
                                    ["width", o.lowestThumbnailBoxWidth + (val * 30) + "px"],
                                    ["height", o.lowestThumbnailBoxHeight + (val * 20) + "px"]
                                    ]
                            });
                            $.cssRule({
                                ".fileBox .imgBox": [
                                    ["height", o.lowestThumbnailBoxHeight + (val * 20) - 50 + "px"]
                                    ]
                            });
                            $.cssRule({
                                ".fileBox .imgWrapper": [
                                    ["height", o.lowestThumbnailBoxHeight + (val * 20) - 52 + "px"]
                                    ]
                            });
                        }
                        if (val >= 5) {
                            loadIconPreview(3, true, elem, basket);
                        } else {
                            loadIconPreview(2, true, elem, basket);
                        }
                    } else {
                        if(basket)
                        {
                            $.cssRule({
                                ".fileBoxBasket": [
                                    ["width", o.lowestThumbnailBoxWidth + "px"],
                                    ["height", o.lowestThumbnailBoxHeight + "px"]
                                    ]
                            });
                            $.cssRule({
                                ".fileBoxBasket .imgBox": [
                                    ["height", o.lowestThumbnailBoxHeight - 50 + "px"]
                                    ]
                            });
                            $.cssRule({
                                ".fileBoxBasket .imgWrapper": [
                                    ["height", o.lowestThumbnailBoxHeight - 52 + "px"]
                                    ]
                            });

                        }
                        else
                        {
                            $.cssRule({
                                ".fileBox": [
                                    ["width", o.lowestThumbnailBoxWidth + "px"],
                                    ["height", o.lowestThumbnailBoxHeight + "px"]
                                    ]
                            });
                            $.cssRule({
                                ".fileBox .imgBox": [
                                    ["height", o.lowestThumbnailBoxHeight - 50 + "px"]
                                    ]
                            });
                            $.cssRule({
                                ".fileBox .imgWrapper": [
                                    ["height", o.lowestThumbnailBoxHeight - 52 + "px"]
                                    ]
                            });
                        }
                        loadIconPreview(2, true, elem, basket);
                    }
                    if ($.browser.msie && parseInt(jQuery.browser.version) == 8) {
                        var charlimit = o.thumbnailTextCharsLimit + (val * 4);
                        setTitleText(false, charlimit);
                    }
                }
                // Events to bind on items to navigate folders

                function bindGoToFolderEvents(t, o) {
                    var filesListing = $("#filesListing");
                    if (currentView() == "Thumbnail") {
                        $(t).find('a', 'LI.fileBox').unbind("click").click(function (evt) {
                            setTimeout(function(){
                                clearUIDNDData();
                                $(document).mouseup();
                            }, 10);
                            var curitem = $(this).closest("li.fileBox");
                            curitem.attr("shift", evt.shiftKey); // If shift is pressed it will allow multiple item selection in thumbs view
                            curitem.trigger("click");
                            $(this).blur();
                            return false;
                        });
                        $(t).find('LI.fileBox').unbind("click").click(function (evt) {
                            setTimeout(function(){
                                clearUIDNDData();
                                $(document).mouseup();
                            }, 100);
                            $(this).trigger('mouseup.contextMenu');
                            if(window.thumbsViewSingleClick)
                            {
                                $(this).trigger('dblclick');
                                return false;
                            }
                            window.listingInfo.selectedEverything = false;
                            $("#selectionOfItemsOptions").hide();
                            var curitem = $(this);
                            var shift = evt.shiftKey || curitem.attr("shift") == "true"; // If shift is pressed it will allow multiple item selection in thumbs view
                            curitem.removeAttr("shift");
                            if (shift) {
                                if (window.lastSelectedItem) // Last selected item, if shift is pressed
                                {
                                    var lastItem = window.lastSelectedItem;
                                    window.lastSelectedItem = false;
                                    if (lastItem != curitem) //If current and last items are not same
                                    {
                                        var lastItemIndex = parseInt($(lastItem).attr("index"));
                                        var curItemIndex = parseInt($(curitem).attr("index"));
                                        var isChecked = $($(t).find("li").get(lastItemIndex)).hasClass("fileBoxSelected");

                                        //loop through items between last selected and current, and apply selection class
                                        if (lastItemIndex > curItemIndex) {
                                            for (var i = curItemIndex; i <= lastItemIndex; i++) {
                                                if ($($(t).find("li").get(i)).is(":visible")) {
                                                    if(isChecked)
                                                        $($(t).find("li").get(i)).addClass("fileBoxSelected");
                                                    else
                                                        $($(t).find("li").get(i)).removeClass("fileBoxSelected");
                                                }
                                            }
                                        }
                                        //reverse loop if below item selected first
                                        if (curItemIndex > lastItemIndex) {
                                            for (var i = lastItemIndex; i <= curItemIndex; i++) {
                                                if ($($(t).find("li").get(i)).is(":visible")) {
                                                    if(isChecked)
                                                        $($(t).find("li").get(i)).addClass("fileBoxSelected");
                                                    else
                                                        $($(t).find("li").get(i)).removeClass("fileBoxSelected");
                                                }
                                            }
                                        }
                                    }
                                }
                            } else {
                                //If only single item selection (without shift)
                                if (curitem.hasClass("fileBoxSelected")) // If already selected, unselect. Select otherwise
                                {
                                    curitem.removeClass("fileBoxSelected");
                                } else {
                                    curitem.addClass("fileBoxSelected");
                                }
                                window.lastSelectedItem = curitem;
                            }
                            // Remove selection range, it messes up UI as all the text came between selection highlights in native browser selection manner
                            if (window.getSelection) // Modern Browsers
                            {
                                var selection = window.getSelection();
                                if (selection.removeAllRanges) {
                                    selection.removeAllRanges();
                                }
                            }
                            if (document.getSelection) // IE
                            {
                                var selection = document.getSelection();
                                if (selection.removeAllRanges) {
                                    selection.removeAllRanges();
                                }
                            }
                            //Show selection info bar if items are hidden in paging.
                            if ($(t).find("li.fileBoxSelected").length == window.listingInfo.totalVisibleItems) {
                                showSelectionInfoBar();
                            }
                            fileselectionUpdated();
                            $(this).blur();
                            return false;
                        });
                        //Event of double click on thumb icon loads that folder, if file selected, downloads that file.

                        var hasTouch = false; // Check if application is loaded on touch supported device
                        var agent = navigator.userAgent.toLowerCase();
                        if (agent.indexOf('iphone') >= 0 || agent.indexOf('ipad') >= 0 || agent.indexOf('android') >= 0)
                        {
                            hasTouch = true;
                        }
                        function thumbFolderEvent(elem) {
                            $(".cluetip-default").remove();
                            clearUIDNDData();
                            if ($(elem).hasClass("directoryThumb")) { // If directory
                                window.current_page = o.pagingCurrentPage = 0;
                                $(document).removeData("searchData");
                                window.last_search_item = "";
                                $("#filter").val("").keyup().blur();
                                var loc = $(elem).find("a.imgLink").attr('rel').match(/.*\//);
                                if (loc) {
                                    try{
                                        window.disableVtip = false;
                                        if($('.ui-draggable-dragging').length>0)
                                            $('.ui-draggable-dragging').draggable('option', 'revert', true).trigger('mouseup');
                                        $(".uiDragHover").removeClass('uiDragHover');
                                    }catch(e){}
                                    blockFileListingUI(true);
                                    setHashLocation(loc); // Just sets a location, loading of that folder will be done by hash listener.
                                    $(".cluetip-default").remove();
                                    $('html,body').animate({
                                        scrollTop: $("#mainContent").offset().top
                                    }, 0, false);
                                }
                            } else { // If file
                                try{
                                    window.disableVtip = false;
                                    if($('.ui-draggable-dragging').length>0)
                                        $('.ui-draggable-dragging').draggable('option', 'revert', true).trigger('mouseup');
                                    $(".uiDragHover").removeClass('uiDragHover');
                                }catch(e){}
                                var fileName = $(elem).find("a:first").attr("rel");
                                var fileExt = getFileExtension(fileName);
                                if(fileExt) fileExt = fileExt.toLowerCase();

                                var extsToOpenPreview = $(document).data("OPEN_PREVIEW_EXTENSIONS"); // Extensions which should open preview window than download, ie. images and videos
                                var extsToOpenSlideshow = $(document).data("OPEN_SLIDESHOW_EXTENSIONS");

                                if(window.disableClickToDownload)
                                {
                                    return false;
                                }
                                else if (extsToOpenPreview && extsToOpenPreview.length > 0 && fileExt.length > 0 && extsToOpenPreview.has(fileExt)) {
                                    $(document).data("currentContext", {
                                        'elem' : $(elem)
                                    });
                                    if(window.useSlideshowInsteadOfPreview)
                                    {
                                        window.performAction("slideshow", true);
                                    }
                                    else
                                       quickView(true, true);
                                }
                                else if (extsToOpenSlideshow && extsToOpenSlideshow.length > 0 && fileExt.length > 0 && extsToOpenSlideshow.has(fileExt)) {
                                    $(document).data("currentContext", {
                                        'elem' : $(elem)
                                    });
                                    window.performAction("slideshow", true);
                                }
                                else
                                {
                                    var extsToOpen = $(document).data("OPEN_NEW_WINDOW_EXTENSIONS"); // Extensions which should open in a window than download, ie. images
                                    var iOS = navigator.userAgent.match(/(iPad|iPhone|iPod)/g) ? true : false;
                                    if ((extsToOpen && extsToOpen.length > 0 && fileExt.length > 0 && extsToOpen.has(fileExt)) || iOS) { // If file to be shown in window
                                        window.open(unescape(fileName));
                                    } else {
                                        //Downloads item/file
                                        downloadItems(false, $(elem));
                                    }
                                }
                            }
                            $(elem).blur();
                            return false;
                        }
                        if(!hasTouch)
                        {
                            $(t).find('LI.fileBox').unbind(o.thumbFolderEvent);
                            $(t).find('LI.fileBox').bind(o.thumbFolderEvent, function(){
                                thumbFolderEvent($(this));
                            });
                        }
                        else
                        {
                            $(t).find('LI.fileBox').doubletap(function(event, elem){
                                thumbFolderEvent(elem);
                            });
                        }
                    } else { //Treeview
                        $(t).find('TD A').unbind(o.folderEvent);
                        var treeItems = $(t).find('TD A').bind(o.folderEvent, function (evt) { // Binds click to each file name, click on folder shows content of folder, downloads if file
                            $("#cluetip").hide();
                            evt.stopPropagation();
                            evt.preventDefault();
                            clearUIDNDData();
                            $(this).trigger('mouseup.contextMenu');
                            if (evt.ctrlKey) // Ctrl + click opens context menu. A hack for laptop users. Stop event if ctrl+click.
                            {
                                evt.stopPropagation();
                                evt.preventDefault();
                                return false;
                            }

                            if ($(this).parent().hasClass("directory")) { // If directory
                                window.current_page = o.pagingCurrentPage = 0;
                                $(document).removeData("searchData");
                                window.last_search_item = "";
                                $("#filter").val("").keyup().blur();
                                var loc = $(this).prev().attr('rel') ? $(this).prev().attr('rel').match(/.*\//) : "";
                                if (loc) {
                                    try{
                                        window.disableVtip = false;
                                        if($('.ui-draggable-dragging').length>0)
                                            $('.ui-draggable-dragging').draggable('option', 'revert', true).trigger('mouseup');
                                        $(".uiDragHover").removeClass('uiDragHover');
                                    }catch(e){}
                                    setHashLocation(loc); // Just set hash in location bar, everything else done by hash listener
                                }
                            } else { // If file
                                try{
                                    window.disableVtip = false;
                                    if($('.ui-draggable-dragging').length>0)
                                        $('.ui-draggable-dragging').draggable('option', 'revert', true).trigger('mouseup');
                                    $(".uiDragHover").removeClass('uiDragHover');
                                }catch(e){}
                                var fileName = $(this).closest("td").find("a:first").attr("rel");
                                var fileExt = getFileExtension(fileName);
                                if(fileExt) fileExt = fileExt.toLowerCase();
                                var extsToOpenPreview = $(document).data("OPEN_PREVIEW_EXTENSIONS"); // Extensions which should open preview window than download, ie. images and videos
                                var extsToOpenSlideshow = $(document).data("OPEN_SLIDESHOW_EXTENSIONS");

                                if(window.disableClickToDownload)
                                {
                                    return false;
                                }
                                else if (extsToOpenPreview && extsToOpenPreview.length > 0 && fileExt.length > 0 && extsToOpenPreview.has(fileExt)) {
                                    $(document).data("currentContext", {
                                        'elem' : $(this).closest("td")
                                    });
                                    if(window.useSlideshowInsteadOfPreview)
                                    {
                                        window.performAction("slideshow", true);
                                    }
                                    else
                                       quickView(true, true);
                                }
                                else if (extsToOpenSlideshow && extsToOpenSlideshow.length > 0 && fileExt.length > 0 && extsToOpenSlideshow.has(fileExt)) {
                                    $(document).data("currentContext", {
                                        'elem' : $(this).closest("td")
                                    });
                                    window.performAction("slideshow", true);
                                }
                                else
                                {
                                    var extsToOpen = $(document).data("OPEN_NEW_WINDOW_EXTENSIONS"); // Extensions which should open in a window than download, ie. images
                                    var iOS = navigator.userAgent.match(/(iPad|iPhone|iPod)/g) ? true : false;
                                    if ((extsToOpen && extsToOpen.length > 0 && fileExt.length > 0 && extsToOpen.has(fileExt)) || iOS) { // If file to be shown in window
                                        window.open(unescape(fileName));
                                    } else {
                                        //Downloads item/file
                                        downloadItems(false, $(this).closest("td"));
                                    }
                                }
                            }
                            $(this).blur();
                            return false;
                        });
                        if(window.clickOnParentOfFileName){
                            treeItems.parent().unbind(o.folderEvent).bind(o.folderEvent, function(e){
                                e.stopPropagation();
                                if($(this).find("a").length===1)
                                    $(this).find("a").click();
                            });
                        }
                    }
                }

                // Checkbox events for treeview
                function bindCheckboxEvents() {
                    var lastChecked = false;
                    var $chkboxes = $("tr.jqueryFileTree", $("#filesListing")).not(".file").find(".chkBox").unbind("click").click(function(event) {
                        checkUnCheckDirectory($(this).parent(), $(this).is(":checked")); //Check or uncheck parent directory checkbox if all items beneath are selected/not selected
                        toggleMainCheckbox($(this).closest("table")); //Check or uncheck check all checkbox if all items are selected/not selected
                        window.listingInfo.selectedEverything = false;
                        $("#selectionOfItemsOptions").hide();
                        // Show selection info bar if there are items hidden in paging
                        if ($("#filesContainer").find(".chkBox:visible:checked").length == window.listingInfo.totalVisibleItems) {
                            showSelectionInfoBar();
                        }
                        if(!lastChecked) {
                            lastChecked = this;
                            return;
                        }
                        else if(event.shiftKey) {
                            var start = $chkboxes.index(this);
                            var end = $chkboxes.index(lastChecked);
                            $chkboxes.slice(Math.min(start,end), Math.max(start,end)+ 1).attr('checked', lastChecked.checked);
                            checkUnCheckDirectory($(this).parent(), $(this).is(":checked")); //Check or uncheck parent directory checkbox if all items beneath are selected/not selected
                            toggleMainCheckbox($(this).closest("table")); //Check or uncheck check all checkbox if all items are selected/not selected
                            window.listingInfo.selectedEverything = false;
                            $("#selectionOfItemsOptions").hide();
                            // Show selection info bar if there are items hidden in paging
                            if ($("#filesContainer").find(".chkBox:visible:checked").length == window.listingInfo.totalVisibleItems) {
                                showSelectionInfoBar();
                            }
                        }
                        lastChecked = this;
                        fileselectionUpdated();
                        event.stopPropagation();
                    });
                }

                // Checkbox events for treeview in Basket
                function bindBasketCheckboxEvents() {
                    var lastChecked = false;
                    var $chkboxes = $("tr.jqueryFileTree", $("#filesBasket")).not(".file").find(".chkBox").unbind("click").click(function(event) {
                        toggleMainCheckbox($(this).closest("table")); //Check or uncheck check all checkbox if all items are selected/not selected
                        if(!lastChecked) {
                            lastChecked = this;
                            return;
                        }
                        else if(event.shiftKey) {
                            var start = $chkboxes.index(this);
                            var end = $chkboxes.index(lastChecked);
                            $chkboxes.slice(Math.min(start,end), Math.max(start,end)+ 1).attr('checked', lastChecked.checked);
                            toggleMainCheckbox($(this).closest("table")); //Check or uncheck check all checkbox if all items are selected/not selected
                        }
                        fileselectionUpdated(true);
                        lastChecked = this;
                        event.stopPropagation();
                    });
                }

                // Bind tree of items list
                function bindTree(t) {
                    showButtonsBasedOnPriviledge();
                    if (currentView() != "Thumbnail") {
                        // For tree view only
                        $(t).find('span.expandButton').unbind(o.folderEvent);
                        var ok = true;
                        try {
                            if (noMenus) ok = false;
                        } catch (e) {}
                        if (!ok) {
                            $(t).find('span.expandButton').hide();
                        }
                        if (ok) {
                            // Expand icon click
                            $(t).find('span.expandButton').unbind(o.folderEvent).bind(o.folderEvent, function (event, callback) {
                                if(event.altKey)
                                {
                                    var curPath = crushFTPTools.encodeURILocal(unescape(hashListener.getHash().toString().replace("#", "")));
                                    curPath = curPath || "/";
                                    expandAllItems(false, true, curPath, true);
                                    return false;
                                }
                                var isSearchResultPanel = $("#searchResultNotification");
                                var srchNotifVisible = isSearchResultPanel.attr("search");
                                event.stopPropagation();
                                event.preventDefault();
                                $(this).trigger('mouseup.contextMenu');
                                //remember checkbox selection added by carlos
                                $("tr.jqueryFileTree", $("#filesListing")).not(".file").find(".chkBox").each(function(){
                                    var filename = $(this).parent().parent().find('td.columnName').attr('name');
                                    if($(this).is(":checked")){
                                        if(jQuery.inArray(filename, window.checkBoxesSelected) == -1){
                                            window.checkBoxesSelected.push(filename);
                                        }
                                    } else {
                                        if(jQuery.inArray(filename, window.checkBoxesSelected) >= 0){
                                            window.checkBoxesSelected.splice( jQuery.inArray(filename, window.checkBoxesSelected), 1);
                                        }
                                    }
                                });
                                if ($(this).parent().hasClass('collapsed')) {
                                    // Expand
                                    $(this).parent().removeClass('collapsed').addClass('expanded').find(".expandButton").addClass('expanded');
                                    var toLocate = $(this).parent().find("span.expandButton").find("img").attr("src", o.expandedImageURL);
                                    var spanTop = $(document).scrollTop();
                                    $('body').addClass('stop-scrolling');
                                    window.curExpanding = escape($(this).attr('rel').match(/.*\//));
                                    //fix on pagination for the bug #4463 - added by carlos
                                    var expandedFolder = $(this).attr('rel');
                                    var expandedFolders = $(document).data("expandedFolders");
                                    if (!expandedFolders) {
                                        expandedFolders = [];
                                    }
                                    if (!expandedFolders.has(expandedFolder)) {
                                        expandedFolders.push(expandedFolder);
                                    }
                                    $(document).data("expandedFolders", expandedFolders);
                                    showTree($(this).parent(), escape($(this).attr('rel').match(/.*\//)), false, false, function(){
                                        if(callback)callback();
                                        $('body').removeClass('stop-scrolling');
                                        if ($('html,body').scrollTop() < spanTop) {
                                            $('html,body').animate({
                                                scrollTop: spanTop
                                            }, 0, false);
                                        }
                                        if(srchNotifVisible)
                                            isSearchResultPanel.show();
                                    });
                                } else {
                                    // Collapse
                                    var curScrollTop = $(document).scrollTop();
                                    $('body').addClass('stop-scrolling').css("min-height", $("body").height());
                                    removeDirectoryFromTree($(this).closest("table").find('TR[rel="' + $(this).attr('rel') + '"]'));
                                    var expandedFolder = $(this).attr('rel');
                                    var expandedFolders = $(document).data("expandedFolders");
                                    if (!expandedFolders) {
                                        expandedFolders = [];
                                    }
                                    if (expandedFolders.has(expandedFolder)) {
                                        expandedFolders.remove(expandedFolders.indexOf(expandedFolder));
                                    }
                                    var clearExpandedItems = [];
                                    for (var i = 0; i < expandedFolders.length; i++) {
                                        if(expandedFolders[i].indexOf(expandedFolder)!=0)
                                            clearExpandedItems.push(expandedFolders[i]);
                                    };
                                    expandedFolders = clearExpandedItems;
                                    $(document).data("expandedFolders", expandedFolders);
                                    reBuildListing(window.curTreeItems); // Rebuild items on screen
                                    if (window.filteredItems && window.last_search_item && window.last_search_item.length>0) {
                                        filterItem(window.last_search_item, true);
                                    }
                                    if(srchNotifVisible)
                                        isSearchResultPanel.show();
                                    //fix on pagination for the bug #4463 - added by carlos
                                    refreshPaginationView(false);
                                    $('html,body').animate({
                                        scrollTop: curScrollTop
                                    }, 0, false);
                                    $('body').css("min-height", "inherit");
                                }
                                // $(this).blur();
                                return false;
                            });
                        }
                        bindGoToFolderEvents(t, o);
                    }
                    // Prevent A from triggering the # on non-click events
                    if (o.folderEvent.toLowerCase != 'click') $(t).find('TD A').bind('click', function () {
                        return false;
                    });
                    $(".cluetip-default").remove(); /* Load icon previews for images if available */
                    if($("#hideCheckBoxColumn").is(":checked"))
                    {
                        if(window.hideCheckBoxColumn)
                            window.hideCheckBoxColumn("true");
                    }
                    bindDragDropFiles();
                    loadIconPreview(); /* Enable tooltips */
                    vtip();
                }

                // Remove directory and it's sub-elements, used when deleted
                function removeDirectoryFromTree(trElems) {
                    var rel = $(trElems.get(0)).attr("rel");
                    var newItems = [];
                    for (var i = 0; i < window.curTreeItems.length; i++) {
                        var curItem = window.curTreeItems[i];
                        if (escape(curItem.root_dir).indexOf(escape(unescape(rel))) != 0) {
                            newItems.push(curItem);
                        }
                    }
                    window.curTreeItems = newItems;
                }

                //Hide directory and subitems from the list
                function hideDirectoryFromTree(trElems, flag) {
                    $(trElems).each(function () {
                        $(this).find("td.directory").each(function () {
                            hideDirectoryFromTree($(this).closest("table").find('TR[rel="' + escape($(this).find('a').attr('rel')) + '"]'));
                        });
                        if (flag) {
                            $(this).hide();
                        } else {
                            $(this).show();
                        }
                    });
                }

                //Move elements on tree when sorting applied, recursive method
                function moveElementOnTreeAfterSorting(trElems) {
                    $(trElems).each(function () {
                        var parentTR = $(this);
                        $(this).closest("table").find("tr[rel='" + $(this).find("a").attr("rel") + "']").each(function () {
                            if ($(this).find("td.directory").length > 0) {
                                $(parentTR).closest("tr").after($(this));
                                moveElementOnTreeAfterSorting($(this).find("td.directory"));
                            } else {
                                $(parentTR).closest("tr").after($(this));
                            }
                        });
                    });
                }

                //Returns current paging size (Items to show on a page)
                function getPageSize() {
                    var CookiePageSize = $.cookie(o.CookiePageSize);
                    if (!CookiePageSize) {
                        var options = {
                            path: '/',
                            expires: 365
                        };
                        $.cookie(o.CookiePageSize, o.defaultPageSize, options);
                        CookiePageSize = o.defaultPageSize;
                    }
                    if (CookiePageSize == 0) {
                        return "all";
                    } else {
                        return CookiePageSize
                    }
                }

                //Rebuid listing, rebind events and all other elements. Expects custom data to generate listing. Used in filter and other method when current items are modified ie. delete
                function reBuildListing(customData) {
                    var data = generateListing(customData);
                    if (currentView() == "Thumbnail") {
                        var c = $("#filesContainerDiv");
                        $(c).html(data);
                        if(!$(c).next().is(".ignoreDB"))
                            $(c).after("<div class='clear ignoreDB'></div>");
                        //Bind various events
                        prepareDataRow($(c).find("li"));
                        bindTree();
                        bindAllEventsForThumbnailView($(c), data);
                        $("#slider").show();
                        scrollToFileListing();
                        if(window.enableFolderPreview)
                        {
                            window.quitPreviewCalls = true;
                            setTimeout(function(){
                                window.quitPreviewCalls = false;
                                fetchFolderPreview();
                            }, 500);
                        }
                    } else {
                        var c = $("#filesContainer");
                        $(c).find("tbody").empty().append(data);
                        prepareDataRow($(c).find("tr"));
                        bindTree(c);
                        $(c).closest('table').find("tr").attr("style", "background-position:40px 3px !important;");
                        bindAllEventsForTreeviewGrid($(c).closest('table'), true, data);
                        c.find("tr.subdirectory").each(function () {
                            var relLink = $("a[rel='" + $(this).attr("rel") + "']");
                            var rootdir = escape($(this).attr("rootdir"));
                            var dirSpan = c.find("span[rel='" + rootdir + "']");
                            $(dirSpan).parent().removeClass('collapsed').addClass('expanded').find(".expandButton").addClass('expanded');
                            $(dirSpan).find("img").attr("src", o.expandedImageURL);
                            var padLeft = 0;
                            if (relLink.parent().css("padding-left")) {
                                try {
                                    padLeft = parseInt(relLink.parent().css("padding-left").replace("px", ""));
                                } catch (ex) {}
                            } else {
                                padLeft = 20;
                            }
                            if (padLeft != NaN) {
                                if (padLeft >= 20) {
                                    padLeft += 20;
                                    var padicon = padLeft;
                                    var padTree = padicon - 20;
                                    $(this).find("td.columnName").attr("style", "padding-left:" + padLeft + "px !important; background-position:" + padTree + "px 4px !important;");
                                }
                            }
                        });
                        if(window.enableFolderPreview)
                        {
                            window.quitPreviewCalls = true;
                            setTimeout(function(){
                                window.quitPreviewCalls = false;
                                fetchFolderPreview();
                            }, 500);
                        }
                        if(window.disableFolderExpansionInTreeview)
                        {
                            setTimeout(function(){
                                c.addClass("noFolderExpansion");
                            });
                        }
                        if(window.autoRefreshListingTime && !window.refreshTimer){
                            window.refreshTimer = setInterval(function(){
                                $(".refreshButton").click();
                            }, window.autoRefreshListingTime * 1000);
                        }
                    }
                    if(!$.CrushFTP.DNDAdded)
                    {
                        $.CrushFTP.attachDND(o);
                        $.CrushFTP.DNDAdded = true;
                    }
                }

                // Update page size and refresh layout
                function updatePageSizeOnLayout(refresh, customItem) {
                    var CookiePageSize = getPageSize();
                    o.defaultPageSize = CookiePageSize;
                    var pageText = getLocalizationKey("PageSizeSelectionLinkText").replace("{0}", CookiePageSize);
                    $("#PageSizeSelectionLinkText").html(pageText).show();
                    if (refresh) {
                        if(!customItem && window.isSearchResult)
                        {
                            customItem = $(document).data("searchData");
                        }
                        reBuildListing(customItem);
                    }
                }

                // Change pager size on selection and refresh layout
                function changePagerSize(pageSize, dontRefresh) {
                    var options = {
                        path: '/',
                        expires: 365
                    };
                    $.cookie(o.CookiePageSize, pageSize, options);
                    window.current_page = o.pagingCurrentPage = 0;
                    updatePageSizeOnLayout(!dontRefresh);
                }
                //Handle pager size menu selection

                function handlePageSizeContextMenuEvents(action, el, pos, command) {
                    $("#cluetip").hide();
                    action = action == "all" ? 0 : action;
                    changePagerSize(action);
                    return false;
                }
                //Handle context menu of check boxes and various selection options. ie. select files modified today, this week etc

                function handleCheckBoxContextMenuEvents(action, el, pos, command) {
                    $("#cluetip").hide();
                    switch (action) {
                    case 'checkall':
                        selectDeselectAllItems(true); // Select all
                        break;
                    case 'uncheckall':
                        selectDeselectAllItems(false); // Deselect all
                        break;
                    case 'toggle':
                        // Toggle
                        selectDeselectAllItems(false, true);
                        break;
                    case 'checkallfiles':
                        //Select all Files
                        if (currentView() == "Thumbnail") {
                            $("#filesContainerDiv").find("li.fileBoxSelected:visible").removeClass("fileBoxSelected");
                            $("#filesContainerDiv").find("li.fileThumb:visible").addClass("fileBoxSelected");
                        } else {
                            $("#filesContainer").find(".chkBox:visible:checked").removeAttr("checked");
                            $("#filesContainer").find("td.fileTR").each(function () {
                                $(this).parent().find("input.chkBox").attr("checked", "checked");
                            });
                            if (isChecked($("#filesContainer"))) {
                                $("#filesContainer").find("input.chkBoxAll").attr("checked", "checked");
                            } else {
                                $("#filesContainer").find("input.chkBoxAll").removeAttr("checked");
                            }
                        }
                        fileselectionUpdated();
                        break;
                    case 'checkallfolders':
                        // Select all Folders
                        if (currentView() == "Thumbnail") {
                            $("#filesContainerDiv").find("li.fileBoxSelected:visible").removeClass("fileBoxSelected");
                            $("#filesContainerDiv").find("li.directoryThumb:visible").addClass("fileBoxSelected");
                        } else {
                            $("#filesContainer").find(".chkBox:visible:checked").removeAttr("checked");
                            $("#filesContainer").find("td.directory").each(function () {
                                $(this).parent().find("input.chkBox").attr("checked", "checked");
                            });
                            if (isChecked($("#filesContainer"))) {
                                $("#filesContainer").find("input.chkBoxAll").attr("checked", "checked");
                            } else {
                                $("#filesContainer").find("input.chkBoxAll").removeAttr("checked");
                            }
                        }
                        fileselectionUpdated();
                        break;
                    case 'checkitemswithdot':
                        //Select items start with dot
                        if (currentView() == "Thumbnail") {
                            $("#filesContainerDiv").find("li.fileBoxSelected:visible").removeClass("fileBoxSelected");
                            $("div.imgTitle:visible").find("a").each(

                            function () {
                                if ($.trim($(this).text()).charAt(0) == ".") {
                                    $(this).closest("li").addClass("fileBoxSelected");
                                }
                            });
                        } else {
                            $("#filesContainer").find(".chkBox:visible:checked").removeAttr("checked");
                            $(".jqueryFileTree").find("a").each(

                            function () {
                                if ($.trim($(this).text()).charAt(0) == ".") {
                                    $(this).closest("tr").find("input.chkBox").attr("checked", "checked");
                                }
                            });
                            if (isChecked($("#filesContainer"))) {
                                $("#filesContainer").find("input.chkBoxAll").attr("checked", "checked");
                            } else {
                                $("#filesContainer").find("input.chkBoxAll").removeAttr("checked");
                            }
                        }
                        fileselectionUpdated();
                        break;
                    case 'checktoday':
                        //Check items modified in 1 day
                        checkModifiedItemsByDay(1);
                        break;
                    case 'checkweek':
                        //Check items modified in 7 days
                        checkModifiedItemsByDay(7);
                        break;
                    case 'checkmonth':
                        //Check items modified in 30 days
                        checkModifiedItemsByDay(30);
                        break;
                    case 'check2months':
                        //Check items modified in 60 days
                        checkModifiedItemsByDay(60);
                        break;
                    case 'check3months':
                        //Check items modified in 90 days
                        checkModifiedItemsByDay(90);
                        break;
                    }
                }
                // Method to check items modified in last n days. For both views

                function checkModifiedItemsByDay(day) {
                    day = day || 1;
                    if (currentView() == "Thumbnail") {
                        $("#filesContainerDiv").find("li.fileBoxSelected:visible").removeClass("fileBoxSelected");
                        $("div.imgTitle:visible").find("a").each(

                        function () {
                            var data = $(this).closest("li").data("dataRow");
                            if (data) {
                                var fileDateMills = data.fulldate;
                                if ((fileDateMills * 1) > new Date().getTime() - (1000 * 60 * 60 * 24 * day)) {
                                    $(this).closest("li").addClass("fileBoxSelected");
                                }
                            }
                        });
                    } else {
                        $("#filesContainer").find(".chkBox:visible:checked").removeAttr("checked");
                        $(".jqueryFileTree").find("a").each(

                        function () {
                            var fileDateMills = $(this).closest("tr").attr("modified");
                            if ((fileDateMills * 1) > new Date().getTime() - (1000 * 60 * 60 * 24 * day)) {
                                $(this).closest("tr").find("input.chkBox").attr("checked", "checked");
                            }
                        });
                        if (isChecked($("#filesContainer"))) {
                            $("#filesContainer").find("input.chkBoxAll").attr("checked", "checked");
                        } else {
                            $("#filesContainer").find("input.chkBoxAll").removeAttr("checked");
                        }
                    }
                    fileselectionUpdated();
                }

                //Handle context menu events
                function handleContextMenuEvents(action, el, pos, command, basket) {
                    $("#cluetip").hide();
                    if (command) {
                        $(document).data("currentContext", {
                            'action': action,
                            'elem': el,
                            'basket' : basket
                        });
                        command = crushFTPTools.decodeURILocal(command); // Decode command associated with menu and evaluate it
                        try{
                            eval(command);
                            clearContext();
                        }catch(ex){}
                    }
                    return false;
                }

                if(!String.prototype.shuffle)
                {
                    String.prototype.shuffle = function () {
                        var a = this.split(""),
                            n = a.length;

                        for(var i = n - 1; i > 0; i--) {
                            var j = Math.floor(Math.random() * (i + 1));
                            var tmp = a[i];
                            a[i] = a[j];
                            a[j] = tmp;
                        }
                        return a.join("");
                    }
                }
                // Few prototype entries
                // Add a method "has" to array
                Array.prototype.has = function (value) {
                    var i;
                    for (var i = 0, loopCnt = this.length; i < loopCnt; i++) {
                        if (this[i] === value) {
                            return true;
                        }
                    }
                    return false;
                };
                //Add "indexOf" method to array
                if (!Array.prototype.indexOf) {
                    Array.prototype.indexOf = function (value) {
                        var i;
                        for (var i = 0, loopCnt = this.length; i < loopCnt; i++) {
                            if (this[i] === value) {
                                return i;
                            }
                        }
                        return -1;
                    };
                }
                if (!Array.prototype.humanSort) {
                    Array.prototype.naturalSort = function() {
                      return this.sort(function(a, b) {
                        aa = a.name.split(/(\d+)/);
                        bb = b.name.split(/(\d+)/);

                        for(var x = 0; x < Math.max(aa.length, bb.length); x++) {
                          if(aa[x] != bb[x]) {
                            var cmp1 = (isNaN(parseInt(aa[x],10)))? aa[x] : parseInt(aa[x],10);
                            var cmp2 = (isNaN(parseInt(bb[x],10)))? bb[x] : parseInt(bb[x],10);
                            if(cmp1 == undefined || cmp2 == undefined)
                              return aa.length - bb.length;
                            else
                              return (cmp1 < cmp2) ? -1 : 1;
                          }
                        }
                        return 0;
                      });
                    }
                }
                // Array Remove - By John Resig (MIT Licensed)
                Array.prototype.remove = function (from, to) {
                    if (this.slice) {
                        var rest = this.slice((to || from) + 1 || this.length);
                        this.length = from < 0 ? this.length + from : from;
                        return this.push.apply(this, rest);
                    } else {
                        return this;
                    }
                }

                //Add Filter method in array if not available
                if (!('filter' in Array.prototype)) {
                    Array.prototype.filter= function(filter, that /*opt*/) {
                        var other= [], v;
                        for (var i=0, n= this.length; i<n; i++)
                            if (i in this && filter.call(that, v= this[i], i, this))
                                other.push(v);
                        return other;
                    };
                }
                //Clean array, usage array.clean("");
                Array.prototype.clean = function(deleteValue) {
                  for (var i = 0; i < this.length; i++) {
                    if (this[i] == deleteValue) {
                      this.splice(i, 1);
                      i--;
                    }
                  }
                  return this;
                };

                //Array diff operation
                Array.prototype.diff = function(a) {
                    return this.filter(function(i) {return !(a.indexOf(i) > -1);});
                };

                //Finds average numeric value in an array
                Array.prototype.average = function() {
                    var av = 0;
                    var cnt = 0;
                    var len = this.length;
                    for (var i = 0; i < len; i++) {
                        var e = +this[i];
                        if(!e && this[i] !== 0 && this[i] !== '0') e--;
                        if (this[i] == e) {av += e; cnt++;}
                    }
                    return av/cnt;
                }

                Number.prototype.leftZeroPad = function(numZeros) {
                    var n = Math.abs(this);
                    var zeros = Math.max(0, numZeros - Math.floor(n).toString().length );
                    var zeroString = Math.pow(10,zeros).toString().substr(1);
                    if( this < 0 ) {
                            zeroString = '-' + zeroString;
                    }
                    return zeroString+n;
                }

                $.expr[":"].exacttext = function(obj, index, meta, stack){
                    return (obj.textContent || obj.innerText || $(obj).text() || "").toLowerCase() == meta[3].toLowerCase();
                }

                String.prototype.replaceAll = function(token, newToken, ignoreCase) {
                    var str, i = -1, _token;
                    if((str = this.toString()) && typeof token === "string") {
                        _token = ignoreCase === true? token.toLowerCase() : undefined;
                        while((i = (
                            _token !== undefined?
                                str.toLowerCase().indexOf(
                                            _token,
                                            i >= 0? i + newToken.length : 0
                                ) : str.indexOf(
                                            token,
                                            i >= 0? i + newToken.length : 0
                                )
                        )) !== -1 ) {
                            str = str.substring(0, i)
                                    .concat(newToken)
                                    .concat(str.substring(i + token.length));
                        }
                    }
                return str;
                };

                function availableInBasket(array, file)
                {
                    for(var i=0;i<array.length;i++)
                    {
                        if(unescape(array[i].file) == unescape(file))return true;
                    }
                    return false;
                }

                window.getItemsFromBasket = function()
                {
                    if (!$(document).data(o.BasketDataKey)) { // If basket not avaiable already, create one in document cache
                        $(document).data(o.BasketDataKey, new Array());
                    }
                    return $(document).data(o.BasketDataKey);
                }

                //Add item to basket
                function addToBasket(context, fakeContext) {
                    var elem = false;
                    var exist = false;
                    var _fileName = "";
                    if (context) // Select context and set filename to add to the basket
                    {
                        if(!fakeContext)
                          elem = currentContext();
                        else
                            elem = context;
                        if (elem) {
                            var $curElem = $(elem);
                            _fileName = $curElem.find("a:first").attr("rel");
                        }
                    }
                    var _filePath = "";
                    var _root_dir = "";
                    var _hasPreview = 0;
                    var _dataRow = false;
                    var _type = "";
                    if (elem) {
                        var parentElem = $(elem);
                        if (currentView() != "Thumbnail") {
                            parentElem = parentElem.closest("tr");
                            _type = parentElem.find("td.directory").length>0 ? "DIR" : "FILE";
                            _root_dir = parentElem.attr("rootdir");
                        }
                        else
                        {
                            _type = parentElem.hasClass("directoryThumb") ? "DIR" : "FILE";
                            _root_dir = parentElem.attr("root_dir");
                        }
                        _filePath = parentElem.find("a").attr("rel");
                        _filePath = unescape(_filePath.replace("//", "/"));
                        _hasPreview = parentElem.attr("preview");
                        _dataRow = parentElem.data("dataRow");
                    }
                    if (!$(document).data(o.BasketDataKey)) { // If basket not avaiable already, create one in document cache
                        $(document).data(o.BasketDataKey, new Array());
                    }
                    var ItemsInTheBasket = $(document).data(o.BasketDataKey); // Items in the basket
                    var selectedFiles = {};
                    if (window.listingInfo.selectedEverything) // If all items in the list is selected, loop through them and add to the basket
                    {
                        var listItems = window.curTreeItems;
                        if (window.listingInfo.filtered) {
                            listItems = window.matchedItems;
                        }
                        for (var i = 0; i < listItems.length; i++) {
                            var curItem = listItems[i];
                            var filePath = unescape(curItem.root_dir) + unescape(curItem.name);
                            filePath = filePath.replace("//", "/");
                            if(_filePath == filePath)return;
                            if (!availableInBasket(ItemsInTheBasket, filePath)) {
                                ItemsInTheBasket.push({
                                    date : curItem.dateFormatted,
                                    fulldate : curItem.modified,
                                    keywords : curItem.keywords,
                                    name : curItem.name,
                                    preview : curItem.preview,
                                    privs : curItem.privs,
                                    size : curItem.sizeFormatted,
                                    sizeB : curItem.size,
                                    file : filePath,
                                    path : curItem.root_dir,
                                    type : curItem.type
                                });
                            }
                            else
                                exist = true;
                        }
                    } else {
                        if (currentView() == "Thumbnail") {
                            selectedFiles = $("#filesContainerDiv").find("li.fileBoxSelected:visible");
                        } else {
                            selectedFiles = $("#filesContainer").find(".chkBox:visible:checked");
                        }
                        if (selectedFiles.length > 0) {
                            selectedFiles.each(function (index) {
                                var file = "";
                                var hasPreview = 0;
                                var dataRow = false;
                                var type = "";
                                var root_dir = "";
                                if (currentView() == "Thumbnail") {
                                    var _parentElem = $(this).closest("li");
                                    file = unescape($(this).find("a:first").attr("rel"));
                                    hasPreview = _parentElem.attr("preview");
                                    dataRow = _parentElem.data("dataRow");
                                    type = _parentElem.hasClass("directoryThumb") ? "DIR" : "FILE";
                                    root_dir = dataRow.root_dir;
                                } else {
                                    var _parentElem = $(this).closest("tr");
                                    file = unescape(_parentElem.find("a:first").attr("rel"));
                                    hasPreview = _parentElem.attr("preview");
                                    dataRow = _parentElem.data("dataRow");
                                    type = _parentElem.find("td.directory").length>0 ? "DIR" : "FILE";
                                    root_dir = _parentElem.attr("rootdir");
                                }
                                if(_filePath == file || !dataRow)return;
                                if (!availableInBasket(ItemsInTheBasket, file)) {
                                    ItemsInTheBasket.push({
                                        date : dataRow.date,
                                        fulldate : dataRow.fulldate,
                                        keywords : dataRow.keywords,
                                        name : dataRow.name,
                                        preview : hasPreview,
                                        privs : dataRow.privs,
                                        size : dataRow.size,
                                        path : root_dir,
                                        sizeB : dataRow.sizeB,
                                        file : file,
                                        type : type
                                    });
                                }
                                else
                                {
                                    exist = true;
                                }
                                $(this).click();
                            });
                        }
                        if (!availableInBasket(ItemsInTheBasket, _filePath) && _filePath.length > 0 && _dataRow) { // Only if item not available in the basket, add it
                            ItemsInTheBasket.push({
                                date : _dataRow.date,
                                fulldate : _dataRow.fulldate,
                                keywords : _dataRow.keywords,
                                name : _dataRow.name,
                                preview : _hasPreview,
                                privs : _dataRow.privs,
                                size : _dataRow.size,
                                path : _root_dir,
                                sizeB : _dataRow.sizeB,
                                file : _filePath,
                                type : _type
                            });
                        }
                        else if(_filePath.length > 0)
                        {
                            exist = true;
                        }
                    }
                    if (ItemsInTheBasket.length > 0) {
                        $(document).data(o.BasketDataKey, ItemsInTheBasket);
                        rebuildBasket();
                        if (currentView() != "Thumbnail") {
                            var tbl = $("#filesListing").find("table");
                            toggleCheckBoxesAll(tbl, false);
                            toggleMainCheckbox(tbl, false);
                        }
                    }
                    if (exist) {
                        $("div#filesBasket").dialog("open");
                        // Show message if file exist in the basket
                        $.growlUI(getLocalizationKey("BasketFileAddedAlreadyText"), getLocalizationKey("BasketFileAddedAlreadyDetailsText"), o.GrowlTimeout, "growlError");
                        return;
                    } else if(ItemsInTheBasket.length == 0){
                        // If nothing to add
                        $.growlUI(getLocalizationKey("BasketNothingSelectedToAddText"), getLocalizationKey("BasketNothingSelectedToAddDetailsText"), o.GrowlTimeout, "growlError");
                        return;
                    }
                }

                //Method to rebuild basket
                window.rebuildBasket = function(items) {
                    var title = getLocalizationKey("BasketHeaderText") || "Files in the Basket";
                    $("#BasketHeaderText").text(title);
                    if (!$(document).data(o.BasketDataKey)) {
                        $(document).data(o.BasketDataKey, new Array());
                    }
                    //Items in the basket
                    var ItemsInTheBasket = items || $(document).data(o.BasketDataKey);
                    var filesSelectedInBasket = $(".filesSelectedInBasket");
                    var curView = currentView(true);
                    var basketReopen = false;
                    if (curView == "Thumbnail") {
                        $("#sliderBasket").show();
                        if(filesSelectedInBasket.find("#basketFilesContainerThumb").length==0)
                        {
                            filesSelectedInBasket.append("<ul id='basketFilesContainerThumb'></ul>");
                            zoomInOutView(zoomSliderBasket.slider("value"), false, true);
                        }
                        else
                            basketReopen = true;
                        filesSelectedInBasket.find("table").hide();
                        filesSelectedInBasket = filesSelectedInBasket.find("ul").empty();
                        filesSelectedInBasket.find("li.uploaded").remove();
                    }
                    else
                    {
                        $("#sliderBasket").hide();
                        if($("#basketFilesContainer").length==0)
                        {
                            filesSelectedInBasket.append("<table id='basketFilesContainer' cellpadding='0' cellspacing='0' class='jqueryFilesTable tablesorter'><thead><tr><td class='thDeleteSelect theader' style='width:25px;'></td><td class='thSelect theader'><input type='checkBox' class='chkBoxAll' /></td><td colName='name' class='thName theader'>" + getLocalizationKey("TreeviewHeaderNameText") + "</td><td  colName='path' class='thPath theader'>" + getLocalizationKey("TreeviewHeaderPathText") + "</td><td  colName='sizeB' class='thSize theader'>" + getLocalizationKey("TreeviewHeaderSizeText") + "</td><td colName='fulldate' class='thModified theader'>" + getLocalizationKey("TreeviewHeaderModifiedText") + "</td><td colName='keywords' class='thKeywords theader'>" + getLocalizationKey("TreeviewHeaderKeywordsText") + "</td></tr></thead></table>");
                            setTimeout(function(){
                                bindSortingToBasketTreeviewGrid();
                            }, 200);
                        }
                        else
                            basketReopen = true;
                        filesSelectedInBasket.find("ul").hide();
                        filesSelectedInBasket.find("li.uploaded").remove();
                        filesSelectedInBasket = $("#basketFilesContainer");
                        filesSelectedInBasket.find("thead").nextAll().remove();
                    }
                    filesSelectedInBasket.show();
                    var dirs = 0;
                    var files = 0;
                    //Loop through items and build a list, bind events
                    for (var i = 0; i < ItemsInTheBasket.length; i++) {
                        if (filesSelectedInBasket.find("a[rel='" + escape(ItemsInTheBasket[i].file) + "']").length == 0) {
                            if(ItemsInTheBasket[i].type == "DIR")
                                dirs+=1;
                            else
                                files+=1;
                            var newElem = $(generateHTMLForBasketItem(ItemsInTheBasket[i]));
                            filesSelectedInBasket.prepend(newElem);
                            newElem.data("dataRow", ItemsInTheBasket[i]);
                            var privs = ItemsInTheBasket[i].privs;
                            if(privs.indexOf("(share)")>=0)
                            {
                                if(newElem.find(".chkBox").attr("shareable", "true").length == 0)
                                    newElem.attr("shareable", "true");
                            }
                            if (curView == "Thumbnail") {
                                loadIconPreview(2, true, newElem, true);
                            }
                            else {
                                loadIconPreview(2, true, newElem.find("td:nth-child(3)"), true);
                            }
                            vtip(newElem, true);
                            newElem.find("span.error, span.remove").unbind().click(function () {
                                if (!$(document).data(o.BasketDataKey)) {
                                    $(document).data(o.BasketDataKey, new Array());
                                }
                                var _ItemsInTheBasket = $(document).data(o.BasketDataKey);
                                var key = "";
                                if (curView == "Thumbnail") {
                                    key = unescape($(this).closest("li").find("a.imgLink").attr("rel"));
                                }
                                else
                                {
                                    key = unescape($(this).closest("tr").find("a.imgLink").attr("rel"));
                                }
                                var deleted = false;
                                var items = [];
                                for(var i=0;i<_ItemsInTheBasket.length;i++)
                                {
                                    if(unescape(_ItemsInTheBasket[i].file) != key)
                                    {
                                        items.push(_ItemsInTheBasket[i]);
                                    }
                                    else
                                        deleted = true;
                                }
                                if(deleted)
                                {
                                    $(document).data(o.BasketDataKey, items);
                                    //showDownloadBasket(items);
                                    window.rebuildBasket(items);
                                    var parElem = $(this).closest("li");
                                    if (curView != "Thumbnail") {
                                        parElem = $(this).closest("tr");
                                    }
                                    parElem.fadeOut(100, function () {
                                        parElem.remove();
                                        $("#cluetip").hide();
                                    });
                                }
                                return false;
                            });
                        }
                    }
                    var BasketTotalItemText = getLocalizationKey("BasketTotalItemText");
                    BasketTotalItemText = BasketTotalItemText.replace("{0}", ItemsInTheBasket.length);
                    var fileBasketList = $("#FileBasketList");
                    $(".totalItemCount", fileBasketList).html(BasketTotalItemText + " ("+dirs + " <span =id='FileCounterFoldersText'>" + getLocalizationKey("FileCounterFoldersText") + "</span> , "+files + " <span id='FileCounterFilesText'>" + getLocalizationKey("FileCounterFilesText") + "</span> )");
                    if(window.filteredItemsBasket)
                    {
                        $(".basketFilterInfo", fileBasketList).html("(Items with phrase \""+crushFTPTools.htmlEncode(window.last_search_item_basket, false, true)+"\" : <span id='FileCounterFoldersText'>"+getLocalizationKey("FileCounterFoldersText")+"</span> : "+window.filteredItemsBasket.dirsCount + " <span id='FileCounterFilesText'>" + getLocalizationKey("FileCounterFilesText") + "</span> : "+window.filteredItemsBasket.filesCount+")");
                    }
                    else
                        $(".basketFilterInfo", fileBasketList).empty();

                    if(!window.disableContextMenuOnBasket)
                    {
                        $(".contextMenuItem", fileBasketList).contextMenu({
                            menu: 'myMenu'
                        }, function (action, el, pos, command) {
                            handleContextMenuEvents(action, el, pos, command, true);
                        });
                    }

                    if (curView != "Thumbnail")
                    {
                        howerEffect(filesSelectedInBasket);
                        filesSelectedInBasket.find("tr:even").addClass("jqueryFileTreeAlt");
                        bindBasketCheckboxEvents();
                        var chkBoxAll = $(".chkBoxAll", filesSelectedInBasket);
                        if(chkBoxAll.is(":checked"))
                            chkBoxAll.trigger("click").attr("checked", "checked");
                        else
                            chkBoxAll.trigger("click").removeAttr("checked");

                        if(window.hideKeywordCol)
                        {
                            filesSelectedInBasket.find("td.columnKeywords,td.thKeywords").hide();
                        }
                        if(window.hideModifiedCol)
                        {
                            filesSelectedInBasket.find("td.columnModified, td.thModified").hide();
                        }
                        if(window.hideCheckboxCol)
                        {
                            filesSelectedInBasket.find("td.columnSelect, .chkBoxAll").hide();
                            filesSelectedInBasket.find("thead > tr > td:first").hide();
                        }
                        if(window.hideNameCol)
                        {
                            filesSelectedInBasket.find("td.columnName,td.thName").hide();
                        }
                        if(window.hideSizeCol)
                        {
                            filesSelectedInBasket.find("td.columnSize,td.thSize").hide();
                        }
                    }
                    else
                    {
                        $(filesSelectedInBasket).find('LI.fileBoxBasket').unbind("click").click(function (evt) {
                            evt.stopPropagation();
                            evt.preventDefault();
                            setTimeout(function(){
                                clearUIDNDData();
                                $(document).mouseup();
                            }, 100);
                            $(this).trigger('mouseup.contextMenu');
                            var curitem = $(this);
                            var shift = evt.shiftKey || curitem.attr("shift") == "true"; // If shift is pressed it will allow multiple item selection in thumbs view
                            curitem.removeAttr("shift");
                            if (shift) {
                                if (window.lastSelectedItemBasket) // Last selected item, if shift is pressed
                                {
                                    var lastItem = window.lastSelectedItemBasket;
                                    window.lastSelectedItemBasket = false;
                                    if (lastItem != curitem) //If current and last items are not same
                                    {
                                        var lastItemIndex = $(lastItem).index();
                                        var curItemIndex = $(curitem).index();
                                        var isChecked = $($(filesSelectedInBasket).find("li").get(lastItemIndex)).hasClass("fileBoxSelected");

                                        //loop through items between last selected and current, and apply selection class
                                        if (lastItemIndex > curItemIndex) {
                                            for (var i = curItemIndex; i <= lastItemIndex; i++) {
                                                if ($($(filesSelectedInBasket).find("li").get(i)).is(":visible")) {
                                                    if(isChecked)
                                                        $($(filesSelectedInBasket).find("li").get(i)).addClass("fileBoxSelected");
                                                    else
                                                        $($(filesSelectedInBasket).find("li").get(i)).removeClass("fileBoxSelected");
                                                }
                                            }
                                        }
                                        //reverse loop if below item selected first
                                        if (curItemIndex > lastItemIndex) {
                                            for (var i = lastItemIndex; i <= curItemIndex; i++) {
                                                if ($($(filesSelectedInBasket).find("li").get(i)).is(":visible")) {
                                                    if(isChecked)
                                                        $($(filesSelectedInBasket).find("li").get(i)).addClass("fileBoxSelected");
                                                    else
                                                        $($(filesSelectedInBasket).find("li").get(i)).removeClass("fileBoxSelected");
                                                }
                                            }
                                        }
                                    }
                                }
                            } else {
                                //If only single item selection (without shift)
                                if (curitem.hasClass("fileBoxSelected")) // If already selected, unselect. Select otherwise
                                {
                                    curitem.removeClass("fileBoxSelected");
                                } else {
                                    curitem.addClass("fileBoxSelected");
                                }
                                window.lastSelectedItemBasket = curitem;
                            }
                            // Remove selection range, it messes up UI as all the text came between selection highlights in native browser selection manner
                            if (window.getSelection) // Modern Browsers
                            {
                                var selection = window.getSelection();
                                if (selection.removeAllRanges) {
                                    selection.removeAllRanges();
                                }
                            }
                            if (document.getSelection) // IE
                            {
                                var selection = document.getSelection();
                                if (selection.removeAllRanges) {
                                    selection.removeAllRanges();
                                }
                            }
                            fileselectionUpdated(true);
                            $(this).blur();
                            return false;
                        });
                    }
                    //Show download basket
                    showDownloadBasket(ItemsInTheBasket);
                    bindDragDropFilesBasket();
                    //filesSelectedInBasket.find("[draggable]").dragout();
                    $("#cluetip").hide(); // remove tooltip shown
                    if(!basketReopen)
                    {
                        if (!$("#filterBasket").data("eventAdded")) // bind event of keyup on filter input to do live filter if event not added already
                        {
                            $("#filterBasket").unbind("keyup").keyup(function (evt) {
                                var evt = (evt) ? evt : ((event) ? event : null);
                                var val = this.value;

                                function startFilter() {
                                    if (window.last_search_item_basket && window.last_search_item_basket === val) { // if value is not updated, do nothing
                                        return false;
                                    }
                                    setTimeout(function () {
                                        filterBasketItem(val);
                                    }, 10);
                                }
                                if (evt.keyCode == 13) {
                                    startFilter();
                                } else {
                                    delay(function () {
                                        startFilter();
                                    }, 300);
                                }
                            }).data("eventAdded", true);
                            $("a.clearFilterLink", "#filterPanelBasket").unbind("click").click(function(e) {
                                e.preventDefault();
                                if ($("#filterBasket").val().length > 0) {
                                    $("#filterBasket").val("").keyup().blur();
                                    window.last_search_item_basket = false;
                                }
                                return false;
                            });
                        }
                        //Clear all completed items link event
                        $("#submitActionBasket").find(".clearCompleted").unbind().click(function () {
                            $(this).blur();
                            /* added by carlos close advanced options when user clear downloads */
                            if( $("#uploadOptionsDialog").dialog("isOpen") ) {
                                $("#uploadOptionsDialog").dialog("close");
                            }
                            if (confirm(getLocalizationKey("BasketClearAllConfirmMessage"))) {
                                $(document).data(o.BasketDataKey, new Array());
                                rebuildBasket();
                            }
                        });
                        //Advanced download options added by carlos
                        $("#submitActionBasket").find(".advancedoptions").unbind().click(function () {
                            $(this).blur();
                            $("#uploadOptionsDialog").dialog( "option", "position", { my: "left bottom", at: "left top", of: $('.advancedoptions') } ).dialog('open');
                        });
                        //Download link event
                        $("#submitActionBasket").find(".download").unbind().click(function () {
                            $(this).blur();
                            /* added by carlos close advanced options if the the user click on download */
                            if( $("#uploadOptionsDialog").dialog("isOpen") ) {
                                $("#uploadOptionsDialog").dialog("close");
                            }
                            if ($(this).hasClass("advanced")) {
                                downloadBasket(null, "applet");
                            } else {
                                downloadBasket(null, "");
                            }
                        });
                        //Share items event
                        $("#submitActionBasket").find(".shareBasketItems").unbind().click(function () {
                            $(this).blur();
                            /* added by carlos close advanced options if the user want to share the files */
                            if( $("#uploadOptionsDialog").dialog("isOpen") ) {
                                $("#uploadOptionsDialog").dialog("close");
                            }
                            shareFile(false, false, false, false, true);
                        });
                    }
                    //To download quickly using advanced download
                    var quickDLList = $(document).data(o.BasketDataKeyQuickDownload);
                    if (quickDLList && quickDLList.length > 0) {
                        downloadBasket(null, "applet", true);
                    }
                }

                function generateHTMLForBasketItem(opt)
                {
                    var fileList = [];
                    var linkURL = unescape(window.location.href.split('#')[0]);
                    linkURL = linkURL.substring(0, linkURL.lastIndexOf("/"));
                    var _isUIDNDReady = window.isCrush7Ready();
                    if (opt) {
                        var keywords = unescape(opt.keywords);
                        /*if (keywords.length >= o.keywordsCharLimit) {
                            keywords = keywords.substr(
                            0, o.keywordsCharLimit) + "...";
                        }*/
                        var hideItem = "";
                        if(window.filteredItemsBasket)
                        {
                            if(typeof opt.hide == "undefined")
                                hideItem = " ui-helper-hidden";
                        }
                        var fileName = crushFTPTools.htmlEncode(opt.name, false, true);
                        if (currentView(true) == "Thumbnail") {
                            if (opt.type === 'DIR') {
                                var downloadURL = _isUIDNDReady ? "draggable=\"true\" data-downloadurl=\"application/octet-stream:" + fileName + ".zip:" +linkURL+'?command=downloadAsZip&zipName='+fileName+'.zip&path='+crushFTPTools.htmlEncode(opt.file, false, true)+"&c2f="+crushFTPTools.getCrushAuth() + '&paths='+crushFTPTools.htmlEncode(opt.file, false, true)+"\"" : "";
                                var dirTemplate = '<li '+downloadURL+' rootdir="'+escape(opt.path)+'" class="contextMenuItem vtip fileBoxBasket directoryThumb'+hideItem+'" preview="' + opt.preview + '" sizeinbytes="'+opt.sizeB+'"><span class="fileSelectionMark error"></span><span class="fileRemoveFromBasket remove"></span><div>' + '<div class="imgBox"><div class="imgWrapper">' + '<table cellspacing="0" cellpadding="0" align="center">' + '<tbody>' + '<tr>' + '<td valign="middle" align="center"><a class="imgLink" rel="' + escape(opt.file) + '" href="javascript:void(0);">' + '<img alt="' + crushFTPTools.htmlEncode(opt.name) + '" title="' + crushFTPTools.htmlEncode(opt.name) + '" style="border: 0px none;" src="' + o.fileFolder + '"></a></td>' + '</tr>' + '</tbody>' + '</table></div>' + '</div>' + '</div>' + '<div class="imgTitle wordwrap"><a href="javascript:void(0);" rel="'+escape(opt.path)+'" >' + crushFTPTools.htmlEncode(opt.name, false, true) + '</a></div>' + '</li>';
                                fileList.push(dirTemplate);
                            } else if (opt.type === 'FILE') {
                                var downloadURL = _isUIDNDReady ? "draggable=\"true\" data-downloadurl=\"application/octet-stream:" + fileName + ":" +linkURL+crushFTPTools.htmlEncode(opt.file, false, true)+"\"" : "";
                                var fileTemplate = '<li '+downloadURL+' rootdir="'+escape(opt.path)+'" class="contextMenuItem vtip fileBoxBasket fileThumb'+hideItem+'" preview="' + opt.preview + '" sizeinbytes="'+opt.sizeB+'"><span class="fileSelectionMark error"></span><span class="fileRemoveFromBasket remove"></span><div>' + '<div class="imgBox"><div class="imgWrapper">' + '<table cellspacing="0" cellpadding="0" align="center">' + '<tbody>' + '<tr>' + '<td valign="middle" align="center"><a class="imgLink" rel="' + escape(opt.file) + '" href="javascript:void(0);">' + '<img alt="' + crushFTPTools.htmlEncode(opt.name) + '" title="' + crushFTPTools.htmlEncode(opt.name) + '" style="border: 0px none;" src="' + o.spinerImage + '"></a></td>' + '</tr>' + '</tbody>' + '</table></div>' + '</div>' + '</div>' + '<div class="imgTitle wordwrap"><a href="javascript:void(0);" rel="'+escape(opt.path)+'" >' +  crushFTPTools.htmlEncode(opt.name, false, true) + '</a></div>' + '</li>';
                                fileList.push(fileTemplate);
                            }
                        } else {
                            /*if (keywords.length >= o.MaximumLengthAllowedForKeywordsString) {
                                keywords = keywords.substr(
                                0, o.MaximumLengthAllowedForKeywordsString) + "...";
                            }*/
                            if (opt.type === 'DIR') {
                                var downloadURL = _isUIDNDReady ? "draggable=\"true\" data-downloadurl=\"application/octet-stream:" + fileName + ".zip:" +linkURL+'?command=downloadAsZip&zipName='+fileName+'.zip&path='+crushFTPTools.htmlEncode(opt.file, false, true)+"&c2f="+crushFTPTools.getCrushAuth() + '&paths='+crushFTPTools.htmlEncode(opt.file, false, true)+"\"" : "";
                                fileList.push('<tr rootdir="'+escape(opt.path)+'" rel="' + escape(opt.path) + '" preview="'+ opt.preview +'" class="jqueryFileTree directoryThumb'+hideItem+'"><td><span class="fileRemoveFromBasketTree error" style="margin-top:2px;"></span></td><td class="columnSelect"><input class="chkBox" type="checkbox"/></td><td '+downloadURL+' preview="' + opt.preview + '" class="contextMenuItem directory columnName wordwrap imgTitle" sizeinbytes="'+opt.sizeB+'"><a class="imgLink" rel="' + escape(opt.file) + '" href="javascript:void(0);">' + crushFTPTools.htmlEncode(opt.name, false, true) + '</a></td><td class="columnPath">'+crushFTPTools.htmlEncode(unescape(opt.path))+'</td><td class="columnSize">' + opt.size + '</td><td class="columnModified">' + opt.date + '</td><td class="columnKeywords wordwrap" title="' + keywords + '">' + keywords + '</td></tr>');
                            } else if (opt.type === 'FILE') {
                                var downloadURL = _isUIDNDReady ? "draggable=\"true\" data-downloadurl=\"application/octet-stream:" + fileName + ":" +linkURL+crushFTPTools.htmlEncode(opt.file, false, true)+"\"" : "";
                                fileList.push('<tr rootdir="'+escape(opt.path)+'" rel="' + escape(opt.path) + '" preview="'+ opt.preview +'" class="jqueryFileTree'+hideItem+'"><td><span class="fileRemoveFromBasketTree error" style="margin-top:2px;"></span></td><td class="columnSelect"><input class="chkBox" type="checkbox"/></td><td '+downloadURL+' preview="' + opt.preview + '" class="contextMenuItem fileTR columnName fileItem wordwrap imgTitle"sizeinbytes="'+opt.sizeB+'"><a class="imgLink" rel="' + escape(opt.file) + '" href="javascript:void(0);">' + crushFTPTools.htmlEncode(opt.name, false, true) + '</a></td><td class="columnPath">'+crushFTPTools.htmlEncode(unescape(opt.path))+'</td><td class="columnSize">' + opt.size + '</td><td class="columnModified">' + opt.date + '</td><td class="columnKeywords wordwrap" title="' + keywords + '">' + keywords + '</td></tr>');
                            }
                        }
                    }
                    return fileList.join("\r\n");
                }

                //Show download basket
                function showDownloadBasket(ItemsInTheBasket) {
                    if (!ItemsInTheBasket) {
                        if (!$(document).data(o.BasketDataKey)) {
                            $(document).data(o.BasketDataKey, new Array());
                        }
                        ItemsInTheBasket = $(document).data(o.BasketDataKey);
                    }
                    var $elem = $("div#filesBasket");
                    $(".filesSelectedInBasket", $elem).parent().find(".notificationMsg").remove();
                    if (ItemsInTheBasket) {
                        if (!ItemsInTheBasket.length || ItemsInTheBasket.length == 0) {
                            $(".filesSelectedInBasket", $elem).before("<div class='notificationMsg'>" + getLocalizationKey("BasketNoFilesAvailableText") + "</div>");
                            $(".totalItemCount", $elem).empty();
                            $("#submitActionBasket").find(".download, .shareBasketItems").hide();
                        } else {
                            $("#submitActionBasket").find(".download").show();
                        }
                    } else {
                        $(".filesSelectedInBasket", $elem).before("<div class='notificationMsg'>" + getLocalizationKey("BasketNoFilesAvailableText") + "</div>");
                        $(".totalItemCount", $elem).empty();
                        $("#submitActionBasket").find(".download, .shareBasketItems").hide();
                    }
                    setTimeout(function(){
                        var curView = currentView(true);
                        var BasketShareItemsLinkText = $("#BasketShareItemsLinkText");
                        if (curView == "Thumbnail") {
                            if($("#basketFilesContainerThumb").find("li[shareable]").length>0)
                                BasketShareItemsLinkText.show();
                            else
                                BasketShareItemsLinkText.hide();
                        }
                        else
                        {
                            if($("#basketFilesContainer").find("input[shareable]").length>0)
                                BasketShareItemsLinkText.show();
                            else
                                BasketShareItemsLinkText.hide();
                        }
                    }, 200);
                    if(!window.dontShowBasket){
                        if (!$elem.is(":visible")) {
                            $elem.dialog("open");
                        }
                    }
                }

                //Download basket
                function downloadBasket(elem, opt, quick) {
                    if (opt == "") {
                        var stringToCopy = "";
                        if (!$(document).data(o.BasketDataKey)) {
                            $(document).data(o.BasketDataKey, new Array());
                        }
                        var hasDir = false;
                        var ItemsInTheBasket = $(document).data(o.BasketDataKey);
                        for (var i = 0; i < ItemsInTheBasket.length; i++) {
                            var filePath = escape(ItemsInTheBasket[i].file);
                            if(ItemsInTheBasket[i].type == "DIR")
                                hasDir = true;
                            if (stringToCopy.length > 0) {
                                stringToCopy += ":" + filePath;
                            } else {
                                stringToCopy = filePath;
                            }
                        };
                        if(ItemsInTheBasket.length>1 || hasDir)
                        {
                            submitAction({
                                '#command': "downloadAsZip",
                                '#path': crushFTPTools.encodeURILocal("/"),
                                '#paths': crushFTPTools.encodeURILocal(unescape(stringToCopy)),
                                '#random': Math.random()
                            });
                        }
                        else
                        {
                            submitAction({
                                '#command': "download",
                                '#path': crushFTPTools.encodeURILocal(unescape(stringToCopy)),
                                '#random': Math.random()
                            });
                        }
                    } else { //advanced
                        /*close prior msgs's*/
                        var filesSelectedInBasket = $(".filesSelectedInBasket");
                        filesSelectedInBasket.find("li.uploaded").remove();
                        if(quick)
                        {
                            if(window.quickCalled) {
                                return false;
                            };
                            window.quickCalled = true;
                        }
                        if (!$(document).data("appletLoaded")) $(document).data("appletLoaded", false);
                        if (!$(document).data("appletLoaded")) {
                            loadApplet(true, function (pnl) {
                                handleAppletBrowse(true, quick);
                                if(!$(".appletNote").is(":visible"))
                                {
                                    window.cancelDropAction(true);
                                }
                            }, true);
                        } else {
                            handleAppletBrowse(true, quick);
                        }
                    }
                }

                // Method to download selected items quickly using advanced download (java applet)
                function quickAdvancedDownload(context) {
                    var elem = false;
                    var exist = false;
                    var basket = false;
                    if (context) {
                        elem = currentContext();
                        if (elem) {
                            var $curElem = $(elem);
                            _fileName = $curElem.find("a:first").attr("rel");
                            basket = $curElem.hasClass("contextMenuItem");
                        }
                    }
                    var _filePath = "";
                    var _hasPreview = 0;
                    var _dataRow = false;
                    var _type = "";
                    var _root_dir = "";
                    var items = [];
                    if (elem) {
                        var parentElem = $(elem);
                        if (currentView(basket) != "Thumbnail") {
                            parentElem = parentElem.closest("tr");
                            _type = parentElem.find("td.directory").length>0 ? "DIR" : "FILE";
                            _root_dir = parentElem.attr("rootdir");
                        }
                        else
                        {
                            _type = parentElem.hasClass("directoryThumb") ? "DIR" : "FILE";
                            _root_dir = parentElem.attr("root_dir");
                        }

                        _filePath = parentElem.find("a").attr("rel");
                        _filePath = unescape(_filePath.replace("//", "/"));
                        _hasPreview = parentElem.attr("preview");
                        _dataRow = parentElem.data("dataRow");
                    }
                    var selectedFiles = {};
                    var ItemsToDownloadQuick = [];
                    var CurrentItemsInTheBasket = $(document).data(o.BasketDataKey);
                    CurrentItemsInTheBasket = CurrentItemsInTheBasket || [];
                    if (currentView(basket) == "Thumbnail") {
                        if(basket)
                            selectedFiles = $("#FileBasketList").find("li.fileBoxSelected:visible");
                        else
                            selectedFiles = $("#filesContainerDiv").find("li.fileBoxSelected:visible");
                    } else {
                        if(basket)
                            selectedFiles = $("#FileBasketList").find(".chkBox:visible:checked");
                        else
                            selectedFiles = $("#filesContainer").find(".chkBox:visible:checked");
                    }
                    if (selectedFiles.length > 0) {
                        selectedFiles.each(function (index) {
                            var file = "";
                            var hasPreview = 0;
                            var dataRow = false;
                            var type = "";
                            var root_dir = "";
                            if (currentView(basket) == "Thumbnail") {
                                var _parentElem = $(this).closest("li");
                                file = unescape($(this).find("a:first").attr("rel"));
                                hasPreview = _parentElem.attr("preview");
                                dataRow = _parentElem.data("dataRow");
                                type = _parentElem.hasClass("directoryThumb") ? "DIR" : "FILE";
                                root_dir = dataRow.root_dir;
                            } else {
                                var _parentElem = $(this).closest("tr");
                                file = unescape(_parentElem.find("a:first").attr("rel"));
                                hasPreview = _parentElem.attr("preview");
                                dataRow = _parentElem.data("dataRow");
                                type = _parentElem.find("td.directory").length>0 ? "DIR" : "FILE";
                                root_dir = _parentElem.attr("rootdir");
                            }
                            if(_filePath == file || !dataRow)return;
                            var curItem = {
                                date : dataRow.date,
                                fulldate : dataRow.fulldate,
                                keywords : dataRow.keywords,
                                name : dataRow.name,
                                preview : hasPreview,
                                privs : dataRow.privs,
                                size : dataRow.size,
                                sizeB : dataRow.sizeB,
                                path : root_dir,
                                file : file,
                                type : type
                            };
                            if (!availableInBasket(items, file)) {
                                items.push(curItem);
                            }
                            if (!availableInBasket(ItemsToDownloadQuick, file)) {
                                ItemsToDownloadQuick.push(curItem);
                            }
                            if (!availableInBasket(CurrentItemsInTheBasket, file)) {
                                CurrentItemsInTheBasket.push(curItem);
                            }
                            $(this).click();
                        });
                    }
                    if (!availableInBasket(items, _filePath) && _filePath.length > 0)
                    { // Only if item not available in the basket, add it
                        var _curItem = {
                            date : _dataRow.date,
                            fulldate : _dataRow.fulldate,
                            keywords : _dataRow.keywords,
                            name : _dataRow.name,
                            preview : _hasPreview,
                            privs : _dataRow.privs,
                            size : _dataRow.size,
                            sizeB : _dataRow.sizeB,
                            path : _root_dir,
                            file : _filePath,
                            type : _type
                        };
                        items.push(_curItem);
                        if (!availableInBasket(ItemsToDownloadQuick, _filePath)) {
                            ItemsToDownloadQuick.push(_curItem);
                        }
                        if (!availableInBasket(CurrentItemsInTheBasket, _filePath)) {
                            CurrentItemsInTheBasket.push(_curItem);
                        }
                    }
                    if (items.length > 0) {
                        $(document).data(o.BasketDataKeyQuickDownload, ItemsToDownloadQuick);
                        $(document).data(o.BasketDataKey, CurrentItemsInTheBasket);
                        window.quickCalled = false;
                        rebuildBasket();
                        if (currentView(basket) != "Thumbnail") {
                            var tbl = $("#filesListing").find("table");
                            toggleCheckBoxesAll(tbl, false);
                            toggleMainCheckbox(tbl, false);
                        }
                    } else if (exist) {
                        $.growlUI(getLocalizationKey("BasketFileAddedAlreadyText"), getLocalizationKey("BasketFileAddedAlreadyDetailsText"), o.GrowlTimeout, "growlError");
                        return;
                    } else {
                        $.growlUI(getLocalizationKey("BasketNothingSelectedToAddText"), getLocalizationKey("BasketNothingSelectedToAddDetailsText"), o.GrowlTimeout, "growlError");
                        return;
                    }
                }

                //Strip down emails
                function stripDownEmails(email) {
                    var simpleEmails = "";
                    if (email.indexOf(";") < 0) email = email.replace(/,/g, ";");
                    var emails = email.split(";");
                    for (var x = 0; x < emails.length; x++) {
                        var s = emails[x];
                        if (s.indexOf("<") >= 0 && s.indexOf(">") >= 0) {
                            s = s.substring(s.indexOf("<") + 1, s.indexOf(">")); //pull out the email in a pretty formatted version "Spink, Ben <ben@crushftp.com>"
                        }
                        s = $.trim(s); //remove white space
                        if (s == "") continue;
                        if ((s.indexOf("@") > 0 && s.lastIndexOf(".") > s.indexOf("@")) || s.indexOf("{") >= 0) simpleEmails += s + ",";
                    }
                    if (simpleEmails != "") simpleEmails = simpleEmails.substring(0, simpleEmails.length - 1);
                    return simpleEmails || email;
                }

                //Validate emails
                function validateEmail(email, strict, noMultiple) {
                    var indexStart = email.indexOf("{");
                    if(indexStart>=0 && email.indexOf("}")>indexStart){
                        return true;
                    }
                    email = $.trim(email);
                    var emails = [];
                    if(email.indexOf(",")>=0)
                    {
                      emails = email.split(",");
                    }
                    else if(email.indexOf(";")>=0)
                    {
                      emails = email.split(";");
                    }
                    var valid = false;
                    if(emails.length>0)
                    {
                      if(noMultiple)
                        return false;
                      valid = true;
                      for (var i = 0; i < emails.length; i++) {
                        if(!validateEmail(emails[i], true))
                          valid = false;
                      }
                    }
                    else{
                      if (strict) {
                          var re = /^(([^<>()\[\]\.,;:\s@\"]+(\.[^<>()\[\]\.,;:\s@\"]+)*)|(\".+\"))@(([^<>()[\]\.,;:\s@\"]+\.)+[^<>()[\]\.,;:\s@\"]{2,})$/i;
                          //http://stackoverflow.com/questions/46155/validate-email-address-in-javascript
                          valid = re.test(email);
                      } else {
                          valid = email.indexOf("@") > 0 && email.lastIndexOf(".") > email.indexOf("@");
                      }
                    }
                    return valid;
                }

                //Validate share form
                function validateShareForm() {
                    var validated = true;
                    //Loop through required fields
                    if ($("#shareUsername").is(":checked")) {
                        $("#shareOptionDiv").find(".validationFail").remove();
                        return true;
                    }
                    $("#shareOptionDiv").find(".required").each(function () {
                        var $elm = $(this);
                        $elm.parent().find("span.requiredField").remove();
                        if (($elm.is("#emailFrom") || $elm.is("#emailTo")) && !$("#sendEmail").is(":checked")) {
                            return;
                        }
                        if($elm.is("#emailTo") && ($.trim($("#emailCc").val())!="" || $.trim($("#emailBcc").val())!=""))
                        {
                            validated = true;
                        }
                        else if ($elm.val().length == 0) {
                            if (validated) {
                                $elm[0].focus();
                            }
                            if ($elm.is(".email")) {
                                $elm.after(" <span class='requiredField'>* <img src='" + o.ImageFilePath + "help.png'  alt='help' title='" + getLocalizationKey("ShareActionEmailValidationFailureHelpToolTip") + "' /></span>");
                                $elm.next().find("img").cluetip({
                                    splitTitle: '^',
                                    showTitle: false,
                                    width: 300,
                                    cluetipClass: 'default-ontop',
                                    positionBy: 'mouse',
                                    mouseOutClose: true,
                                    dropShadowSteps: 0,
                                    onShow: function () {
                                        $("#cluetip").css("z-index", "9999").css("width", "320px");
                                        var _offset = $elm.next().find("img").offset();
                                        var _left = _offset.left;
                                        if (_left) {
                                            $("#cluetip").css("left", _left + 20 + "px");
                                        }
                                    }
                                });
                            } else {
                                $elm.after(" <span class='requiredField'>*</span>");
                            }
                            validated = false;
                        }
                    });
                    //Validate emails
                    $("#shareOptionDiv").find(".email").each(function () {
                        var $elm = $(this);
                        if ($elm.parent().find("span.requiredField").length > 0 || (($elm.is("#emailFrom") || $elm.is("#emailTo") || $elm.is("#emailCc") || $elm.is("#emailBcc") || $elm.is("#emailReplyTo")) && !$("#sendEmail").is(":checked"))) {
                            return;
                        }
                        var val = $elm.val();
                        val = $.trim(val);
                        if (val.length > 0) {
                            val = stripDownEmails(val);
                            //if we are sharing to usernames, we don't validate anything. //TODO
                            if (!validateEmail(val, true, $elm.is("#emailFrom"))) {
                                $elm.after(" <span class='requiredField'>* <img src='" + o.ImageFilePath + "help.png'  alt='help' title='" + getLocalizationKey("ShareActionEmailValidationFailureHelpToolTip") + "' /></span>");
                                $elm.next().find("img").cluetip({
                                    splitTitle: '^',
                                    showTitle: false,
                                    width: 300,
                                    cluetipClass: 'default-ontop',
                                    positionBy: 'mouse',
                                    mouseOutClose: true,
                                    dropShadowSteps: 0,
                                    onShow: function () {
                                        $("#cluetip").css("z-index", "9999").css("width", "320px");
                                        var _offset = $elm.next().find("img").offset();
                                        var _left = _offset.left;
                                        if (_left) {
                                            $("#cluetip").css("left", _left + 20 + "px");
                                        }
                                    }
                                });
                                validated = false;
                            }
                        }
                    });
                    if(window.ShareItemExpiresInMaxDays)
                    {
                        var txtdays = $("#shareOptionDiv").find("#txtdays");
                        txtdays.closest("td").find("div.errormsg").hide();
                        if(txtdays.is(":visible"))
                        {
                            var days = parseInt(txtdays.val());
                            if(days == NaN)days=0;
                            if(days>window.ShareItemExpiresInMaxDays)
                            {
                                validated = false;
                                var txt = getLocalizationKey("ShareWindowExpiresInDaysValidationErrorText").replace("{days}", window.ShareItemExpiresInMaxDays);
                                txtdays.closest("td").find("div.errormsg").show().text(txt);
                            }
                        }
                    }
                    $("#shareOptionDiv").find(".validationFail").remove();
                    if (!validated) {
                        $("table:first", "#shareOptionDiv").before("<div style='padding:5px;margin:5px 0px; color:red;' class='validationFail'>" + getLocalizationKey("FormValidationFailText") + "</div>");
                    }
                    return validated;
                }

                function downloadSyncApp(appName)
                {
                    appName = appName || localizations.syncAppName || "CrushSync";
                    $("#syncAppNamePanel").remove();
                    var promptTemplate = "<div class='syncAppNamePanel'><h2>" + getLocalizationKey("SyncAppNameWindowHeaderText") + "</h2><br><div style='text-align:left;'><label>"+getLocalizationKey("SyncAppDownloadYourPassText")+"</label><input type='password' class='currentPass' style='width:300px;' /></div><br><div style='text-align:left;'><label>"+getLocalizationKey("SyncAppDownloadAdminPassText")+"</label><input type='password' class='appName' style='width:300px;' /></div><br><div class='cancelButton' style='float:right;margin-left:10px;'>" + getLocalizationKey("SyncAppNamePanelCancelLinkText") + "</div><div class='saveButton' style='float:right;'>" + getLocalizationKey("SyncAppNamePanelSaveLinkText") + "</div>";
                    $("body").append("<div id='syncAppNamePanel'>" + promptTemplate + "</div>");
                    var $NameBox = $("#syncAppNamePanel").hide();
                    $.blockUI({
                        message: $NameBox,
                        css: {
                            padding: '10px 10px 20px 30px',
                            'background-color': getPopupColor(true),
                            'border': "1px solid " + getPopupColor(),
                            '-webkit-border-radius': '10px',
                            '-moz-border-radius': '10px',
                            color: '#000',
                            opacity: 0.9,
                            top: 100,
                            left: '40%',
                            width: '305px'
                        },
                        onBlock : function()
                        {
                            $NameBox.parent().css("top","200px");
                            if($("div#filesBasket").dialog("isOpen"))
                            {
                                $(".blockOverlay").css("z-index", "1002");
                                $(".blockMsg").css("z-index", "1003");
                                $("div#filesBasket").parent().css("z-index", "1001");
                            }
                            stickyRelocate();
                        },
                        onUnblock : function()
                        {
                            if($("div#filesBasket").dialog("isOpen"))
                            {
                                $("div#filesBasket").parent().css("z-index", "1003");
                            }
                            stickyRelocate();
                        }
                    });
                    $NameBox.find(".currentPass").val("").focus();
                    $NameBox.find(".cancelButton").unbind().click(
                       function () {
                            $.unblockUI();
                            $("#syncAppNamePanel").remove();
                            if($("div#filesBasket").dialog("isOpen"))
                            {
                                $("div#filesBasket").parent().css("z-index", "1003");
                            }
                    });
                    $NameBox.find(".saveButton").unbind().click(
                    function () {
                        var newName =  crushFTPTools.encodeURILocal($NameBox.find(".appName").val());
                        var curPass = crushFTPTools.encodeURILocal($NameBox.find(".currentPass").val());
                        submitAction({
                            '#command': "downloadSyncAgent",
                            '#appname' : appName,
                            '#admin_pass': newName,
                            '#current_password': curPass,
                            '#os' : window.OSName,
                            '#random': Math.random()
                        });
                        $.growlUI(getLocalizationKey("DownloadStartedAlertTitleText"), '&nbsp;', o.GrowlTimeout);
                        if($("div#filesBasket").dialog("isOpen"))
                        {
                            $("div#filesBasket").parent().css("z-index", "1003");
                        }
                    });
                    $NameBox.find(".appName").unbind().keyup(
                    function (evt) {
                        var evt = (evt) ? evt : ((event) ? event : null);
                        if (evt.keyCode == 13) {
                            $NameBox.find(".saveButton").click();
                            return false;
                        } else if (evt.keyCode == 27) {
                            $NameBox.find(".cancelButton").click();
                            return false;
                        }
                    });
                }

                function downloadCrushFTPDrive(appName)
                {
                    appName = appName || localizations.crushFTPDriveName || "CrushFTPDrive";
                    submitAction({
                        '#command': "downloadCrushFTPDrive",
                        '#appname' : appName,
                        '#os' : window.OSName,
                        '#random': Math.random()
                    });
                    $.growlUI(getLocalizationKey("DownloadStartedAlertTitleText"), '&nbsp;', o.GrowlTimeout);
                }

                function downloadAttachmentRedirector(appName)
                {
                    appName = appName || localizations.crushFTPDriveName || "AttachmentRedirector";
                    submitAction({
                        '#command': "downloadAttachmentRedirector",
                        '#appname' : appName,
                        '#os' : window.OSName,
                        '#random': Math.random()
                    });
                    $.growlUI(getLocalizationKey("DownloadStartedAlertTitleText"), '&nbsp;', o.GrowlTimeout);
                }

                //Change icon of selected files
                function changeIcon(context)
                {
                    var _fileName = "";
                    var el = false;
                    var basket = false;
                    if (context) {
                        el = currentContext();
                        if (el) {
                            var $curElem = $(el);
                            _fileName = unescape($curElem.find("a:first").attr("rel"));
                            basket = $curElem.hasClass("contextMenuItem");
                        }
                    }
                    var checkedFiles = [];
                    if(basket)
                    {
                        if (currentView(basket) == "Thumbnail") {
                            checkedFiles = $("#FileBasketList").find("li.fileBoxSelected:visible");
                        } else {
                            checkedFiles = $("#FileBasketList").find("input.chkBox:visible:checked");
                        }
                    }
                    else
                    {
                        if (currentView() == "Thumbnail") {
                            checkedFiles = $("#filesContainerDiv").find("li.fileBoxSelected:visible");
                        } else {
                            checkedFiles = $("#filesListing").find("input.chkBox:visible:checked");
                        }
                    }
                    checkedFiles.each(function () {
                        if(!_fileName)
                        {
                            var parentElem = $(this);
                            if (currentView(basket) != "Thumbnail") {
                                parentElem = $(this).closest("tr");
                            }
                            var filePath = unescape(parentElem.find("a").attr("rel"));
                            el = parentElem;
                            filePath = unescape(filePath.replace("//", "/"));
                            _fileName = filePath;
                        }
                    });

                    if(!_fileName)
                        return;
                    var $elem = $("#iconChangeDiv");
                    $elem.find("#c2f").val(crushFTPTools.getCrushAuth());
                    $.blockUI({
                        message: $elem,
                        css: {
                            width: '400px',
                            padding: '15px',
                            'margin-left': '-200px',
                            left: '50%',
                            position: 'absolute',
                            top: '27%',
                            '-webkit-border-radius': '10px',
                            '-moz-border-radius': '10px',
                            opacity: 1,
                            'background-color': getPopupColor(true),
                            'border': "1px solid " + getPopupColor()
                        },
                        onBlock: function(){
                            $elem.find("input.variable").val("");
                            var rootPath = "";
                            if (currentView(basket) != "Thumbnail") {
                                rootPath = $(el).closest("tr").attr("rel");
                            }
                            else {
                                rootPath = $(el).find("div.imgTitle").find("a").attr("rel");
                            }
                            $elem.find("input#uploadPath").val(rootPath);
                            $elem.find("input#changeIconItem").val(_fileName);
                            $("#changeIconWindowSelectedFiles", $elem).html("<br />" + crushFTPTools.textEncode(_fileName) + "<br/>");
                            stickyRelocate();
                        },
                        onUnblock : stickyRelocate
                    });
                    if($("div#filesBasket").dialog("isOpen"))
                        $(".blockMsg").css("z-index", 1002);
                    $("a.cancel", $elem).unbind().click(function () {
                        $.unblockUI();
                    });
                    $("a.update", $elem).unbind().click(function () {
                        if($elem.find("input[type='file']").val()=="")
                        {
                            alert(getLocalizationKey("ChangeIconFileSelectAlertText"));
                            return false;
                        }
                        else
                        {
                            $("#iframeUploadIcon").unbind().bind("load", function(){
                                //refreshPreivewIcon(el);
                                $(".refreshButton").click();
                            });
                            $elem.find("form").submit();
                            $.unblockUI();
                            selectDeselectAllItems(false, false, basket);
                        }
                    });
                }

                function refreshPreivewIcon(el)
                {
                    $(el).attr("preview","1");
                    if (currentView() == "Thumbnail") {
                        var _title = $(el).attr("title");
                        var fileLink = $(el).find("a.imgLink");
                        var filePath = fileLink.attr("href");
                        if(_title.indexOf("command=getPreview")>=0)
                        {
                            _title = _title.replace("command=getPreview", "command=getPreview&random=" + Math.random()+"&c2f="+crushFTPTools.getCrushAuth());
                        }
                        else
                        {
                            _title = "<img src=\"" + o.ajaxCallURL + "?command=getPreview&size=3&path=" + crushFTPTools.encodeURILocal(unescape(filePath)) + "&random="+Math.random()+"&frame=1"+"&c2f="+crushFTPTools.getCrushAuth() + "\" border=\"0\" />" + _title;
                        }
                        $(el).attr("title", _title);
                        vtip($(el));
                    }
                    zoomInOutView(zoomSlider.slider("value"), el);
                }

                window.quickShareFile = function(context, files, multiple, fileNames, defaultVals, elem)
                {
                    var el = elem || false;
                    var basket = false;
                    if (context) {
                        el = currentContext();
                        if(el)
                            basket = el.hasClass("contextMenuItem");
                    }
                    var _fileName = "";
                    if (el) {
                        _fileName = unescape($(el).find("a:first").attr("rel"));
                    }
                    var fileName = _fileName;
                    var multipleFiles = false;
                    var fileNameOnly = "";
                    if(files)
                    {
                        fileName = files;
                        multipleFiles = multiple;
                        fileNameOnly = fileNames;
                    }
                    else
                    {
                        if(_fileName){
                            var name = _fileName.substring(_fileName.lastIndexOf("/", _fileName.length - 2) + 1);
                            if(name)
                                fileNameOnly = name + "\r\n";
                        }
                        var selectedFiles = [];
                        var itemList = [];
                        //If everything is selecetd, share a folder
                        if (window.listingInfo.selectedEverything) {
                            var listItems = window.curTreeItems;
                            if (window.listingInfo.filtered) {
                                listItems = window.matchedItems;
                            }
                            for (var i = 0; i < listItems.length; i++) {
                                var curItem = listItems[i];
                                if (!itemList.has(curItem.name)) {
                                    itemList.push(curItem.name);
                                    fileName += curItem.name;
                                    fileNameOnly += curItem.name.substring(curItem.name.lastIndexOf("/", curItem.name.length - 2) + 1) + "\r\n";
                                    if (i + 1 < listItems.length) {
                                        fileName += "\r\n";
                                    }
                                }
                            }
                        } else {
                            //Else select chosen items
                            if(basket)
                            {
                                if (currentView(basket) == "Thumbnail") {
                                    selectedFiles = $("#FileBasketList").find("li.fileBoxSelected:visible");
                                } else {
                                    selectedFiles = $("#FileBasketList").find("input.chkBox:visible:checked");
                                }
                            }
                            else
                            {
                                if (currentView() == "Thumbnail") {
                                    selectedFiles = $("#filesContainerDiv").find("li.fileBoxSelected:visible");
                                } else {
                                    selectedFiles = $("#filesListing").find("input.chkBox:visible:checked");
                                }
                            }
                            if (selectedFiles.length > 0) {
                                if(_fileName)
                                    fileName = _fileName + "\r\n";
                                selectedFiles.each(function (index) {
                                    var file = "";
                                    if (currentView(basket) != "Thumbnail") {
                                        file = unescape($(this).closest("tr").find("a:first").attr("rel"));
                                        var prnt = $(this).closest("tr").attr("rel");
                                        if($("#filesListing").find(".columnName").find("a[rel='"+prnt+"']").closest("tr").find("input:checked").length>0)
                                            file = false;
                                    } else {
                                        file = unescape($(this).find("a:first").attr("rel"));
                                    }
                                    if (file && file != _fileName && !itemList.has(file)) {
                                        itemList.push(file);
                                        fileName += file;
                                        fileNameOnly += file.substring(file.lastIndexOf("/", file.length - 2) + 1) + "\r\n";
                                        if (index + 1 < selectedFiles.length) {
                                            fileName += "\r\n";
                                        }
                                    }
                                });
                            }
                            if (selectedFiles.length > 1) {
                                multipleFiles = true;
                            }
                        }
                    }
                    var destinationPath = unescape(window.location.toString().split("#")[0]);
                    if (fileName.length == 0) {
                        $.growlUI(getLocalizationKey("ShareNothingSelectedGrowlText"), getLocalizationKey("NothingSelectedGrowlText"), o.GrowlTimeout, "growlError");
                        return;
                    }
                    if(window.onBeforeQuickShare){
                        window.onBeforeQuickShare(function(params){
                            if(params){
                                defaultVals = $.extend(defaultVals, params);
                            }
                            performShareFormSubmit(destinationPath, fileName, true, fileNameOnly, defaultVals);
                        });
                    }
                    else{
                        performShareFormSubmit(destinationPath, fileName, true, fileNameOnly, defaultVals);
                    }
                }

                window.customEvent = function(context, params){
                    function sendCustomEvent(itms)
                    {
                        loading.show(true);
                        var obj = {
                            command: "customEvent",
                            random: Math.random(),
                            c2f : crushFTPTools.getCrushAuth()
                        };
                        for(var item in context)
                        {
                            if(item == "paths" && context[item] == "{files}")
                            {
                                obj.paths = itms.join("|");
                            }
                            else
                            {
                                obj[item] = context[item];
                            }
                        }
                        $.ajax({
                            type: "POST",
                            url: "/WebInterface/function/",
                            data: obj,
                            async: true,
                            success: function (data) {
                                loading.hide();
                                $.growlUI(getLocalizationKey("CustomEventCallSuccessTitle"), getLocalizationKey("CustomEventCallSuccessDesc"), 3000);
                            },
                            error : function(){
                                loading.hide();
                                $.growlUI(getLocalizationKey("CustomEventCallFailureTitle"), getLocalizationKey("CustomEventCallFailureDesc"), 3000, "growlError");
                            }
                        });
                    }
                    if(context["paths"] && context["paths"] != "{files}")
                    {
                        sendCustomEvent();
                    }
                    else
                    {
                        window.customFileAction(context, false, function(context, itemsInSelection, fileName){
                            var itms = [];
                            var paths = fileName.split("\r\n");
                            for (var i = 0; i < paths.length; i++) {
                                itms.push(crushFTPTools.encodeURILocal(paths[i]));
                            }
                            sendCustomEvent(itms);
                        });
                    }
                }

                window.customFileActionProxy = function(method, context){
                    window.customFileAction(context, false, false, window["customFileActionCallback_"+method]);
                }

                window.customFileAction = function(context, item, customCallback, callbackMethod){
                    var callback;
                    if(typeof context == 'string' || context instanceof String)
                    {
                        callback = window[context];
                    }
                    else
                        callback = callbackMethod || window.customFileActionCallback;
                    if(customCallback)
                        callback = customCallback;
                    var el = false;
                    var basket = false;
                    if (context) {
                        el = currentContext();
                        if(el)
                            basket = el.hasClass("contextMenuItem");
                    }
                    var itemsInSelection = [];
                    if(item)
                        itemsInSelection.push(item);
                    var _fileName = "";
                    if (el) {
                        var isFolder;
                        var size, modified, data;
                        _fileName = unescape($(el).find("a:first").attr("rel"));
                        if (currentView(basket) != "Thumbnail") {
                            {
                                var prnt = $(el).closest("tr");
                                data = prnt.data("dataRow");
                                if(prnt.find(".fileTR").length==0)
                                    isFolder=true;
                            }
                        } else {
                            data = $(el).data("dataRow");
                            if(!$(el).hasClass("fileThumb"))
                                isFolder=true;
                        }
                        size = data.size;
                        modified = data.fulldate;
                        itemsInSelection.push({
                            name : _fileName,
                            type : isFolder ? "dir" : "file",
                            size : size,
                            date : modified,
                            preview : data.preview
                        });
                    }
                    var fileName = _fileName;
                    var multipleFiles = false;
                    var fileNameOnly = "";
                    if(_fileName){
                        var name = _fileName.substring(_fileName.lastIndexOf("/", _fileName.length - 2) + 1);
                        if(name)
                           fileNameOnly = name + "\r\n";
                    }
                    var selectedFiles = [];
                    var itemList = [];
                    //If everything is selecetd, share a folder
                    if (window.listingInfo.selectedEverything) {
                        var listItems = window.curTreeItems;
                        if (window.listingInfo.filtered) {
                            listItems = window.matchedItems;
                        }
                        for (var i = 0; i < listItems.length; i++) {
                            var curItem = listItems[i];
                            if (!itemList.has(curItem.name)) {
                                itemList.push(curItem.name);
                                fileName += curItem.name;
                                fileNameOnly += curItem.name.substring(curItem.name.lastIndexOf("/", curItem.name.length - 2) + 1) + "\r\n";
                                if (i + 1 < listItems.length) {
                                    fileName += "\r\n";
                                }
                                itemsInSelection.push({
                                    name : curItem.href_path,
                                    type : curItem.type.toLowerCase(),
                                    size : curItem.sizeFormatted,
                                    date : curItem.modified,
                                    preview : curItem.preview
                                });
                            }
                        }
                    } else {
                        //Else select chosen items
                        if(basket)
                        {
                            if (currentView(basket) == "Thumbnail") {
                                selectedFiles = $("#FileBasketList").find("li.fileBoxSelected:visible[shareable]");
                            } else {
                                selectedFiles = $("#FileBasketList").find("input.chkBox:visible:checked[shareable]");
                            }
                        }
                        else
                        {
                            if (currentView() == "Thumbnail") {
                                selectedFiles = $("#filesContainerDiv").find("li.fileBoxSelected:visible");
                            } else {
                                selectedFiles = $("#filesListing").find("input.chkBox:visible:checked");
                            }
                        }
                        if (selectedFiles.length > 0) {
                            if(_fileName.length>0)
                             fileName = _fileName + "\r\n";
                            selectedFiles.each(function (index) {
                                var file = "";
                                var isFolder = false;
                                var data;
                                if (currentView(basket) != "Thumbnail") {
                                    {
                                        var prnt = $(this).closest("tr");
                                        data = prnt.data("dataRow");
                                        file = unescape(prnt.find("a:first").attr("rel"));
                                        if(prnt.hasClass("dirItemTR"))
                                            isFolder=true;
                                    }
                                } else {
                                    data = $(this).data("dataRow");
                                    file = unescape($(this).find("a:first").attr("rel"));
                                    if(!$(this).hasClass("fileThumb"))
                                        isFolder=true;
                                }
                                if (file != _fileName && !itemList.has(file)) {
                                    itemList.push(file);
                                    itemsInSelection.push({
                                        name : file,
                                        type : isFolder ? "dir" : "file",
                                        size : data.size,
                                        date : data.fulldate,
                                        preview : data.preview
                                    });
                                    fileName += file;
                                    if(fileNameOnly.length>0)
                                        fileNameOnly += "\r\n";
                                    fileNameOnly += (file.substring(file.lastIndexOf("/", file.length - 2) + 1)) + "\r\n";
                                    if (index + 1 < selectedFiles.length) {
                                        fileName += "\r\n";
                                    }
                                }
                            });
                        }
                        if (selectedFiles.length > 1) {
                            multipleFiles = true;
                        }
                    }

                    if(itemsInSelection.length>0 && callback)
                    {
                        applyShareCustomizations();
                        callback(context, itemsInSelection, fileName, multipleFiles, fileNameOnly, item);
                    }
                }

                window.getSelectedItems = function(el, selectAll){
                    var basket = false;
                    if(el)
                        basket = el.hasClass("contextMenuItem");
                    var itemsInSelection = [];
                    var ignoreFiles = window.shareIgnoreFiles;
                    var ignoreFolders = window.shareIgnoreFolders;
                    function isValidShareItem(isFolder){
                        if(isFolder)
                        {
                            if(ignoreFolders)
                                return false;
                        }
                        else{
                            if(ignoreFiles)
                                return false;
                        }
                        return true;
                    }
                    var _fileName = "";
                    if (el) {
                        var isFolder;
                        var size, modified, data;
                        _fileName = unescape($(el).find("a:first").attr("rel"));
                        if (currentView(basket) != "Thumbnail") {
                            {
                                var prnt = $(el).closest("tr");
                                data = prnt.data("dataRow");
                                if(prnt.find(".fileTR").length==0)
                                    isFolder=true;
                            }
                        } else {
                            data = $(el).data("dataRow");
                            if(!$(el).hasClass("fileThumb"))
                                isFolder=true;
                        }
                        size = data.size;
                        modified = data.fulldate;
                        if(isValidShareItem(isFolder)){
                            itemsInSelection.push({
                                name : _fileName,
                                type : isFolder ? "dir" : "file",
                                size : size,
                                date : modified
                            });
                        }
                        else
                        {
                            _fileName = "";
                        }
                    }
                    var fileName = _fileName;
                    var multipleFiles = false;
                    var fileNameOnly = "";

                    if(_fileName){
                        var name = _fileName.substring(_fileName.lastIndexOf("/", _fileName.length - 2) + 1);
                        if(name)
                           fileNameOnly = name + "\r\n";
                    }
                    var selectedFiles = [];
                    var itemList = [];
                    //If everything is selecetd, share a folder
                    if (window.listingInfo.selectedEverything || selectAll) {
                        var listItems = window.curTreeItems;
                        if (window.listingInfo.filtered) {
                            listItems = window.matchedItems;
                        }
                        for (var i = 0; i < listItems.length; i++) {
                            var curItem = listItems[i];
                            if (!itemList.has(curItem.name) && isValidShareItem(isFolder)) {
                                itemList.push(curItem.name);
                                fileName += curItem.name;
                                fileNameOnly += curItem.name.substring(curItem.name.lastIndexOf("/", curItem.name.length - 2) + 1) + "\r\n";
                                if (i + 1 < listItems.length) {
                                    fileName += "\r\n";
                                }
                                itemsInSelection.push({
                                    name : curItem.href_path,
                                    type : curItem.type.toLowerCase(),
                                    size : curItem.sizeFormatted,
                                    date : curItem.modified
                                });
                            }
                        }
                    } else {
                        //Else select chosen items
                        if(basket)
                        {
                            if (currentView(basket) == "Thumbnail") {
                                selectedFiles = $("#FileBasketList").find("li.fileBoxSelected:visible[shareable]");
                            } else {
                                selectedFiles = $("#FileBasketList").find("input.chkBox:visible:checked[shareable]");
                            }
                        }
                        else
                        {
                            if (currentView() == "Thumbnail") {
                                selectedFiles = $("#filesContainerDiv").find("li.fileBoxSelected:visible");
                            } else {
                                selectedFiles = $("#filesListing").find("input.chkBox:visible:checked");
                                if (selectedFiles.length <= 0) {
                                    $(el).parent().find("input.chkBox:visible").attr("checked", "checked");
                                    selectedFiles = $("#filesListing").find("input.chkBox:visible:checked");
                                }
                            }
                        }
                        if (selectedFiles.length > 0) {
                            if(_fileName.length>0)
                             fileName = _fileName + "\r\n";
                            selectedFiles.each(function (index) {
                                var file = "";
                                var isFolder = false;
                                var data;
                                if (currentView(basket) != "Thumbnail") {
                                    {
                                        var prnt = $(this).closest("tr");
                                        data = prnt.data("dataRow");
                                        file = unescape(prnt.find("a:first").attr("rel"));
                                        if(prnt.hasClass("dirItemTR"))
                                            isFolder=true;
                                    }
                                } else {
                                    data = $(this).data("dataRow");
                                    file = unescape($(this).find("a:first").attr("rel"));
                                    if(!$(this).hasClass("fileThumb"))
                                        isFolder=true;
                                }
                                if (file != _fileName && !itemList.has(file) && isValidShareItem(isFolder)) {
                                    itemList.push(file);
                                    itemsInSelection.push({
                                        name : file,
                                        type : isFolder ? "dir" : "file",
                                        size : data.size,
                                        date : data.fulldate
                                    });
                                    fileName += file;
                                    if(fileNameOnly.length>0)
                                        fileNameOnly += "\r\n";
                                    fileNameOnly += (file.substring(file.lastIndexOf("/", file.length - 2) + 1)) + "\r\n";
                                    if (index + 1 < selectedFiles.length) {
                                        fileName += "\r\n";
                                    }
                                }
                            });
                        }
                    }
                    return itemsInSelection;
                }

                window.getAllItemsListBeingShared = function(itemsInSelection, mainCallback, filter)
                {
                    function fetchDirectoryContent(path, callback) {
                        var _path = ""
                        try{
                            _path = crushFTPTools.decodeURILocal(path);
                            _path = crushFTPTools.encodeURILocal(unescape(unescape(path)));
                        }
                        catch(ex)
                        {
                            _path = crushFTPTools.encodeURILocal(path);
                        }
                        if(path){
                            var obj = {
                                command: "getXMLListing",
                                format: "JSONOBJ",
                                path: _path,
                                random: Math.random()
                            };
                            obj.c2f = crushFTPTools.getCrushAuth();
                            $.ajax({
                                type: "POST",
                                url: o.ajaxCallURL,
                                data: obj,
                                async: true,
                                dataType: "json",
                                beforeSend: function(x) {
                                    if(x && x.overrideMimeType) {
                                        x.overrideMimeType("application/j-son;charset=UTF-8");
                                    }
                                },
                                success: function (data) {
                                    var fileItems = data.listing;
                                    var items = [];
                                    var i = 0;
                                    function addToList()
                                    {
                                        if(i>=fileItems.length)
                                        {
                                            callback(items);
                                            return;
                                        }
                                        var curItem = fileItems[i];
                                        if(path.lastIndexOf("/")!=path.length-1)
                                            path += "/";
                                        var obj = {
                                            name : path + curItem.name,
                                            type : curItem.type.toLowerCase(),
                                            date : curItem.modified,
                                            size : curItem.sizeFormatted
                                        };
                                        if(curItem.type.toLowerCase() == "dir")
                                        {
                                            fetchDirectoryContent(path + curItem.name, function(list){
                                                obj.items = list;
                                                items.push(obj);
                                                i++;
                                                addToList();
                                            });
                                        }
                                        else
                                        {
                                            if(filter)
                                            {
                                                if(obj.name.toLowerCase().endsWith(filter))
                                                    items.push(obj);
                                            }
                                            else
                                                items.push(obj);

                                            i++;
                                            addToList();
                                        }
                                    }
                                    addToList();
                                }
                            });
                        }
                    }

                    function buildShareItemList(itemsInSelection, callback) {
                        var i = 0;
                        var rootFiles = [];
                        function iterateItems(){
                            if(i>=itemsInSelection.length)
                            {
                                callback(itemsInSelection.concat(rootFiles));
                                return;
                            }
                            var curItem = itemsInSelection[i];
                            if(curItem.type == "dir"){
                                fetchDirectoryContent(curItem.name, function(items){
                                    curItem.items = items;
                                    i++;
                                    iterateItems();
                                });
                            }
                            else{
                                rootFiles.push(curItem);
                                i++;
                                iterateItems();
                            }
                        }
                        iterateItems();
                    }
                    loading.show(true);
                    buildShareItemList(itemsInSelection, function(filesName){
                        if(filesName){
                            var names = [];
                            var selectedItems = [];
                            var custItems = [];
                            function addItemToList(items, callback){
                                for (var i = 0; i < items.length; i++)
                                {
                                    if(!names.has(items[i].name)){
                                        if(items[i].items)
                                        {
                                            addItemToList(items[i].items);
                                        }
                                        if(items[i].type!="dir")
                                        {
                                            names.push(items[i].name);
                                            selectedItems.push(items[i]);
                                        }
                                        else
                                        {
                                            if(!filter)
                                                custItems.push(items[i]);
                                        }
                                    }
                                }
                                if(names.join && callback){
                                    var finalNames = [];
                                    for (var j = 0; j < selectedItems.length; j++) {
                                        var curItem = selectedItems[j];
                                        var date = "";
                                        if(curItem.date)
                                        {
                                            try{
                                                var format = window.customDateFormat || "mm/dd/yyyy";
                                                var timeFormat = window.customTimeFormat || "hh:nn:ss TT";
                                                timeFormat = timeFormat.replace(/mm/g, "nn");
                                                date = new Date(parseInt(curItem.date));
                                                if(date){
                                                    if(format.toLowerCase().indexOf("hh")<0)
                                                        date = date.format(format + " " + timeFormat);
                                                    else
                                                        date = date.format(format);
                                                }
                                                else
                                                    date = "";
                                            }catch(ex){
                                                date = "";
                                            }
                                        }
                                        finalNames.push(curItem.name + "    " + curItem.size + "    " + date);
                                        custItems.push(curItem);
                                    }
                                    callback(finalNames.sort().join("\r\n"), custItems);
                                }
                            }
                            addItemToList(filesName, function(names){
                                mainCallback(names, true, custItems);
                            });
                        }
                        else
                        {
                            mainCallback(fileNameOnly);
                        }
                        loading.hide();
                    });
                }

                //Share files
                window.shareFile = function(context, files, fileNames, multiple, fromBasket) {
                    var el = false;
                    var basket = false;
                    el = currentContext();
                    if(el)
                        basket = el.hasClass("contextMenuItem");
                    var isFolder = false;
                    if(el && el.length>0)
                    {
                        if(!el.hasClass("fileTR") && !el.hasClass("fileThumb"))
                            isFolder=true;
                    }
                    if(fromBasket)
                        basket = true;
                    var shareOptionDiv = $("#shareOptionDiv");
                    shareOptionDiv.html(shareOptionDiv.data("html"));
                    //Apply share window customizations
                    applyLocalizations();
                    applyShareCustomizations(context);

                    //Set mask to time field
                    $("#txtTime", shareOptionDiv).setMask("29:59").keypress(function () {
                        var currentMask = $(this).data('mask').mask;
                        var newMask = $(this).val().match(/^2.*/) ? "23:59" : "29:59";
                        if (newMask != currentMask) {
                            $(this).setMask(newMask);
                        }
                    });
                    var monthNames = ["Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"];
                    var lang = window.languageLoaded;
                    if(lang)
                    {
                        var itms = $.datepicker.regional[lang];
                        if(itms && itms.monthNamesShort)
                        {
                            monthNames = itms.monthNamesShort;
                        }
                    }
                    //Set mask to day field
                    $("#txtdays", shareOptionDiv).setMask("9999").keyup(function () {
                        var days = parseInt($(this).val());
                        if (days == NaN) days = 0;
                        if (days > 0) {
                            var myDate = new Date();
                            myDate.setDate(myDate.getDate() + days);
                            var prettyDate = (myDate.getMonth() + 1) + "/" + myDate.getDate() + "/" + myDate.getFullYear();
                            $("#txtDate", shareOptionDiv).val(prettyDate).attr("date", prettyDate);
                            if (window.Shareyyyymmdd) {
                                var mnth = myDate.getMonth() + 1;
                                prettyDate = myDate.getFullYear() + window.dateSeparator + mnth.leftZeroPad(2) + window.dateSeparator + myDate.getDate();
                                $("#txtDate", shareOptionDiv).val(prettyDate);
                            }
                            if (window.Shareddmmyyyy) {
                                var mnth = myDate.getMonth() + 1;
                                prettyDate = myDate.getDate() + window.dateSeparator + mnth.leftZeroPad(2) + window.dateSeparator + myDate.getFullYear();
                                $("#txtDate", shareOptionDiv).val(prettyDate);
                            }
                        }
                    });
                    var days = parseInt($("#txtdays", shareOptionDiv).val());
                    if (days == NaN) days = 0;
                    var myDate = new Date();
                    myDate.setDate(myDate.getDate() + days);
                    var prettyDate = (myDate.getMonth() + 1) + "/" + myDate.getDate() + "/" + myDate.getFullYear();
                    $("#txtDate", shareOptionDiv).val(prettyDate).attr("date", prettyDate);
                    if (window.Shareyyyymmdd) {
                        var mnth = myDate.getMonth() + 1;
                        prettyDate = myDate.getFullYear() + window.dateSeparator + mnth.leftZeroPad(2) + window.dateSeparator + myDate.getDate();
                    }
                    if (window.Shareddmmyyyy) {
                        var mnth = myDate.getMonth() + 1;
                        prettyDate = myDate.getDate() + window.dateSeparator + mnth.leftZeroPad(2) + window.dateSeparator + myDate.getFullYear();
                    }
                    var _nowDate = new Date();
                    _nowDate.setDate(_nowDate.getDate() + 1);
                    var _dateFormat = 'mm/dd/yy';
                    if (window.Shareyyyymmdd) {
                        _dateFormat = 'yyyy/mm/dd';
                    }
                    if (window.Shareddmmyyyy) {
                        _dateFormat = 'dd/mm/yyyy';
                    }
                    //Date picker
                    $("#txtDate", shareOptionDiv).val(prettyDate).datepicker({
                        dateFormat: _dateFormat,
                        showOn: 'both',
                        buttonImage: o.ImageFilePath +'calendar.png',
                        buttonImageOnly: true,
                        minDate: _nowDate
                    }).change(function () {
                        //Calculate date and time and show in days field
                        var selectedDate = $(this).datepicker("getDate").getTime();
                        var nowDate = new Date();
                        nowDate.setDate(nowDate.getDate() - 1);
                        nowDate = nowDate.getTime();
                        var diff = new Date();
                        diff.setTime(Math.abs(selectedDate - nowDate));
                        var timediff = diff.getTime();
                        var days = Math.floor(timediff / (1000 * 60 * 60 * 24));
                        $("#txtdays", shareOptionDiv).val(days);
                        var myDate = new Date();
                        myDate.setDate(myDate.getDate() + days);
                        var prettyDate = (myDate.getMonth() + 1) + "/" + myDate.getDate() + "/" + myDate.getFullYear();
                        $("#txtDate", shareOptionDiv).val(prettyDate).attr("date", prettyDate);
                        if (window.Shareyyyymmdd) {
                            var mnth = myDate.getMonth() + 1;
                            prettyDate = myDate.getFullYear() + window.dateSeparator + mnth.leftZeroPad(2) + window.dateSeparator + myDate.getDate();
                            $("#txtDate", shareOptionDiv).val(prettyDate);
                        }
                        if (window.Shareddmmyyyy) {
                            var mnth = myDate.getMonth() + 1;
                            prettyDate = myDate.getDate() + window.dateSeparator + mnth.leftZeroPad(2) + window.dateSeparator + myDate.getFullYear();
                            $("#txtDate", shareOptionDiv).val(prettyDate);
                        }
                    });
                    $("#discourageEmailMessage", "#shareOptionDiv").hide();
                    setTimeout(function() {
                        //Default values and show fields based on values
                        if ($("input#advanced", shareOptionDiv).is(":checked")) {
                            $(".advanced", shareOptionDiv).show();
                        } else {
                            $(".advanced", shareOptionDiv).hide();
                        };
                    }, 10);
                    $("input#advanced", shareOptionDiv).click(function () {
                        if ($(this).is(":checked")) {
                            $(".advanced", shareOptionDiv).show();
                        } else {
                            $(".advanced", shareOptionDiv).hide();
                        }
                    });

                    $("input#ShareGeneratePass", shareOptionDiv).change(function(){
                        if($(this).is(":checked")){
                            $(".generateUP", shareOptionDiv).show();
                        }
                    });

                    if(window.discourageEmailsInInternalShares)
                    {
                        $("input#shareUsernames", shareOptionDiv).bind("keyup focus", function(){
                            var names = $.trim($(this).val()).split(",");
                            var hasEmail = false;
                            for (var i = 0; i < names.length; i++) {
                                if(validateEmail(names[i]))
                                    hasEmail = true;
                            }
                            if(hasEmail){
                                $("#discourageEmailMessage", "#shareOptionDiv").show();
                                return false;
                            }
                            else{
                                $("#discourageEmailMessage", "#shareOptionDiv").hide();
                            }
                        }).bind("blur", function(){
                            $("#discourageEmailMessage", "#shareOptionDiv").hide();
                        });
                    }

                    $("input#ShareGeneratePassAuto", shareOptionDiv).change(function(){
                        if($(this).is(":checked")){
                            $(".generateUP", shareOptionDiv).hide();
                        }
                    }).attr("checked", "checked").trigger("change");

                    $("#shareGenerateUserPass", shareOptionDiv).click(function(){
                        var passwordLength = window.temp_accounts_length || 8;
                        var rand_U = generateRandomPassword(passwordLength);
                        var rand_P = generateRandomPassword(passwordLength);
                        $("#share_generate_user", shareOptionDiv).val(rand_U);
                        $("#share_generate_pass", shareOptionDiv).val(rand_P);
                    }).click();

                    $(".enterpriseFeature").hide();
                    if ($(document).data("crushftp_enterprise")) { //show enterprise features..some of these are in sharing panel
                        $(".enterpriseFeature").show();
                    }
                    else
                    {
                        $(".enterpriseFeature").remove();
                    }

                    if ($("input#shareUsername", shareOptionDiv).is(":checked")) {
                        $(".notShareUsername", shareOptionDiv).hide();
                        $(".isShareUsername", shareOptionDiv).show();
                    } else {
                        $(".notShareUsername", shareOptionDiv).show();
                        $(".isShareUsername", shareOptionDiv).hide();
                    }

                    $("input#shareUsername", shareOptionDiv).unbind().change(function () {
                        if ($(this).is(":checked")) {
                            $(".notShareUsername", shareOptionDiv).hide();
                            $(".isShareUsername", shareOptionDiv).show();
                        } else {
                            $(".notShareUsername", shareOptionDiv).show();
                            $(".isShareUsername", shareOptionDiv).hide();
                        }
                    });

                    if(window.shareWindowHidePermissions == true)
                    {
                        $(".permissions", shareOptionDiv).hide();
                    }

                    if(window.shareWindowDefaultPermissions)
                    {
                        var perms = window.shareWindowDefaultPermissions.split(",");
                        if(perms && perms.length>0)
                        {
                            for (var i = 0; i < perms.length; i++) {
                                var curPerm = $.trim(perms[i].toLowerCase());
                                if(curPerm=="download")
                                    $("#shareUsernamePermissionsDownload", shareOptionDiv).attr("checked", "checked");
                                else if(curPerm=="upload")
                                    $("#shareUsernamePermissionsUpload", shareOptionDiv).attr("checked", "checked");
                                else if(curPerm=="delete")
                                    $("#shareUsernamePermissionsDelete", shareOptionDiv).attr("checked", "checked");
                            };
                        }
                    }

                    if(window.shareWindowEnableUsernameLookup == true)
                    {
                        if(window.shareWindowEnableMultipleUsernameSelection)
                        {
                            $("input#shareMultipleSelectionQuick").attr("checked", "checked");
                        }

                        $("#selectAllAvailableUsers").unbind().click(function () {
                            $("#internalUsersAll").find("option").attr("selected", "selected");
                            return false;
                        });

                        $("#selectNoneAvailableUsers").unbind().click(function () {
                            $("#internalUsersAll").find("option").removeAttr("selected");
                            return false;
                        });

                        $("#selectAllSelectedUsers").unbind().click(function () {
                            $("#internalUsersSelected").find("option").attr("selected", "selected");
                            return false;
                        });

                        $("#selectNoneSelectedUsers").unbind().click(function () {
                            $("#internalUsersSelected").find("option").removeAttr("selected");
                            return false;
                        });

                        $("#filterAvailableUsers, #filterAddedUsers").unbind("keyup").keyup(function (evt) {
                            var evt = (evt) ? evt : ((event) ? event : null);
                            var phrase = $(this).val();
                            var elem = $(this);
                            var listToFilter = elem.is("#filterAvailableUsers") ? $("#internalUsersAll") : $("#internalUsersSelected").empty();
                            if(listToFilter.is("#internalUsersAll"))
                            {
                                var selected = window.availableInternalUsersCheck;
                                if(selected && selected.length>0)
                                {
                                    listToFilter.empty();
                                    var _selected = [];
                                    var usersSelected = $("#shareUsernames").val();
                                    if(usersSelected.length>0)
                                        _selected = usersSelected.split(",");
                                    for (var i = 0; i < selected.length; i++) {
                                        if(selected[i].id.length>0 && !_selected.has(selected[i].id))
                                        {
                                            listToFilter.append("<option _val='"+selected[i].id+"' value='"+selected[i].id+"'>"+selected[i].name+"</option>");
                                        }
                                    };
                                }
                            }
                            else
                            {
                                var selected = $("#shareUsernames").val().split(",");
                                if(selected && selected.length>0)
                                {
                                    for (var i = 0; i < selected.length; i++) {
                                        if(selected[i].length>0)
                                        {
                                            var name = selected[i], id = selected[i];
                                            for (var j = 0; j < window.availableInternalUsersCheck.length; j++) {
                                                if(id == window.availableInternalUsersCheck[j].id)
                                                {
                                                    name = window.availableInternalUsersCheck[j].name;
                                                    j = window.availableInternalUsersCheck.length;
                                                }
                                            };
                                            listToFilter.append("<option _val='"+id+"' value='"+id+"'>"+name+"</option>");
                                        }
                                    };
                                }
                            }
                            if(phrase && phrase.length>0)
                                listToFilter.find("option").not(":Contains('"+phrase+"')").remove();
                        });

                        $("#clearAvlUsers,#clearUsdFilter").unbind().click(function(){
                            if($(this).is("#clearAvlUsers"))
                                $("#filterAvailableUsers").val("").trigger('keyup');
                            else
                                $("#filterAddedUsers").val("").trigger('keyup');
                            return false;
                        });

                        $("#addSelectedUsers, #removeSelectedUsers").unbind().click(function(event) {
                            var selected = [];
                            var usersSelected = $("#shareUsernames").val();
                            if(usersSelected.length>0)
                                selected = usersSelected.split(",");
                            if($(this).is("#addSelectedUsers"))
                            {
                                $("#internalUsersAll").find(":selected").each(function() {
                                    var curUsr = $(this).attr("_val");
                                    if(curUsr.length>0 && !selected.has(curUsr))
                                        selected.push(curUsr);
                                });
                            }
                            else
                            {
                                $("#internalUsersSelected").find(":selected").each(function() {
                                    var curUsr = $(this).attr("_val");
                                    if(curUsr.length>0 && selected.has(curUsr))
                                    {
                                        selected.remove(selected.indexOf(curUsr));
                                    }
                                });
                            }
                            $("#shareUsernames").val(selected.join(","));
                            $("#filterAvailableUsers, #filterAddedUsers").trigger('keyup');
                            return false;
                        });

                        $("input#shareMultipleSelectionQuick").unbind().change(function () {
                            if ($(this).is(":checked")) {
                                $(this).closest("td").find(".basicSelect").hide();
                                var multipleSelect = $(this).closest("td").find(".multipleSelectOption").show();
                                $("#filterAvailableUsers, #filterAddedUsers").trigger('keyup');
                            } else {
                                var basicSelect = $(this).closest("td").find(".basicSelect").show();
                                $(this).closest("td").find(".multipleSelect, .multipleSelectOption").hide();
                                var selected = $("#shareUsernames").val().split(",");
                                var elem = $("#shareUsernames");
                                if(elem.data("autoCompleteAdded"))
                                {
                                    elem.tokenInput("clear");
                                    if(selected && selected.length>0)
                                    {
                                        for (var i = 0; i < selected.length; i++) {
                                            if(selected[i])
                                                elem.tokenInput("add", {id:selected[i], name:selected[i]});
                                        };
                                    }
                                }
                            }
                        }).trigger("change");

                        $("input#shareMultipleSelectionSelectAll").unbind().change(function () {
                            if ($(this).is(":checked")) {
                                $(this).closest("td").find(".multipleSelect:first").find("input").each(function(){
                                    $(this).attr("checked", "checked").trigger('change');
                                });
                            } else {
                                $(this).closest("td").find(".multipleSelect:first").find("input").each(function(){
                                    $(this).removeAttr("checked").trigger('change');
                                });
                            }
                        }).trigger("change");
                    }

                    $("input#externalUser", shareOptionDiv).change(function () {
                       $("input#shareUsername", shareOptionDiv).trigger("change");
                    });

                    var itemsInSelection = [];
                    var ignoreFiles = window.shareIgnoreFiles;
                    var ignoreFolders = window.shareIgnoreFolders;
                    function isValidShareItem(isFolder){
                        if(isFolder)
                        {
                            if(ignoreFolders)
                                return false;
                        }
                        else{
                            if(ignoreFiles)
                                return false;
                        }
                        return true;
                    }
                    var _fileName = "";
                    var sharingNotAllowedFor;
                    if (el) {
                        var isFolder;
                        var size, modified, data;
                        _fileName = unescape($(el).find("a:first").attr("rel"));
                        if (currentView(basket) != "Thumbnail") {
                            {
                                var prnt = $(el).closest("tr");
                                data = prnt.data("dataRow");
                                if(prnt.find(".fileTR").length==0)
                                    isFolder=true;
                            }
                        } else {
                            data = $(el).data("dataRow");
                            if(!$(el).hasClass("fileThumb"))
                                isFolder=true;
                        }
                        size = data.size;
                        modified = data.fulldate;
                        if(isValidShareItem(isFolder)){
                            itemsInSelection.push({
                                name : _fileName,
                                type : isFolder ? "dir" : "file",
                                size : size,
                                date : modified
                            });
                        }
                        else
                        {
                            sharingNotAllowedFor = isFolder ? "dir" : "file";
                            _fileName = "";
                        }
                    }
                    var fileName = _fileName;
                    var multipleFiles = false;
                    var hasFolder = false;
                    var fileNameOnly = "";
                    if(files)
                    {
                        fileName = files;
                        multipleFiles = multiple;
                        fileNameOnly = fileNames;
                    }
                    else
                    {
                        if(_fileName){
                            var name = _fileName.substring(_fileName.lastIndexOf("/", _fileName.length - 2) + 1);
                            if(name)
                               fileNameOnly = name + "\r\n";
                        }
                        var selectedFiles = [];
                        var itemList = [];
                        //If everything is selecetd, share a folder
                        if (window.listingInfo.selectedEverything) {
                            var listItems = window.curTreeItems;
                            if (window.listingInfo.filtered) {
                                listItems = window.matchedItems;
                            }
                            for (var i = 0; i < listItems.length; i++) {
                                var curItem = listItems[i];
                                if (!itemList.has(curItem.name) && isValidShareItem(isFolder)) {
                                    itemList.push(curItem.name);
                                    fileName += curItem.name;
                                    fileNameOnly += curItem.name.substring(curItem.name.lastIndexOf("/", curItem.name.length - 2) + 1) + "\r\n";
                                    if (i + 1 < listItems.length) {
                                        fileName += "\r\n";
                                    }
                                    itemsInSelection.push({
                                        name : curItem.href_path,
                                        type : curItem.type.toLowerCase(),
                                        size : curItem.sizeFormatted,
                                        date : curItem.modified
                                    });
                                }
                                else if(!isValidShareItem(isFolder))
                                {
                                    sharingNotAllowedFor = isFolder ? "dir" : "file";
                                }
                            }
                        } else {
                            //Else select chosen items
                            if(basket)
                            {
                                if (currentView(basket) == "Thumbnail") {
                                    selectedFiles = $("#FileBasketList").find("li.fileBoxSelected:visible[shareable]");
                                } else {
                                    selectedFiles = $("#FileBasketList").find("input.chkBox:visible:checked[shareable]");
                                }
                            }
                            else
                            {
                                if (currentView() == "Thumbnail") {
                                    selectedFiles = $("#filesContainerDiv").find("li.fileBoxSelected:visible");
                                } else {
                                    selectedFiles = $("#filesListing").find("input.chkBox:visible:checked");
                                    if (selectedFiles.length <= 0) {
                                        $(el).parent().find("input.chkBox:visible").attr("checked", "checked");
                                        selectedFiles = $("#filesListing").find("input.chkBox:visible:checked");
                                    }
                                }
                            }
                            if (selectedFiles.length > 0) {
                                if(_fileName.length>0)
                                 fileName = _fileName + "\r\n";
                                selectedFiles.each(function (index) {
                                    var file = "";
                                    var isFolder = false;
                                    var data;
                                    if (currentView(basket) != "Thumbnail") {
                                        {
                                            var prnt = $(this).closest("tr");
                                            data = prnt.data("dataRow");
                                            file = unescape(prnt.find("a:first").attr("rel"));
                                            if(prnt.hasClass("dirItemTR"))
                                                isFolder=true;
                                        }
                                    } else {
                                        data = $(this).data("dataRow");
                                        file = unescape($(this).find("a:first").attr("rel"));
                                        if(!$(this).hasClass("fileThumb"))
                                            isFolder=true;
                                    }
                                    if (file != _fileName && !itemList.has(file) && isValidShareItem(isFolder)) {
                                        itemList.push(file);
                                        itemsInSelection.push({
                                            name : file,
                                            type : isFolder ? "dir" : "file",
                                            size : data.size,
                                            date : data.fulldate
                                        });
                                        fileName += file;
                                        if(fileNameOnly.length>0)
                                            fileNameOnly += "\r\n";
                                        fileNameOnly += (file.substring(file.lastIndexOf("/", file.length - 2) + 1)) + "\r\n";
                                        if (index + 1 < selectedFiles.length) {
                                            fileName += "\r\n";
                                        }
                                    }
                                    else if(!isValidShareItem(isFolder))
                                    {
                                        sharingNotAllowedFor = isFolder ? "dir" : "file";
                                    }
                                    if(isFolder){
                                        hasFolder = true;
                                    }
                                });
                            }
                            if (selectedFiles.length > 1) {
                                multipleFiles = true;
                            }
                        }
                    }
                    if(sharingNotAllowedFor)
                    {
                        if(sharingNotAllowedFor == "dir")
                            $.growlUI(getLocalizationKey("ShareInvalidItemSelectedGrowlText"), getLocalizationKey("SharFoldersCantBeSharedGrowlText"), o.GrowlTimeout, "growlError");
                        else
                            $.growlUI(getLocalizationKey("ShareInvalidItemSelectedGrowlText"), getLocalizationKey("SharFilesCantBeSharedGrowlText"), o.GrowlTimeout, "growlError");
                    }
                    var destinationPath = unescape(window.location.toString().split("#")[0]);
                    if (fileName.length == 0) {
                        if(sharingNotAllowedFor)
                        {
                            if(sharingNotAllowedFor == "dir")
                                $.growlUI(getLocalizationKey("ShareInvalidItemSelectedGrowlText"), getLocalizationKey("SharFoldersCantBeSharedGrowlText"), o.GrowlTimeout, "growlError");
                            else
                                $.growlUI(getLocalizationKey("ShareInvalidItemSelectedGrowlText"), getLocalizationKey("SharFilesCantBeSharedGrowlText"), o.GrowlTimeout, "growlError");
                        }
                        else
                            $.growlUI(getLocalizationKey("ShareNothingSelectedGrowlText"), getLocalizationKey("NothingSelectedGrowlText"), o.GrowlTimeout, "growlError");
                        return;
                    }
                    performAction("shareOptionDiv");
                    if($("div#filesBasket").dialog("isOpen"))
                    {
                        $(".blockMsg").css("z-index", 1005);
                        $.cssRule({
                            ".blockMsg": [
                                ["z-index", "1005 !important"]
                                ]
                        });
                    }
                    if (!window.shareEmailBody) window.shareEmailBody = $("#emailBody").val();
                    if (o.buggyBrowser) {
                        window.shareEmailBody = window.shareEmailBody.replace(/([^>\r\n]?)(\r\n|\n\r|\r|\n)/g, '$1\r$2');
                    }
                    // var multipleFiles = false;
                    // var hasFolder = false;
                    if(window.shareAsMoveReference){
                        if(!multipleFiles && !hasFolder)
                            shareOptionDiv.find("input#chkMove").attr("checked", "checked");
                        else
                            shareOptionDiv.find("input#chkReference").attr("checked", "checked");
                    }
                    var emailBody = $("#emailBody");
                    if(window.shareIncludeAllRecursiveItemsList)
                    {
                        getAllItemsListBeingShared(itemsInSelection, function(names, flag){
                            if(flag)
                            {
                                emailBody.val(window.shareEmailBody.replace(/{files}/g, crushFTPTools.xmlEncode(names)));
                                if (!window.shareEmailBodyNoHTMLArea)
                                {
                                    try{
                                        emailBody.sceditor("instance").destroy();
                                    }catch(ex){}

                                    try{
                                        emailBody.sceditor({
                                            width: "100%",
                                            emoticonsEnabled : false,
                                            toolbar : "bold,italic,underline|orderedlist,bulletlist|left,center,right|color|image|link,unlink|font,size|maximize|source"
                                        });
                                    }catch(ex){}
                                }
                            }
                            else
                            {
                               emailBody.val(window.shareEmailBody.replace(/{files}/g, crushFTPTools.xmlEncode(names)));
                            }
                        });
                    }
                    else
                    {
                        emailBody.val(window.shareEmailBody.replace(/{files}/g, crushFTPTools.xmlEncode(fileNameOnly)));
                    }

                    if (!window.shareEmailBodyNoHTMLArea)
                    {
                        try{
                            emailBody.sceditor({
                                width: "100%",
                                emoticonsEnabled : false,
                                toolbar : "bold,italic,underline|orderedlist,bulletlist|left,center,right|color|image|link,unlink|font,size|maximize|source"
                            });
                        }
                        catch(ex){}
                    }
                    if(emailBody && emailBody.attr("readonly"))
                    {
                        try{
                            emailBody.sceditor("instance").destroy();
                        }catch(ex){}
                    }
                    var directLink = $("#frmShareWindow").find(".directLink").hide();
                    if (multipleFiles) {
                        $("legend.share-title", shareOptionDiv).html(getLocalizationKey("ShareWindowHeaderText"));
                    } else {
                        if (fileName.length >= o.MaximumLengthAllowedForSharingPopupHeaderString) {
                            $("legend.share-title", shareOptionDiv).text(fileName.substr(0, o.MaximumLengthAllowedForSharingPopupHeaderString) + "...");
                        } else {
                            $("legend.share-title", shareOptionDiv).text(fileName);
                        }
                        if(!isFolder)
                        {
                            if(typeof window.shareWindowDisableDirectLinkForFile != "undefined")
                            {
                                if(!window.shareWindowDisableDirectLinkForFile)
                                    directLink.show();
                            }
                            else
                                directLink.show();
                        }
                    }
                    window.directLinkonShare = directLink.is(":visible");
                    $("#txtFilesToShare").html(crushFTPTools.textEncode(fileName));
                    $("#btnSubmitShareAction", shareOptionDiv).click(function () {
                        if($("input#shareUsername", "#shareOptionDiv").is(":checked"))
                        {
                            if($.trim($("input#shareUsernames", "#shareOptionDiv").val()).length==0)
                            {
                                alert(getLocalizationKey("ShareInternalSelectUserWarning"));
                                return false;
                            }
                        }
                        else
                        {
                            if($(".shareUserPassGeneration", shareOptionDiv).is(":visible"))
                            {
                                var user = $.trim($("#share_generate_user", shareOptionDiv).val());
                                var pass = $.trim($("#share_generate_pass", shareOptionDiv).val());

                                if(user.length==0 || pass.length==0)
                                {
                                    alert(getLocalizationKey("ShareSelectUserPassWarning"));
                                    if(user.length==0)
                                        $("#share_generate_user", shareOptionDiv).focus();
                                    else
                                        $("#share_generate_pass", shareOptionDiv).focus();
                                    return false;
                                }
                            }
                        }
                        performShareFormSubmit(destinationPath, fileName, false, fileNameOnly);
                        //return false;
                    });
                    var shareThumbnail = $(document).data("shareThumbnail");
                    if (shareThumbnail) {
                        if (shareThumbnail == "true") {
                            shareOptionDiv.find("input#attach").attr("checked", "checked");
                        } else {
                            shareOptionDiv.find("input#attach").removeAttr("checked");
                        }
                    }
                    var shareFiles = $(document).data("shareFiles");
                    if (shareFiles) {
                        if (shareFiles == "true") {
                            shareOptionDiv.find("input#attach_real").attr("checked", "checked");
                        } else {
                            shareOptionDiv.find("input#attach_real").removeAttr("checked");
                        }
                    }
                    var shareAllowUploads = $(document).data("shareAllowUploads");
                    if (shareAllowUploads) {
                        if (shareAllowUploads == "true") {
                            shareOptionDiv.find("input#fullaccess").attr("checked", "checked");
                            shareOptionDiv.find("input#advanced").attr("checked", "checked").click();
                            shareOptionDiv.find("input#advanced").attr("checked", "checked");
                        }
                    }
                    var shareAllowUploadsPrivs = $(document).data("shareAllowUploadsPrivs");
                    if(shareAllowUploadsPrivs)
                    {
                        if(window.shareAllowPrivsModification)
                        {
                            var privOptions = $("#privsOptions", "#shareOptionDiv");
                            var privs = shareAllowUploadsPrivs.split(")(").join("|");
                            privs = privs.substr(0, privs.lastIndexOf(")"));
                            privs = privs.substr(1, privs.length);
                            privs = privs.split("|");
                            for(var i=0; i<=privs.length;i++)
                            {
                                if(privs[i])
                                {
                                    privOptions.find("#setup_" + privs[i]).attr("checked", "checked");
                                }
                            }
                        }
                        else{
                            shareOptionDiv.find("#fullaccessPrivs").text(shareAllowUploadsPrivs);
                        }
                    }
                    else{
                        if(window.shareAllowPrivsModification)
                        {
                            var privOptions = $("#privsOptions", "#shareOptionDiv");
                            privOptions.find("input").attr("checked", "checked");
                        }
                    }
                    var shareAdvanced = $(document).data("shareAdvanced");
                    if (shareAdvanced) {
                        if (shareAdvanced == "true") {
                            shareOptionDiv.find("input#advanced").attr("checked", "checked").click();
                            shareOptionDiv.find("input#advanced").attr("checked", "checked");
                        } else {
                            shareOptionDiv.find("input#advanced").removeAttr("checked").click();
                            shareOptionDiv.find("input#advanced").removeAttr("checked");
                        }
                    }
                    var maxLogins = $(document).data("ShareDefaultLoginsValue");
                    if(maxLogins)
                    {
                        shareOptionDiv.find("#logins").val(maxLogins);
                    }
                    var defaultShareMethod = $(document).data("defaultShareMethod");
                    if (defaultShareMethod) {
                        defaultShareMethod = defaultShareMethod.toLowerCase();
                        if (defaultShareMethod == "copy") {
                            shareOptionDiv.find("input#chkCopy").attr("checked", "checked");
                        } else if (defaultShareMethod == "reference") {
                            shareOptionDiv.find("input#chkReference").attr("checked", "checked");
                        } else if (defaultShareMethod == "move") {
                            shareOptionDiv.find("input#chkMove").attr("checked", "checked");
                        }
                    }
                    if(window.shareAllowPrivsModification){
                        shareOptionDiv.find("input#fullaccess").unbind("change.privs").bind("change.privs", function(){
                            if($(this).is(":checked"))
                                $(".fullaccess-privs",shareOptionDiv).show();
                            else
                                $(".fullaccess-privs",shareOptionDiv).hide();
                        }).trigger("change");
                    }
                    selectDeselectAllItems(false, false, basket);
                }

                // Share form submit action
                function performShareFormSubmit(destinationPath, fileName, quickShare, fileNames, defaultVals) {
                    if(window.useExtensionForAltMoviewPreview)
                    {
                        var files = fileName.split("\n");
                        for(var i=0;i<files.length;i++){
                            var _fileName = unescape(files[i]);
                            var ext = getFileExtension(_fileName);
                            if(ext && ext != window.useExtensionForAltMoviewPreview && isAltPreviewPresentForMovie(_fileName)){
                                fileName += "\r\n" + (_fileName.replace(ext,window.useExtensionForAltMoviewPreview));
                            }
                        }
                    }
                    $("#frmShareWindow").submit();
                    $(".mainProcessIndicator").show();
                    var obj = {};
                    var baseURL = document.location.href + "";
                    if (baseURL.indexOf("#") >= 0) baseURL = baseURL.substring(0, baseURL.indexOf("#"));
                    if(window.customShareLinkURL)
                    {
                        baseURL = window.customShareLinkURL;
                    }
                    if(quickShare)
                    {
                        applyShareCustomizations();
                        if (!window.quickShareEmailBody) window.quickShareEmailBody = $("textarea#emailBody", "#shareOptionDiv").val();
                        if (o.buggyBrowser) {
                            window.quickShareEmailBody = window.quickShareEmailBody.replace(/([^>\r\n]?)(\r\n|\n\r|\r|\n)/g, '$1\r$2');
                        }
                        $("textarea#emailBody", "#shareOptionDiv").val(window.quickShareEmailBody.replace(/{files}/g, fileNames));
                        window.ShareItemExpiresInDays = window.ShareItemExpiresInDays || 30;
                        var myDate = new Date();
                        myDate.setDate(myDate.getDate() + window.ShareItemExpiresInDays);
                        var prettyDate = (myDate.getMonth() + 1) + "/" + myDate.getDate() + "/" + myDate.getFullYear();
                        obj = {
                            command: "publish",
                            allowUploads: "false",
                            attach: "false",
                            hide_download : $("input#hide_download", "#shareOptionDiv").is(":checked"),
                            baseUrl: crushFTPTools.encodeURILocal(baseURL),
                            emailBcc: stripDownEmails($("input#emailBcc", "#shareOptionDiv").val()),
                            emailReplyTo: $("input#emailReplyTo", "#shareOptionDiv").val(),
                            emailBody: crushFTPTools.encodeURILocal($("textarea#emailBody", "#shareOptionDiv").val().replace('<span id="sceditor-end-marker" class="sceditor-selection sceditor-ignore" style="line-height: 0; display: none;"> </span><span id="sceditor-start-marker" class="sceditor-selection sceditor-ignore" style="line-height: 0; display: none;"> </span>',"").replace('<span id="sceditor-start-marker" class="sceditor-selection sceditor-ignore" style="line-height: 0; display: none;"> </span><span id="sceditor-end-marker" class="sceditor-selection sceditor-ignore" style="line-height: 0; display: none;"> </span>', "")),
                            share_comments: crushFTPTools.encodeURILocal($("textarea#share_comments", "#shareOptionDiv").val()),
                            emailCc: stripDownEmails($("input#emailCc", "#shareOptionDiv").val()),
                            emailFrom: $("input#emailFrom", "#shareOptionDiv").val(),
                            emailSubject: crushFTPTools.encodeURILocal($("input#emailSubject", "#shareOptionDiv").val()),
                            emailTo: stripDownEmails($("input#emailTo", "#shareOptionDiv").val()),
                            shareUsername: $("input#shareUsername", "#shareOptionDiv").is(":checked"),
                            shareUsernames: $("input#shareUsernames", "#shareOptionDiv").val(),
                            logins: $("#logins", "#shareOptionDiv").val(),
                            shareUsernamePermissions: "",
                            expire: prettyDate + " 23:59" ,
                            paths: crushFTPTools.encodeURILocal(fileName),
                            publishType: "reference",
                            sendEmail: window.quickShareSendEmail || "false"
                        };
                        if(window.altTempAccount){
                            var tempAccount = $("input#share_alt_tempaccount", "#shareOptionDiv").val();
                            if(tempAccount){
                                if(tempAccount.indexOf("TempAccount_")<0)
                                    tempAccount = "TempAccount_" + tempAccount;
                                obj.TempAccount = tempAccount;
                            }
                        }
                        else if(window.defaultAltTempAccount)
                        {
                            var tempAccount = window.defaultAltTempAccount;
                            if(tempAccount){
                                if(tempAccount.indexOf("TempAccount_")<0)
                                    tempAccount = "TempAccount_" + tempAccount;
                                obj.TempAccount = tempAccount;
                            }
                        }
                        if(defaultVals)
                        {
                            for (item in defaultVals) {
                                if(item == "emailBcc" || item == "emailCc" || item == "emailTo" || item == "emailFrom" || item == "emailReplyTo")
                                    defaultVals[item] = stripDownEmails(defaultVals[item]);
                                else if(item === "expire")
                                    defaultVals[item] = defaultVals[item];
                                else
                                    defaultVals[item] = crushFTPTools.encodeURILocal(defaultVals[item]);
                            }
                            obj = $.extend(obj, defaultVals);
                        }
                        var shareThumbnail = $(document).data("shareThumbnail");
                        if (shareThumbnail) {
                            if (shareThumbnail == "true") {
                                obj.attach = "true";
                            }
                        }
                        var shareAllowUploads = $(document).data("shareAllowUploads");
                        if (shareAllowUploads) {
                            if (shareAllowUploads == "true") {
                                obj.allowUploads = "true";
                                var shareAllowUploadsPrivs = $(document).data("shareAllowUploadsPrivs");
                                if(shareAllowUploadsPrivs){
                                    obj.shareUsernamePermissions = shareAllowUploadsPrivs;
                                }
                            }
                        }
                        if(window.hideFullAccessOption){
                            obj.shareUsernamePermissions = "";
                        }
                        var defaultShareMethod = $(document).data("defaultShareMethod");
                        if (defaultShareMethod) {
                            defaultShareMethod = defaultShareMethod.toLowerCase();
                            if (defaultShareMethod == "copy") {
                                obj.publishType = "copy";
                            } else if (defaultShareMethod == "reference") {
                                obj.publishType = "reference";
                            } else if (defaultShareMethod == "move") {
                                obj.publishType = "move";
                            }
                        }
                        if(defaultVals && defaultVals.forceDefaults){
                            obj.publishType = defaultVals.publishType || obj.publishType;
                            obj.allowUploads = defaultVals.allowUploads || obj.allowUploads;
                            obj.expire = defaultVals.expire || obj.expire;
                            delete defaultVals.forceDefaults;
                            delete obj.forceDefaults;
                        }
                        if(typeof window.shareWindowFlagDirectLinkForFile != "undefined")
                        {
                            obj.direct_link = !window.shareWindowFlagDirectLinkForFile;
                        }
                    }
                    else
                    {
                       //Validate form first
                        if (!validateShareForm()) {
                            $(".mainProcessIndicator").hide();
                            return false;
                        }
                        $("table:first", "#shareOptionDiv").after("<div class='wait' style='background-position: 0px -1px;margin:10px 0px;'>"+getLocalizationKey("loadingIndicatorText")+"</div>");
                        $("#shareOptionDiv").find(".closeButton").hide(500);
                        //Build share object and submit
                        var shareUsernamePermissionsStr = "(resume)(view)(slideshow)";
                        if ($("#shareUsernamePermissionsDownload", "#shareOptionDiv").is(":checked")) shareUsernamePermissionsStr += "(read)";
                        if ($("#shareUsernamePermissionsUpload", "#shareOptionDiv").is(":checked")) shareUsernamePermissionsStr += "(write)(rename)(makedir)";
                        if ($("#shareUsernamePermissionsDelete", "#shareOptionDiv").is(":checked")) shareUsernamePermissionsStr += "(delete)(deletedir)";
                        var shareBody = $("textarea#emailBody", "#shareOptionDiv").val().replace('<span id="sceditor-end-marker" class="sceditor-selection sceditor-ignore" style="line-height: 0; display: none;"> </span><span id="sceditor-start-marker" class="sceditor-selection sceditor-ignore" style="line-height: 0; display: none;"> </span>', "").replace('<span id="sceditor-start-marker" class="sceditor-selection sceditor-ignore" style="line-height: 0; display: none;"> </span><span id="sceditor-end-marker" class="sceditor-selection sceditor-ignore" style="line-height: 0; display: none;"> </span>', "");
                        if (o.buggyBrowser) {
                            shareBody = shareBody.replace(/([^>\r\n]?)(\r\n|\n\r|\r|\n)/g, '$1\r$2');
                        }
                        if(window.shareAllowPrivsModification)
                        {
                            if ($("input#advanced", "#shareOptionDiv").is(":checked") && $("input#fullaccess", "#shareOptionDiv").is(":checked")) {
                                var privsOptions = $("#privsOptions", "#shareOptionDiv");
                                var privs = "";
                                privsOptions.find("input:checked").each(function(item){
                                    privs += "(" + $(this).attr("id").replace("setup_","") + ")";
                                });
                                shareUsernamePermissionsStr = privs;
                            }
                        }
                        else if($("input#fullaccess", "#shareOptionDiv").is(":checked")){
                            shareUsernamePermissionsStr = "";
                        }
                        obj = {
                            command: "publish",
                            allowUploads: $("input#fullaccess", "#shareOptionDiv").is(":checked"),
                            attach: $("input#attach", "#shareOptionDiv").is(":checked"),
                            hide_download : $("input#hide_download", "#shareOptionDiv").is(":checked"),
                            attach_real: $("input#attach_real", "#shareOptionDiv").is(":checked"),
                            baseUrl: crushFTPTools.encodeURILocal(baseURL),
                            emailBcc: stripDownEmails($("input#emailBcc", "#shareOptionDiv").val()),
                            emailReplyTo: $("input#emailReplyTo", "#shareOptionDiv").val(),
                            emailBody: crushFTPTools.encodeURILocal(shareBody),
                            share_comments: crushFTPTools.encodeURILocal($("textarea#share_comments", "#shareOptionDiv").val()),
                            emailCc: stripDownEmails($("input#emailCc", "#shareOptionDiv").val()),
                            emailFrom: $("input#emailFrom", "#shareOptionDiv").val(),
                            emailSubject: crushFTPTools.encodeURILocal($("input#emailSubject", "#shareOptionDiv").val()),
                            emailTo: stripDownEmails($("input#emailTo", "#shareOptionDiv").val()),
                            shareUsername: $("input#shareUsername", "#shareOptionDiv").is(":checked"),
                            shareUsernames: $("input#shareUsernames", "#shareOptionDiv").val(),
                            shareUsernamePermissions: shareUsernamePermissionsStr,
                            expire: $("input#txtDate", "#shareOptionDiv").attr("date") + " " + $("input#txtTime", "#shareOptionDiv").val(),
                            paths: crushFTPTools.encodeURILocal(fileName),
                            publishType: $("input:checked", ".publishType").val(),
                            logins: $("#logins", "#shareOptionDiv").val(),
                            sendEmail: $("input#sendEmail", "#shareOptionDiv").is(":checked")
                        };
                        if(window.altTempAccount){
                            var tempAccount = $("input#share_alt_tempaccount", "#shareOptionDiv").val();
                            if(tempAccount){
                                if(tempAccount.indexOf("TempAccount_")<0)
                                    tempAccount = "TempAccount_" + tempAccount;
                                obj.TempAccount = tempAccount;
                            }
                        }
                        else if(window.defaultAltTempAccount)
                        {
                            var tempAccount = window.defaultAltTempAccount;
                            if(tempAccount){
                                if(tempAccount.indexOf("TempAccount_")<0)
                                    tempAccount = "TempAccount_" + tempAccount;
                                obj.TempAccount = tempAccount;
                            }
                        }
                        if(window.keywordsInShare)
                        {
                            obj.keywords = crushFTPTools.encodeURILocal($.trim($("#share_keywords", "#shareOptionDiv").val()));
                        }
                        if(($("input#ShareGeneratePass", "#shareOptionDiv").is(":visible") && $("input#ShareGeneratePass", "#shareOptionDiv").is(":checked")) || window.forceGeneratePasswordShare)
                        {
                            obj.temp_username = $.trim($("#share_generate_user", "#shareOptionDiv").val());
                            obj.temp_password = $.trim($("#share_generate_pass", "#shareOptionDiv").val());
                        }
                        $("table", "#shareOptionDiv").hide();
                        if(!obj.shareUsername)
                        {
                            var directLink = $("#frmShareWindow").find(".directLink");
                            if(window.directLinkonShare)
                            {
                                obj.direct_link = directLink.find("input").is(":checked");
                            }
                            else if(typeof window.shareWindowFlagDirectLinkForFile != "undefined")
                            {
                                obj.direct_link = !window.shareWindowFlagDirectLinkForFile;
                            }
                        }
                    }
                    obj.c2f = crushFTPTools.getCrushAuth();
                    if(window.splitShareRequests && !quickShare){
                        var emailsToShareTo = stripDownEmails($("input#emailTo", "#shareOptionDiv").val()).split(",").clean("");
                        var emailsToAll = stripDownEmails($("input#emailTo", "#shareOptionDiv").val());
                        var totalSharedTo = 0;
                        var lastRes;
                        function continueShare(cb){
                            if(emailsToShareTo.length<totalSharedTo){
                                cb();
                                return false;
                            }
                            var curEmail = emailsToShareTo[totalSharedTo];
                            if(!curEmail){
                                totalSharedTo+=1;
                                continueShare(cb);
                                return;
                            }
                            obj.emailTo = curEmail;
                            obj.to_all = emailsToAll;
                            $.ajax({
                                type: "POST",
                                url: o.ajaxCallURL,
                                data: obj,
                                success: function (response) {
                                    totalSharedTo+=1;
                                    continueShare(cb);
                                    lastRes = response;
                                },
                                error: function (err) {
                                    $(".mainProcessIndicator").hide();
                                    $.growlUI(getLocalizationKey("ProblemWhileSharingGrowlText"), getLocalizationKey("ProblemWhileSharingDescGrowlText"), o.GrowlTimeout, "growlError", o.GrowlWithCloseButton);
                                    totalSharedTo+=1;
                                    continueShare(cb);
                                }
                            });
                        }
                        continueShare(function(){
                            $(".mainProcessIndicator").hide();
                            var responseText = lastRes;
                            var username = '',
                                password = '',
                                message = '',
                                url = '';
                            try {
                                var msgs = responseText.getElementsByTagName("commandResult");
                                for (var x = 0; x < msgs.length; x++) {
                                    username += IE(msgs[x].getElementsByTagName("username")[0]).textContent;
                                    password += IE(msgs[x].getElementsByTagName("password")[0]).textContent;
                                    message += unescape(IE(msgs[x].getElementsByTagName("message")[0]).textContent);
                                    url += unescape(IE(msgs[x].getElementsByTagName("url")[0]).textContent);
                                }
                            } catch (ex) {}
                            var origMsg = message;
                            if(message.indexOf("ERROR:") == 0 && message.indexOf("email_failed")>0)
                            {
                                message = message.replace("ERROR:", "");
                            }
                            message = window.localizeServerMessage(message);
                            $(".publishStatusDialog").empty();
                            $("div.wait", "#shareOptionDiv").remove();
                            $("#shareOptionDiv").parent().find(".closeButton").show(500);
                            if(quickShare)
                            {
                                if (origMsg.indexOf("ERROR:") == 0 && origMsg.indexOf("email_failed")<0) {
                                    var msg = $("<div style='margin:10px 0px;line-height:25px;'>" + message + "<br/><br/>" + "</div>");
                                    msg.dialog({
                                        title : "Publish failed.",
                                        width : 500,
                                        buttons: { "OK": function() { $(this).dialog("close"); } },
                                        show: { effect: 'drop', direction: "up" },
                                        dialogClass : "publishStatusDialog",
                                        open : function(){
                                            msg.parent().find(".ui-dialog-buttonpane").css("background-color", "inherit");
                                        }
                                    });
                                } else {
                                    var msg = $("<div style='margin:0px 0px;line-height:35px;'>"+message+"<br><strong>" + getLocalizationKey("ShareActionCompleteUsernameText") + "</strong>" + username + "<br/><strong>" + getLocalizationKey("ShareActionCompletePasswordText") + "</strong>" + password + "<br/> <span class='linklabel'><strong>" + getLocalizationKey("ShareActionCompleteLinkText") + " :</strong></span> <a class='link' href=\"" + url + "\">" + url + "</a><br/> <a href='javascript:void(0);' class='copytoclip'>"+getLocalizationKey("ShareLinkCopyToClipboardText")+"</a> <a href='javascript:void(0);' class='copybodytoclip'>"+getLocalizationKey("ShareBodyCopyToClipboardText")+"</a>" + "</div>");
                                    if(window.shareWindowNoUserInfoAfterShare)
                                    {
                                        msg = $("<div style='margin:0px 0px;line-height:35px;'>"+message+"<br/> <span class='linklabel'><strong>" + getLocalizationKey("ShareActionCompleteLinkText") + " :</strong></span> <a class='link' href=\"" + url + "\">" + url + "</a><br/><a href='javascript:void(0);' class='copytoclip'>"+getLocalizationKey("ShareLinkCopyToClipboardText")+"</a> <a href='javascript:void(0);' class='copybodytoclip'>"+getLocalizationKey("ShareBodyCopyToClipboardText")+"</a>" + "</div>");
                                    }
                                    if(window.shareWindowNoOpenInEmail)
                                    {
                                        msg.find("a:first").hide();
                                    }
                                    if(window.callbackAfterShare)
                                        window.callbackAfterShare(message, msg);
                                    msg.dialog({
                                        title : getLocalizationKey("share_complete"),
                                        width : 500,
                                        height : 270,
                                        modal:true,
                                        buttons: { "OK": function() { $(this).dialog("close"); } },
                                        show: { effect: 'drop', direction: "up" },
                                        dialogClass : "publishStatusDialog",
                                        open : function(){
                                            msg.find("a").blur();
                                            msg.dialog('option', 'title', getLocalizationKeyExternal("share_complete"));
                                            msg.parent().find(".ui-dialog-buttonpane").css("background-color", "inherit");
                                            var emailBody="";
                                            if($(".publishStatusDialog").find("a[href^='mail']").length>0)
                                            {
                                                var text = decodeURIComponent($(".publishStatusDialog").find("a[href^='mail']:first").attr("href"));
                                                if(fileNames){
                                                    var sub = fileNames.substring(0, 250);
                                                    if(fileNames.length>250)
                                                        sub += "...";
                                                    text = (text).replace(/{files}/g, sub);
                                                }
                                                else{
                                                    var sub = fileName.substring(0, 250);
                                                    if(fileName.length>250)
                                                        sub += "...";
                                                    text = (text).replace(/{files}/g, sub);
                                                }
                                                text = text.replace(/\r/g, '%0D%0A');
                                                var _sub = text.split("&body=")[0];
                                                var _asub = decodeURIComponent(text.split("&body=")[1]);
                                                _asub = _asub.replace(/<\/?[^>]+(>|$)/g, ""); //remove tags
                                                text = _sub + "&body=" + encodeURIComponent(_asub);
                                                emailBody = _asub;
                                                $(".publishStatusDialog").find("a[href^='mail']").attr("href", text);
                                            }
                                            setTimeout(function(){
                                                msg.find("a.copytoclip").button().unbind().click(function(){
                                                    copyToClipboard(msg.find("a.link:visible").text());
                                                    //alert(getLocalizationKey("ShareLinkCopiedToClipboardText"));
                                                    $.growlUI(getLocalizationKey("ShareLinkCopiedToClipboardText"), "&nbsp;", o.GrowlTimeout);
                                                    msg.dialog("close");
                                                    return false;
                                                });
                                                msg.find("a.copybodytoclip").button().unbind().click(function(){
                                                    copyToClipboard(emailBody);
                                                    $.growlUI(getLocalizationKey("ShareEmailCopiedToClipboardText"), "&nbsp;", o.GrowlTimeout);
                                                    msg.dialog("close");
                                                    return false;
                                                });
                                            }, 100);

                                            if(window.quickShareOpenEmailClient)
                                            {
                                                if($(".publishStatusDialog").find("a[href^='mail']").length>0)
                                                {
                                                    $(".publishStatusDialog").find("a[href^='mail']:first").get(0).click();
                                                    msg.dialog("close");
                                                    $.growlUI(getLocalizationKey("share_complete"), "&nbsp;", o.GrowlTimeout);
                                                }
                                            }
                                            if(window.quickShareDisableNotificationPopup)
                                            {
                                                msg.dialog("close");
                                            }
                                        },
                                        resizable: false
                                    });
                                }
                            }
                            else
                            {
                                if(origMsg.indexOf("Denied") == 0)
                                {
                                    alert(getLocalizationKey("ShareInternalSelectUserDeniedMessage"));
                                    $("table", "#shareOptionDiv").show();
                                }
                                else if (origMsg.indexOf("ERROR:") == 0 && origMsg.indexOf("email_failed")<0) {
                                    $("table:first", "#shareOptionDiv").after("<div class='shareCompleted' style='margin:10px 0px;line-height:25px;'>" + message + "<br/><br/><input style='float:right;margin-bottom:10px;padding:2px 20px;' type=\"submit\" value=\"" + getLocalizationKey("ShareActionCompleteOkButtonText") + "\" onclick=\"$.unblockUI(); return false;\" />" + "</div>");
                                } else {
                                    if ($("input#shareUsername", "#shareOptionDiv").is(":checked"))
                                    {
                                        $("table:first", "#shareOptionDiv").after("<div class='shareCompleted' style='margin:10px 0px;line-height:25px;'>" + message + "<br/>" + getLocalizationKey("ShareActionCompleteShareUsernamesText") + "<br/>" + $("input#shareUsernames", "#shareOptionDiv").val() + "<br/><input style='float:right;margin-bottom:10px;padding:2px 20px;' type=\"submit\" value=\"" + getLocalizationKey("ShareActionCompleteOkButtonText") + "\" onclick=\"$.unblockUI(); return false;\" />" + "</div>");

                                        if(window.shareWindowNoOpenInEmail)
                                        {
                                            $("table:first", "#shareOptionDiv").next().find("a:first").hide();
                                        }
                                    }
                                    else
                                    {
                                        if(window.shareWindowNoUserInfoAfterShare)
                                        {
                                            $("table:first", "#shareOptionDiv").after("<div class='shareCompleted' style='margin:10px 0px;line-height:25px;'>" + message + "<br/> <span class='linklabel'>" + getLocalizationKey("ShareActionCompleteLinkText") + "</span> <a class='link' href='" + url + "'>" + url + "</a><br/><br/><a href='javascript:void(0);' class='copytoclip'>"+getLocalizationKey("ShareLinkCopyToClipboardText")+"</a>  <a href='javascript:void(0);' class='copybodytoclip'>"+getLocalizationKey("ShareBodyCopyToClipboardText")+"</a><br/><input style='float:right;margin-bottom:10px;padding:2px 20px;' type=\"submit\" value=\"" + getLocalizationKey("ShareActionCompleteOkButtonText") + "\" onclick=\"$.unblockUI(); return false;\" />" + "</div>");
                                        }
                                        else
                                        {
                                            $("table:first", "#shareOptionDiv").after("<div class='shareCompleted' style='margin:10px 0px;line-height:25px;'>" + message + "<br/>" + getLocalizationKey("ShareActionCompleteUsernameText") + username + "<br/>" + getLocalizationKey("ShareActionCompletePasswordText") + password + "<br/> <span class='linklabel'>" + getLocalizationKey("ShareActionCompleteLinkText") + "</span> <a class='link' href='" + url + "'>" + url + "</a><br/><br/><a href='javascript:void(0);' class='copytoclip'>"+getLocalizationKey("ShareLinkCopyToClipboardText")+"</a>  <a href='javascript:void(0);' class='copybodytoclip'>"+getLocalizationKey("ShareBodyCopyToClipboardText")+"</a><br/><br/><input style='float:right;margin-bottom:10px;padding:2px 20px;' type=\"submit\" value=\"" + getLocalizationKey("ShareActionCompleteOkButtonText") + "\" onclick=\"$.unblockUI(); return false;\" />" + "</div>");
                                        }
                                        if(window.shareWindowNoOpenInEmail)
                                        {
                                            $("table:first", "#shareOptionDiv").next().find("a:first").hide();
                                        }
                                    }
                                    var emailBody = "";
                                    if($("#shareOptionDiv").find("a[href^='mail']").length>0)
                                    {
                                        var text = decodeURIComponent($("#shareOptionDiv").find("a[href^='mail']:first").attr("href"));
                                        if(fileNames){
                                            var sub = fileNames.substring(0, 250);
                                            if(fileNames.length>250)
                                                sub += "...";
                                            text = (text).replace(/{files}/g, sub);
                                        }
                                        else{
                                            var sub = fileName.substring(0, 250);
                                            if(fileName.length>250)
                                                sub += "...";
                                            text = (text).replace(/{files}/g, sub);
                                        }
                                        text = text.replace(/\r/g, '%0D%0A');
                                        var _sub = text.split("&body=")[0];
                                        var _asub = decodeURIComponent(text.split("&body=")[1]);
                                        _asub = _asub.replace(/<\/?[^>]+(>|$)/g, ""); //remove tags
                                        text = _sub + "&body=" + encodeURIComponent(_asub);
                                        emailBody = _asub;
                                        $("#shareOptionDiv").find("a[href^='mail']").attr("href", text);
                                    }
                                    if(window.normalShareOpenEmailClient)
                                    {
                                        if($("#shareOptionDiv").find("a[href^='mail']").length>0)
                                        {
                                            $("#shareOptionDiv").find("a[href^='mail']:first").get(0).click();
                                        }
                                    }
                                    if(window.hideShareResultLink)
                                    {
                                        $("table:first", "#shareOptionDiv").next().find("a:last").hide().prev().hide();
                                        $(".shareCompleted").contents().filter(function(){return( this.nodeType === 3 );}).last().replaceWith("");
                                    }
                                    if(window.quickShareDisableNotificationPopup)
                                    {
                                        $.unblockUI();
                                    }
                                    setTimeout(function(){
                                        $(".shareCompleted").find("a.copytoclip").button().unbind().click(function(){
                                            copyToClipboard($(".shareCompleted").find("a.link").text());
                                            $.growlUI(getLocalizationKey("ShareLinkCopiedToClipboardText"), "&nbsp;", o.GrowlTimeout);
                                            return false;
                                        });
                                        $(".shareCompleted").find("a.copybodytoclip").button().unbind().click(function(){
                                            copyToClipboard(emailBody);
                                            $.growlUI(getLocalizationKey("ShareEmailCopiedToClipboardText"), "&nbsp;", o.GrowlTimeout);
                                            return false;
                                        });
                                    }, 100);
                                }
                            }
                        });
                    }
                    else{
                        $.ajax({
                            type: "POST",
                            url: o.ajaxCallURL,
                            data: obj,
                            success: function (response) {
                                $(".mainProcessIndicator").hide();
                                var responseText = response;
                                var username = '',
                                    password = '',
                                    message = '',
                                    url = '';
                                try {
                                    var msgs = responseText.getElementsByTagName("commandResult");
                                    for (var x = 0; x < msgs.length; x++) {
                                        username += IE(msgs[x].getElementsByTagName("username")[0]).textContent;
                                        password += IE(msgs[x].getElementsByTagName("password")[0]).textContent;
                                        message += unescape(IE(msgs[x].getElementsByTagName("message")[0]).textContent);
                                        url += unescape(IE(msgs[x].getElementsByTagName("url")[0]).textContent);
                                    }
                                } catch (ex) {}
                                var origMsg = message;
                                if(message.indexOf("ERROR:") == 0 && message.indexOf("email_failed")>0)
                                {
                                    message = message.replace("ERROR:", "");
                                }
                                message = window.localizeServerMessage(message);
                                $(".publishStatusDialog").empty();
                                $("div.wait", "#shareOptionDiv").remove();
                                $("#shareOptionDiv").parent().find(".closeButton").show(500);
                                if(quickShare)
                                {
                                    if (origMsg.indexOf("ERROR:") == 0 && origMsg.indexOf("email_failed")<0) {
                                        var msg = $("<div style='margin:10px 0px;line-height:25px;'>" + message + "<br/><br/>" + "</div>");
                                        msg.dialog({
                                            title : "Publish failed.",
                                            width : 500,
                                            buttons: { "OK": function() { $(this).dialog("close"); } },
                                            show: { effect: 'drop', direction: "up" },
                                            dialogClass : "publishStatusDialog",
                                            open : function(){
                                                msg.parent().find(".ui-dialog-buttonpane").css("background-color", "inherit");
                                            }
                                        });
                                    } else {
                                        var msg = $("<div style='margin:0px 0px;line-height:35px;'>"+message+"<br><strong>" + getLocalizationKey("ShareActionCompleteUsernameText") + "</strong>" + username + "<br/><strong>" + getLocalizationKey("ShareActionCompletePasswordText") + "</strong>" + password + "<br/> <span class='linklabel'><strong>" + getLocalizationKey("ShareActionCompleteLinkText") + " :</strong></span> <a class='link' href=\"" + url + "\">" + url + "</a><br/> <a href='javascript:void(0);' class='copytoclip'>"+getLocalizationKey("ShareLinkCopyToClipboardText")+"</a> <a href='javascript:void(0);' class='copybodytoclip'>"+getLocalizationKey("ShareBodyCopyToClipboardText")+"</a>" + "</div>");
                                        if(window.shareWindowNoUserInfoAfterShare)
                                        {
                                            msg = $("<div style='margin:0px 0px;line-height:35px;'>"+message+"<br/> <span class='linklabel'><strong>" + getLocalizationKey("ShareActionCompleteLinkText") + " :</strong></span> <a class='link' href=\"" + url + "\">" + url + "</a><br/><a href='javascript:void(0);' class='copytoclip'>"+getLocalizationKey("ShareLinkCopyToClipboardText")+"</a> <a href='javascript:void(0);' class='copybodytoclip'>"+getLocalizationKey("ShareBodyCopyToClipboardText")+"</a>" + "</div>");
                                        }
                                        if(window.shareWindowNoOpenInEmail)
                                        {
                                            msg.find("a:first").hide();
                                        }
                                        if(window.callbackAfterShare)
                                            window.callbackAfterShare(message, msg);
                                        msg.dialog({
                                            title : getLocalizationKey("share_complete"),
                                            width : 500,
                                            height : 270,
                                            modal:true,
                                            buttons: { "OK": function() { $(this).dialog("close"); } },
                                            show: { effect: 'drop', direction: "up" },
                                            dialogClass : "publishStatusDialog",
                                            open : function(){
                                                msg.find("a").blur();
                                                msg.dialog('option', 'title', getLocalizationKeyExternal("share_complete"));
                                                msg.parent().find(".ui-dialog-buttonpane").css("background-color", "inherit");
                                                var emailBody="";
                                                if($(".publishStatusDialog").find("a[href^='mail']").length>0)
                                                {
                                                    var text = decodeURIComponent($(".publishStatusDialog").find("a[href^='mail']:first").attr("href"));
                                                    if(fileNames){
                                                        var sub = fileNames.substring(0, 250);
                                                        if(fileNames.length>250)
                                                            sub += "...";
                                                        text = (text).replace(/{files}/g, sub);
                                                    }
                                                    else{
                                                        var sub = fileName.substring(0, 250);
                                                        if(fileName.length>250)
                                                            sub += "...";
                                                        text = (text).replace(/{files}/g, sub);
                                                    }
                                                    text = text.replace(/\r/g, '%0D%0A');
                                                    var _sub = text.split("&body=")[0];
                                                    var _asub = decodeURIComponent(text.split("&body=")[1]);
                                                    _asub = _asub.replace(/<\/?[^>]+(>|$)/g, ""); //remove tags
                                                    text = _sub + "&body=" + encodeURIComponent(_asub);
                                                    emailBody = _asub;
                                                    $(".publishStatusDialog").find("a[href^='mail']").attr("href", text);
                                                }
                                                setTimeout(function(){
                                                    msg.find("a.copytoclip").button().unbind().click(function(){
                                                        copyToClipboard(msg.find("a.link:visible").text());
                                                        //alert(getLocalizationKey("ShareLinkCopiedToClipboardText"));
                                                        $.growlUI(getLocalizationKey("ShareLinkCopiedToClipboardText"), "&nbsp;", o.GrowlTimeout);
                                                        msg.dialog("close");
                                                        return false;
                                                    });
                                                    msg.find("a.copybodytoclip").button().unbind().click(function(){
                                                        copyToClipboard(emailBody);
                                                        $.growlUI(getLocalizationKey("ShareEmailCopiedToClipboardText"), "&nbsp;", o.GrowlTimeout);
                                                        msg.dialog("close");
                                                        return false;
                                                    });
                                                }, 100);

                                                if(window.quickShareOpenEmailClient)
                                                {
                                                    if($(".publishStatusDialog").find("a[href^='mail']").length>0)
                                                    {
                                                        $(".publishStatusDialog").find("a[href^='mail']:first").get(0).click();
                                                        msg.dialog("close");
                                                        $.growlUI(getLocalizationKey("share_complete"), "&nbsp;", o.GrowlTimeout);
                                                    }
                                                }
                                                if(window.quickShareDisableNotificationPopup)
                                                {
                                                    msg.dialog("close");
                                                }
                                            },
                                            resizable: false
                                        });
                                    }
                                }
                                else
                                {
                                    if(origMsg.indexOf("Denied") == 0)
                                    {
                                        alert(getLocalizationKey("ShareInternalSelectUserDeniedMessage"));
                                        $("table", "#shareOptionDiv").show();
                                    }
                                    else if (origMsg.indexOf("ERROR:") == 0 && origMsg.indexOf("email_failed")<0) {
                                        $("table:first", "#shareOptionDiv").after("<div class='shareCompleted' style='margin:10px 0px;line-height:25px;'>" + message + "<br/><br/><input style='float:right;margin-bottom:10px;padding:2px 20px;' type=\"submit\" value=\"" + getLocalizationKey("ShareActionCompleteOkButtonText") + "\" onclick=\"$.unblockUI(); return false;\" />" + "</div>");
                                    } else {
                                        if ($("input#shareUsername", "#shareOptionDiv").is(":checked"))
                                        {
                                            $("table:first", "#shareOptionDiv").after("<div class='shareCompleted' style='margin:10px 0px;line-height:25px;'>" + message + "<br/>" + getLocalizationKey("ShareActionCompleteShareUsernamesText") + "<br/>" + $("input#shareUsernames", "#shareOptionDiv").val() + "<br/><input style='float:right;margin-bottom:10px;padding:2px 20px;' type=\"submit\" value=\"" + getLocalizationKey("ShareActionCompleteOkButtonText") + "\" onclick=\"$.unblockUI(); return false;\" />" + "</div>");

                                            if(window.shareWindowNoOpenInEmail)
                                            {
                                                $("table:first", "#shareOptionDiv").next().find("a:first").hide();
                                            }
                                        }
                                        else
                                        {
                                            if(window.shareWindowNoUserInfoAfterShare)
                                            {
                                                $("table:first", "#shareOptionDiv").after("<div class='shareCompleted' style='margin:10px 0px;line-height:25px;'>" + message + "<br/> <span class='linklabel'>" + getLocalizationKey("ShareActionCompleteLinkText") + "</span> <a class='link' href='" + url + "'>" + url + "</a><br/><br/><a href='javascript:void(0);' class='copytoclip'>"+getLocalizationKey("ShareLinkCopyToClipboardText")+"</a>  <a href='javascript:void(0);' class='copybodytoclip'>"+getLocalizationKey("ShareBodyCopyToClipboardText")+"</a><br/><input style='float:right;margin-bottom:10px;padding:2px 20px;' type=\"submit\" value=\"" + getLocalizationKey("ShareActionCompleteOkButtonText") + "\" onclick=\"$.unblockUI(); return false;\" />" + "</div>");
                                            }
                                            else
                                            {
                                                $("table:first", "#shareOptionDiv").after("<div class='shareCompleted' style='margin:10px 0px;line-height:25px;'>" + message + "<br/>" + getLocalizationKey("ShareActionCompleteUsernameText") + username + "<br/>" + getLocalizationKey("ShareActionCompletePasswordText") + password + "<br/> <span class='linklabel'>" + getLocalizationKey("ShareActionCompleteLinkText") + "</span> <a class='link' href='" + url + "'>" + url + "</a><br/><br/><a href='javascript:void(0);' class='copytoclip'>"+getLocalizationKey("ShareLinkCopyToClipboardText")+"</a>  <a href='javascript:void(0);' class='copybodytoclip'>"+getLocalizationKey("ShareBodyCopyToClipboardText")+"</a><br/><br/><input style='float:right;margin-bottom:10px;padding:2px 20px;' type=\"submit\" value=\"" + getLocalizationKey("ShareActionCompleteOkButtonText") + "\" onclick=\"$.unblockUI(); return false;\" />" + "</div>");
                                            }
                                            if(window.shareWindowNoOpenInEmail)
                                            {
                                                $("table:first", "#shareOptionDiv").next().find("a:first").hide();
                                            }
                                        }
                                        var emailBody = "";
                                        if($("#shareOptionDiv").find("a[href^='mail']").length>0)
                                        {
                                            var text = decodeURIComponent($("#shareOptionDiv").find("a[href^='mail']:first").attr("href"));
                                            if(fileNames){
                                                var sub = fileNames.substring(0, 250);
                                                if(fileNames.length>250)
                                                    sub += "...";
                                                text = (text).replace(/{files}/g, sub);
                                            }
                                            else{
                                                var sub = fileName.substring(0, 250);
                                                if(fileName.length>250)
                                                    sub += "...";
                                                text = (text).replace(/{files}/g, sub);
                                            }
                                            text = text.replace(/\r/g, '%0D%0A');
                                            var _sub = text.split("&body=")[0];
                                            var _asub = decodeURIComponent(text.split("&body=")[1]);
                                            _asub = _asub.replace(/<\/?[^>]+(>|$)/g, ""); //remove tags
                                            text = _sub + "&body=" + encodeURIComponent(_asub);
                                            emailBody = _asub;
                                            $("#shareOptionDiv").find("a[href^='mail']").attr("href", text);
                                        }
                                        if(window.normalShareOpenEmailClient)
                                        {
                                            if($("#shareOptionDiv").find("a[href^='mail']").length>0)
                                            {
                                                $("#shareOptionDiv").find("a[href^='mail']:first").get(0).click();
                                            }
                                        }
                                        if(window.hideShareResultLink)
                                        {
                                            $("table:first", "#shareOptionDiv").next().find("a:last").hide().prev().hide();
                                            $(".shareCompleted").contents().filter(function(){return( this.nodeType === 3 );}).last().replaceWith("");
                                        }
                                        if(window.quickShareDisableNotificationPopup)
                                        {
                                            $.unblockUI();
                                        }
                                        setTimeout(function(){
                                            $(".shareCompleted").find("a.copytoclip").button().unbind().click(function(){
                                                copyToClipboard($(".shareCompleted").find("a.link").text());
                                                $.growlUI(getLocalizationKey("ShareLinkCopiedToClipboardText"), "&nbsp;", o.GrowlTimeout);
                                                return false;
                                            });
                                            $(".shareCompleted").find("a.copybodytoclip").button().unbind().click(function(){
                                                copyToClipboard(emailBody);
                                                $.growlUI(getLocalizationKey("ShareEmailCopiedToClipboardText"), "&nbsp;", o.GrowlTimeout);
                                                return false;
                                            });
                                        }, 100);
                                    }
                                }
                            },
                            error: function () {
                                $(".mainProcessIndicator").hide();
                                $.growlUI(getLocalizationKey("ProblemWhileSharingGrowlText"), getLocalizationKey("ProblemWhileSharingDescGrowlText"), o.GrowlTimeout, "growlError", o.GrowlWithCloseButton);
                            }
                        });
                    }
                }

                function editFile(context){
                    var el = false;
                    if (context) {
                        el = currentContext();
                    }
                    //If context allow, show link in a popup
                    if (el) {
                        var $curElem = $(el);
                        var fileName = $curElem.find("a:first").attr("rel");
                        var destinationPath = '';
                        if ($curElem.hasClass("fileTR") || $curElem.hasClass("fileThumb")) {
                            destinationPath = fileName.substring(1);
                        } else {
                            destinationPath = fileName.substring(1);
                        }
                        destinationPath = unescape(destinationPath);
                        var url = o.ajaxCallURL + "?command=download&mimeType=plain%2Ftext&path="+crushFTPTools.encodeURILocal("/"+destinationPath)+"&c2f="+crushFTPTools.getCrushAuth()+""
                        loading.show();
                        $.ajax({
                            type: "POST",
                            url: url,
                            success: function (response) {
                                loading.hide();
                                performAction("editTextDiv");
                                if($("div#filesBasket").dialog("isOpen"))
                                    $(".blockMsg").css("z-index", 1002);
                                var $popup = $("#editTextDiv");
                                $("#txtFileContent", $popup).val(response)[0].focus();
                            }
                        });
                    }
                }

                //Copy item path/link action
                function copypath(context) {
                    var el = false;
                    if (context) {
                        el = currentContext();
                    }
                    //If context allow, show link in a popup
                    if (el) {
                        var $curElem = $(el);
                        var destinationPath = location.href;
                        if($curElem && $curElem.is("#filesListing"))
                        {
                            destinationPath = destinationPath.replace("#/", "");
                        }
                        else
                        {
                            var fileName = $curElem.find("a:first").attr("rel");
                            if (destinationPath.indexOf("#") >= 0) destinationPath = destinationPath.substring(0,destinationPath.indexOf("#"));
                            var affix = window.directCopyLinkWebInterfaceFriendly ? "#/" : "";
                            if ($curElem.hasClass("fileTR") || $curElem.hasClass("fileThumb")) {
                                destinationPath = (destinationPath + affix + fileName.substring(1));
                            } else {
                                destinationPath = (destinationPath + affix + fileName.substring(1));
                            }
                            destinationPath = unescape(destinationPath);
                        }
                        performAction("copyDirectLinkDiv");

                        $("#txtDirectLink").val((destinationPath))[0].select();
                        $("#txtDirectLink")[0].focus();
                    } else {
                        $.growlUI(getLocalizationKey("NothingSelectedGrowlText"), getLocalizationKey("DirectLinkDescGrowlText"), o.GrowlTimeout, "growlError");
                    }
                }

                //Update keyword action
                function updateKeywords(context) {
                    //Update keyword alert
                    function updateKeywordAlert(msg, color, timeout) {
                        $popup.find(".errorNote").remove();
                        timeout = timeout || 2000;
                        var curElem = $("textarea", $("#keywordsDiv"));
                        curElem.after("<span class='errorNote' style='cursor:pointer;float:left;margin-left: 7px;font-size: 11px;line-height: 25px;color:" + color + ";'>" + msg + "</span>");
                        curElem.next().click(function () {
                            $(this).fadeOut(1000, function () {
                                $(this).remove()
                            });
                        });
                    }
                    var _fileName = "";
                    var elem = false;
                    var basket = false;
                    if (context) {
                        elem = currentContext();
                        if (elem) {
                            var $curElem = $(elem);
                            _fileName = $curElem.find("a:first").attr("rel");
                            basket = $curElem.hasClass("contextMenuItem");
                        }
                    }
                    var checkedFiles = [];
                    if(basket)
                    {
                        if (currentView(basket) == "Thumbnail") {
                            checkedFiles = $("#FileBasketList").find("li.fileBoxSelected:visible");
                        } else {
                            checkedFiles = $("#FileBasketList").find("input.chkBox:visible:checked").closest("tr");
                        }
                    }
                    else
                    {
                        if (currentView() == "Thumbnail") {
                            checkedFiles = $("#filesContainerDiv").find("li.fileBoxSelected:visible");
                        } else {
                            checkedFiles = $("#filesListing").find("input.chkBox:visible:checked").closest("tr");
                        }
                    }
                    if (checkedFiles.length == 0 && !elem) {
                        $.growlUI(getLocalizationKey("NothingSelectedGrowlText"), getLocalizationKey("UpdateKeywordDescGrowlText"), o.GrowlTimeout, "growlError");
                        return;
                    }
                    var stringToCopy = _fileName;
                    var totalFiles = elem ? elem.length : checkedFiles.length;
                    checkedFiles.each(function () {
                        var parentElem = $(this);
                        if (currentView(basket) != "Thumbnail") {
                            parentElem = $(this).closest("tr");
                        }
                        var filePath = unescape(parentElem.find("a").attr("rel"));
                        filePath = unescape(filePath.replace("//", "/"));
                        if (_fileName != filePath) {
                            if (stringToCopy.length > 0) {
                                stringToCopy += "\r\n";
                            }
                            stringToCopy += (filePath);
                        }
                    });
                    var $curElem = checkedFiles;
                    if (context) {
                        $curElem = elem;
                    }
                    $("#KeywordsWindowHeaderText").find("span").remove();
                    $("#KeywordsWindowHeaderText").append("<span> : Updating total : " + totalFiles + " item(s)</span>");
                    var keywords = $($curElem[0]).attr("keywords") ? unescape(crushFTPTools.decodeXML($($curElem[0]).attr("keywords"))) : "";
                    performAction("keywordsDiv");
                    if($("div#filesBasket").dialog("isOpen"))
                        $(".blockMsg").css("z-index", 1002);
                    var $popup = $("#keywordsDiv");
                    $("#txtKeywords", $popup).val(keywords)[0].focus();
                    $popup.find(".errorNote").remove();
                    $("a.update", $popup).unbind().click(function () {
                        $(this).blur();
                        var newKeywords = $("#txtKeywords", $popup).val();
                        var obj = {
                            command: "editKeywords",
                            keywords: crushFTPTools.encodeURILocal(unescape(newKeywords)),
                            names: crushFTPTools.encodeURILocal(unescape(stringToCopy)),
                            random: Math.random()
                        };
                        $popup.find(".buttonPanel").addClass("wait");
                        $popup.find(".errorNote").remove();
                        obj.c2f = crushFTPTools.getCrushAuth();
                        $.ajax({
                            type: "POST",
                            url: o.ajaxCallURL,
                            data: obj,
                            success: function (response) {
                                var responseText = getActionResponseText(response);
                                $popup.find(".buttonPanel").removeClass("wait");
                                responseText = $.trim(responseText);
                                if (responseText.indexOf("Keywords Edited.") >= 0) {
                                    $.unblockUI();
                                    if (currentView(basket) != "Thumbnail") {
                                        checkedFiles.each(function () {
                                            $(this).attr("keywords", newKeywords);
                                            $(this).attr("keywords", newKeywords);
                                            var $curElem = $(this).closest("TR");
                                            $curElem.find(".columnKeywords").attr("title", newKeywords);
                                            if (newKeywords.length >= o.MaximumLengthAllowedForKeywordsString) {
                                                newKeywords = newKeywords.substr(
                                                0, o.MaximumLengthAllowedForKeywordsString) + "...";
                                            }
                                            $curElem.find(".columnKeywords").html(crushFTPTools.xmlEncode(newKeywords));
                                            // $($curElem).animate({
                                            //     "background-color": "#FFFFCC"
                                            // }, 500, function () {
                                            //     $($curElem).animate({
                                            //         "background-color": "#FFFFFF"
                                            //     }, 500);
                                            // });
                                        });
                                        if (context) {
                                            $(elem).attr("keywords", newKeywords);
                                            $(elem).attr("keywords", newKeywords);
                                            var $curElem = $(elem).closest("TR");
                                            $curElem.find(".columnKeywords").attr("title", newKeywords);
                                            if (newKeywords.length >= o.MaximumLengthAllowedForKeywordsString) {
                                                newKeywords = newKeywords.substr(
                                                0, o.MaximumLengthAllowedForKeywordsString) + "...";
                                            }
                                            $curElem.find(".columnKeywords").html(crushFTPTools.xmlEncode(newKeywords));
                                            // $($curElem).animate({
                                            //     "background-color": "#FFFFCC"
                                            // }, 500, function () {
                                            //     $($curElem).animate({
                                            //         "background-color": "#FFFFFF"
                                            //     }, 500);
                                            // });
                                        }
                                    }
                                } else {
                                    updateKeywordAlert("(Error : " + responseText + ")", "red");
                                }
                            },
                            error: function (XMLHttpRequest, textStatus, errorThrown) {
                                updateKeywordAlert("(Error : " + errorThrown + ")", "red");
                                $popup.find(".buttonPanel").removeClass("wait");
                            }
                        });
                    });
                    $("a.cancel", $popup).unbind().click(function () {
                        $.unblockUI();
                    });
                }

                //Build a form and submit form to server in hidden way using iFrame
                window.submitAction = function(opt, requestType, toRemove) {
                    var uniqueIFrameID = "i" + generateRandomPassword(8);
                    var uniqueIFrame = $("<iframe id=\"" + uniqueIFrameID + "\" name=\"" + uniqueIFrameID + "\" src=\"javascript:false;\" style=\"display:none;\"></iframe>");
                    $("body").append(uniqueIFrame);
                    $("#crushftp_action").remove();
                    $("body").append('<form id="crushftp_action" style=\"display:none;\" name="crushftp_action" enctype="multipart/form-data" method="post">' + '<input type="text" id="command" name="command" value="" />' + '<input type="text" id="path" name="path" value="" />' + '<input type="text" id="paths" name="paths" value="" />' + '<input type="text" id="random" name="random" value="" />' + '</form>');
                    var formToSubmit = $("#crushftp_action");
                    if(requestType)
                    {
                        formToSubmit.attr("method", requestType);
                    }
                    formToSubmit.attr("action", o.downloadURL).attr("target", uniqueIFrameID);
                    formToSubmit.find("input").val("");
                    for (var key in opt) {
                        if (opt.hasOwnProperty(key)) {
                            if(formToSubmit.find(key).attr("value", opt[key]).length==0)
                            {
                                formToSubmit.append('<input type="text" id="'+key.replace("#", "")+'" name="'+key.replace("#", "")+'" value="'+opt[key]+'" />');
                            }
                        }
                    }
                    formToSubmit.append('<input type="text" id="c2f" name="c2f" value="'+crushFTPTools.getCrushAuth()+'" />');
                    if(toRemove)
                    {
                        var items = toRemove.split(",");
                        for (var i = 0; i < items.length; i++) {
                            formToSubmit.find("#" + $.trim(items[i]) + "").remove();
                        }
                    }
                    var agent = navigator.userAgent.toLowerCase();
                    if (agent.indexOf('android') >= 0 && agent.indexOf('chrome') >= 0 && opt["#command"] && opt["#command"].indexOf("download")>=0)
                    {
                        formToSubmit.attr("target", "_blank");
                    }
                    formToSubmit.submit();
                }

                //Download file keywords as text file
                function downloadKeywords(context, el)
                {
                    var _fileName = "";
                    var elem = false;
                    var basket = false;
                    if (context) {
                        elem = currentContext();
                        if (elem) {
                            var $curElem = $(elem);
                            _fileName = $curElem.find("a:first").attr("rel");
                            basket = $curElem.hasClass("contextMenuItem");
                        }
                    }
                    var checkedFiles = {};
                    if(basket)
                    {
                        if (currentView(basket) == "Thumbnail") {
                            checkedFiles = $("#FileBasketList").find("li.fileBoxSelected:visible");
                        } else {
                            checkedFiles = $("#FileBasketList").find("input.chkBox:visible:checked");
                        }
                    }
                    else
                    {
                        if (currentView() == "Thumbnail") {
                            checkedFiles = $("#filesContainerDiv").find("li.fileBoxSelected:visible");
                        } else {
                            checkedFiles = $("#filesListing").find("input.chkBox:visible:checked");
                        }
                    }
                    if (checkedFiles.length == 0 && !elem) {
                        $.growlUI(getLocalizationKey("NothingSelectedGrowlText"), getLocalizationKey("UpdateKeywordDescGrowlText"), o.GrowlTimeout, "growlError");
                        return;
                    }
                    var filesToDownload = _fileName;
                    var totalFiles = elem.length;
                    checkedFiles.each(function () {
                        var parentElem = $(this);
                        if (currentView(basket) != "Thumbnail") {
                            parentElem = $(this).closest("tr");
                        }
                        var filePath = unescape(parentElem.find("a").attr("rel"));
                        filePath = unescape(filePath.replace("//", "/"));
                        if (_fileName != filePath) {
                            if (filesToDownload.length > 0) {
                                filesToDownload += ";";
                            }
                            filesToDownload += (filePath);
                            totalFiles += 1;
                        }
                    });
                    if(filesToDownload)
                    {
                        var pathToDownload = unescape(filesToDownload);
                        submitAction({
                            '#command': "getKeywords",
                            '#random': Math.random(),
                            '#path': pathToDownload
                        }, "POST", "paths");
                    }
                    else
                    {
                        $.growlUI(getLocalizationKey("DownloadNothingSelectedGrowlText"), "&nbsp;", o.GrowlTimeout, "growlError");
                        return;
                    }
                    return false;
                }

                //Download low res
                function downloadLowRes(context, el)
                {
                    var _fileName = "";
                    var elem = false;
                    var basket = false;
                    if (context) {
                        elem = currentContext();
                        if (elem) {
                            var $curElem = $(elem);
                            _fileName = $curElem.find("a:first").attr("rel");
                            basket = $curElem.hasClass("contextMenuItem");
                        }
                    }
                    var checkedFiles = {};
                    if(basket)
                    {
                        if (currentView(basket) == "Thumbnail") {
                            checkedFiles = $("#FileBasketList").find("li.fileBoxSelected:visible");
                        } else {
                            checkedFiles = $("#FileBasketList").find("input.chkBox:visible:checked");
                        }
                    }
                    else
                    {
                        if (currentView() == "Thumbnail") {
                            checkedFiles = $("#filesContainerDiv").find("li.fileBoxSelected:visible");
                        } else {
                            checkedFiles = $("#filesListing").find("input.chkBox:visible:checked");
                        }
                    }
                    if (checkedFiles.length == 0 && !elem) {
                        $.growlUI(getLocalizationKey("NothingSelectedGrowlText"), getLocalizationKey("UpdateKeywordDescGrowlText"), o.GrowlTimeout, "growlError");
                        return;
                    }
                    var filesToDownload = _fileName;
                    var totalFiles = elem.length;
                    checkedFiles.each(function () {
                        var parentElem = $(this);
                        if (currentView(basket) != "Thumbnail") {
                            parentElem = $(this).closest("tr");
                        }
                        var filePath = unescape(parentElem.find("a").attr("rel"));
                        filePath = unescape(filePath.replace("//", "/"));
                        if (_fileName != filePath) {
                            if (filesToDownload.length > 0) {
                                filesToDownload += ";";
                            }
                            filesToDownload += (filePath);
                            totalFiles += 1;
                        }
                    });
                    if(filesToDownload)
                    {
                        var pathToDownload = unescape(filesToDownload);
                        submitAction({
                            '#command': "getPreview",
                            '#random': Math.random(),
                            "#size" : "3",
                            '#path': pathToDownload,
                            "#download" : "true"
                        }, "POST");
                    }
                    else
                    {
                        $.growlUI(getLocalizationKey("DownloadNothingSelectedGrowlText"), "&nbsp;", o.GrowlTimeout, "growlError");
                        return;
                    }
                    return false;
                }

                //Download items
                window.downloadItems = function (context, el, fileToDownload, all) {
                    el = el || false;
                    var basket = false;
                    if ($(document).data("slideShowOnly")) { // For slideshow only version
                        var fileName = crushFTPTools.encodeURILocal(unescape(el));
                        submitAction({
                            '#command': "download",
                            '#random': Math.random(),
                            '#path': fileName
                        });
                    } else {
                        if (context) {
                            el = currentContext();
                            if (el) {
                                basket = $(el).hasClass("contextMenuItem");
                            }
                        }
                        if(el)
                        {
                            var privs = "";
                            if(currentView(basket) == "Thumbnail"){
                                if(el.data("dataRow")){
                                    privs = el.data("dataRow").privs.toString();
                                }
                                else if(el.attr("privs"))
                                {
                                    privs = unescape(el.attr("privs"));
                                }
                            }
                            else {
                                privs = unescape(el.attr("privs"));
                                if(basket)
                                {
                                    privs = el.closest("tr").data("dataRow").privs.toString();
                                }
                            }
                            if(privs.indexOf("(read)")<0)
                                return false;
                        }
                        var count = 0;
                        var stringToCopy = "";
                        var selectedFiles = [];
                        var totalSizeToDownload = 0;
                        if (el) {
                            var $curElem = $(el);
                            stringToCopy = $curElem.find("a:first").attr("rel");
                            selectedFiles.push(stringToCopy);
                            count++;
                            if (currentView(basket) != "Thumbnail") {
                                totalSizeToDownload += parseFloat(el.closest("tr").find("td.columnName").attr("sizeinbytes"));
                            }
                            else
                            {
                                totalSizeToDownload += parseFloat(el.attr("sizeinbytes"));
                            }
                        }
                        var checkedFiles = {};
                        if(all){
                            if (currentView(basket) == "Thumbnail") {
                                if(basket)
                                {
                                    checkedFiles = $("#FileBasketList").find("li:visible");
                                }
                                else
                                {
                                    checkedFiles = $("#filesContainerDiv").find("li:visible");
                                }
                            } else {
                                if(basket)
                                {
                                    checkedFiles = $("#FileBasketList").find("input.chkBox:visible");
                                }
                                else
                                {
                                    checkedFiles = $("#filesListing").find("input.chkBox:visible");
                                }
                            }
                        }
                        else{
                            if (currentView(basket) == "Thumbnail") {
                                if(basket)
                                {
                                    checkedFiles = $("#FileBasketList").find("li.fileBoxSelected:visible");
                                }
                                else
                                {
                                    checkedFiles = $("#filesContainerDiv").find("li.fileBoxSelected:visible");
                                }
                            } else {
                                if(basket)
                                {
                                    checkedFiles = $("#FileBasketList").find("input.chkBox:visible:checked");
                                }
                                else
                                {
                                    checkedFiles = $("#filesListing").find("input.chkBox:visible:checked");
                                }
                            }
                        }
                        checkedFiles.each(function () {
                            var parentElem = $(this);
                            if (currentView(basket) != "Thumbnail") {
                                parentElem = $(this).closest("tr");
                                if(el && el.length>0 && el.closest("tr").length>0)
                                {
                                    if(el.closest("tr")[0] != parentElem[0])
                                    {
                                        totalSizeToDownload += parseFloat(parentElem.find("td.columnName").attr("sizeinbytes"));
                                    }
                                }
                                else
                                {
                                    totalSizeToDownload += parseFloat(parentElem.find("td.columnName").attr("sizeinbytes"));
                                }
                            }
                            else
                            {
                                if(el && el.length>0)
                                {
                                    if(el[0] != parentElem[0])
                                    {
                                        totalSizeToDownload += parseFloat($(this).attr("sizeinbytes"));
                                    }
                                }
                                else
                                {
                                    totalSizeToDownload += parseFloat($(this).attr("sizeinbytes"));
                                }
                            }
                            var filePath = unescape(parentElem.find("a:first").attr("rel"));
                            filePath = filePath.toString();
                            filePath = filePath.replace("//", "/");
                            filePath = escape(filePath.toString());
                            if(!selectedFiles.has(filePath))
                            {
                                if(stringToCopy.length>0)
                                    stringToCopy += ":" + filePath;
                                else
                                    stringToCopy = filePath;
                                count++;
                            }
                        });
                        var maxAllowedDownloadSize = parseFloat($(document).data("maxAllowedDownloadSize"));
                        if(maxAllowedDownloadSize>0 && totalSizeToDownload>maxAllowedDownloadSize)
                        {
                            $.growlUI(getLocalizationKey("maxAllowedDownloadSizeReached"), getLocalizationKey("maxAllowedDownloadSizeReachedText").replace("{size}",formatBytes(maxAllowedDownloadSize)), o.GrowlTimeout, "growlError", o.GrowlWithCloseButton);
                            return false;
                        }

                        if(fileToDownload)
                        {
                            stringToCopy = fileToDownload;
                            count++;
                        }
                        if (count > 0) {
                            // if(window.useChunkedDownload && window.crushDownload){
                            //     window.crushDownload.queue.download(stringToCopy);
                            //     $.growlUI(getLocalizationKey("DownloadStartedAlertTitleText"), '&nbsp;', o.GrowlTimeout);
                            //     return;
                            // }
                            if (count > 1) //multiple selected, do zip
                            {
                                downloadAsZip(el, false, basket, all);
                                return;
                            } else {
                                if (currentView(basket) == "Thumbnail") {
                                    if (!el) {
                                        el = $(checkedFiles[0]);
                                    }
                                    if (el.hasClass("directoryThumb")) {
                                        downloadAsZip(el, true, basket, all);
                                        return;
                                    }
                                } else {
                                    if (!el) {
                                        el = $(checkedFiles[0]);
                                        if (el) {
                                            el = el.closest("td").next();
                                        }
                                    }
                                    if (el.hasClass("directory")) {
                                        downloadAsZip(el, true, basket, all);
                                        return;
                                    }
                                }
                            }
                            submitAction({
                                '#command': "download",
                                '#random': Math.random(),
                                '#path': crushFTPTools.encodeURILocal(unescape(stringToCopy))
                            });
                        } else {
                            $.growlUI(getLocalizationKey("DownloadNothingSelectedGrowlText"), "&nbsp;", o.GrowlTimeout, "growlError");
                            return;
                        }
                    }
                    $.growlUI(getLocalizationKey("DownloadStartedAlertTitleText"), '&nbsp;', o.GrowlTimeout);
                }

                //Rename action
                function performRenameAction(context) {
                    var el = false;
                    var basket = false;
                    if (context) {
                        el = currentContext();
                        if (el) {
                            basket = $(el).hasClass("contextMenuItem");
                        }
                    }
                    if (currentView(basket) != "Thumbnail") { //Treeview
                        if (!el) {
                            var checkedFiles = $("#filesListing").find("input.chkBox:visible:checked");
                            if (checkedFiles && checkedFiles.length > 0) {
                                el = $(checkedFiles[0]).closest("tr").find(".columnName");
                            }
                        }
                        if (!el || el.length == 0) {
                            $.growlUI(getLocalizationKey("RenameNothingSelectedGrowlText"), "&nbsp;", o.GrowlTimeout, "growlError");
                            return;
                        }
                        var $curElem = $(el);
                        if($curElem.find(".renamePanel:visible").length>0){
                            $curElem.find(".renamePanel:visible:first").find("input").focus();
                            return false;
                        }
                        var renameTemplate = "<div class='renamePanel'><input type='text' class='renameField' /><div class='saveButton'>" + getLocalizationKey("RenamePanelSaveLinkText") + "</div><div class='cancelButton'>" + getLocalizationKey("RenamePanelCancelLinkText") + "</div></div>";
                        //Disable context menu on current item while rename is still not completed
                        $curElem.removeAttr('draggable');
                        $curElem.disableContextMenu();
                        $curElem.find("span,a").hide();
                        $curElem.append(renameTemplate);
                        var name = unescape($curElem.closest("td").attr("name"));
                        $curElem.find(".renameField").val(name)[0].select();
                        $curElem.find(".renameField")[0].focus();
                        $curElem.removeAttr("title");
                        $curElem.find(".cancelButton").click(function () {
                            $curElem.find("div.renamePanel").remove();
                            $curElem.find("span,a").show();
                            $curElem.attr('draggable', 'true');
                            $curElem.enableContextMenu(); // Re-enable context menu
                            bindContextMenu($curElem);
                        });
                        //Enter key press event
                        $curElem.find(".renameField").keyup(function (evt) {
                            var evt = (evt) ? evt : ((event) ? event : null);
                            if (evt.keyCode == 13) {
                                $curElem.find(".saveButton").click();
                                return false;
                            } else if (evt.keyCode == 27) {
                                $curElem.find(".cancelButton").click();
                                return false;
                            }
                        });
                        $curElem.find(".saveButton").click(function () {
                            $curElem.block({
                                message: "<div style='margin-top: -25px;padding: 5px;background: #000;color: #fff;'>"+getLocalizationKey("loadingIndicatorText")+"</div>",
                                css: {
                                    border: 'none',
                                    color: '#000'
                                }
                            });
                            var newName = $curElem.find(".renameField").val();
                            newName = newName.replace(/\//g, o.folderNameSpecialCharacterSubstitute).replace(/:/g, o.folderNameSpecialCharacterSubstitute);
                            $curElem.find(".renameField").val(newName);
                            var oldName = name;
                            var pathName = $(el).parent().attr("rel");
                            var obj = {
                                command: "rename",
                                path: crushFTPTools.encodeURILocal(unescape(pathName)),
                                name1: crushFTPTools.encodeURILocal(unescape(oldName)),
                                name2: crushFTPTools.encodeURILocal(unescape(newName)),
                                random: Math.random()
                            };
                            $curElem.addClass("wait");
                            obj.c2f = crushFTPTools.getCrushAuth();
                            $.ajax({
                                type: "POST",
                                url: o.ajaxCallURL,
                                data: obj,
                                success: function (response) {
                                    setTimeout(function(){
                                        $curElem.unblock();
                                    }, 500);
                                    var responseText = getActionResponseText(response);
                                    var loadPreview = false;
                                    if (responseText.length > 0) {
                                        $.growlUI(getLocalizationKey("ProblemWhileRenamingGrowlText"), getLocalizationKey("ProblemWhileRenamingDescGrowlText") + responseText, o.GrowlTimeout, "growlError", o.GrowlWithCloseButton);
                                    } else {
                                        if(basket)
                                        {
                                            var fileFullName = obj.path + obj.name1;
                                            //Items in the basket
                                            var ItemsInTheBasket = $(document).data(o.BasketDataKey);
                                            for(var i=0;i<ItemsInTheBasket.length;i++)
                                            {
                                                if(unescape(fileFullName) == unescape(ItemsInTheBasket[i].file))
                                                {
                                                    ItemsInTheBasket[i].name = obj.name2;
                                                    ItemsInTheBasket[i].file = obj.path + obj.name2;
                                                }
                                            }
                                        }
                                        if ($curElem.hasClass("directory")) {
                                            var link = $curElem.find("a");
                                            var nameToChange = link.attr("rel");
                                            link.text(newName).attr("href", $curElem.closest("tr").attr("rel") + newName + "/").attr("rel", escape(unescape($curElem.closest("tr").attr("rel") + newName + "/"))).prev().attr("rel", escape(unescape($curElem.closest("tr").attr("rel") + newName + "/")));
                                            $curElem.find("span.expandButton").attr("rel", escape(unescape($curElem.closest("tr").attr("rel") + newName + "/")));
                                            $curElem.find("div.renamePanel").remove();
                                            $curElem.find("span,a").show();
                                            $curElem.attr("name", newName);
                                            var filesContainer = $("table#filesContainer");

                                            //Method to update links of item after rename
                                            function updateLinks(old, update) {
                                                old = escape(old);
                                                update = escape(update);
                                                filesContainer.find("tr[rel='" + old + "']").each(function () {
                                                    var curItem = $(this);
                                                    if (curItem.find("td.directory").length > 0) {
                                                        updateLinks(old + curItem.find("td.directory").attr("name") + "/", update + curItem.find("td.directory").attr("name") + "/");
                                                    }
                                                    curItem.attr("rel", update).attr("rootdir", update);
                                                    curItem.find("a").attr("rel", update + curItem.find("a").closest("td").attr("name")).attr("href", unescape(update + curItem.find("a").closest("td").attr("name"))).attr("title", "<img src=\"" + o.ajaxCallURL + "?command=getPreview&size=3&path=" + crushFTPTools.encodeURILocal(unescape(update + curItem.find("a").closest("td").attr("name"))) + "&random="+Math.random()+"&frame=1"+"&c2f="+crushFTPTools.getCrushAuth() + "\"" + " border='0' />");
                                                });
                                            }
                                            updateLinks(nameToChange, $curElem.closest("tr").attr("rel") + newName + "/");
                                            var expandedFolder = newName;
                                            var expandedFolders = $(document).data("expandedFolders");
                                            if (!expandedFolders) {
                                                expandedFolders = [];
                                            }
                                            if ($curElem.hasClass("expanded")) {
                                                if (!expandedFolders.has(expandedFolder)) {
                                                    expandedFolders.push(expandedFolder);
                                                }
                                            } else {
                                                if (expandedFolders.has(expandedFolder)) {
                                                    expandedFolders.remove(expandedFolders.indexOf(expandedFolder));
                                                }
                                            }
                                            $(document).data("expandedFolders", expandedFolders);

                                            //Update names and reference in document cache
                                            function updateNames(dirItems, _path, _old, _new, sub) {
                                                if (sub) {
                                                    for (var item in dirItems) {
                                                        if (dirItems[item].root_dir == _path) {
                                                            dirItems[item].root_dir = unescape(_new);
                                                            dirItems[item].href_path = dirItems[item].root_dir + dirItems[item].name;
                                                            if (dirItems[item].type == "DIR") {
                                                                updateNames(dirItems, unescape(_old) + dirItems[item].name + "/", unescape(_old) + dirItems[item].name + "/", unescape(_new) + dirItems[item].name + "/", true);
                                                            }
                                                        }
                                                    }
                                                } else {
                                                    for (var item in dirItems) {
                                                        if (dirItems[item].name == unescape(_old)) {
                                                            dirItems[item].name = unescape(_new);
                                                            dirItems[item].href_path = dirItems[item].href = dirItems[item].root_dir + unescape(_new);
                                                        }
                                                        if (dirItems[item].root_dir == _path + unescape(_old) + "/") {
                                                            dirItems[item].root_dir = _path + unescape(_new) + "/";
                                                            dirItems[item].href_path = dirItems[item].root_dir + dirItems[item].name;
                                                            if (dirItems[item].type == "DIR") {
                                                                updateNames(dirItems, _path + unescape(_old) + "/" + dirItems[item].name + "/", _path + unescape(_old) + "/" + dirItems[item].name + "/", _path + unescape(_new) + "/" + dirItems[item].name + "/", true);
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                            if (l && l.length > 0) {
                                                updateNames(l, pathName, oldName, newName);
                                            }
                                            if (window.curTreeItems && window.curTreeItems.length > 0) {
                                                updateNames(window.curTreeItems, pathName, oldName, newName);
                                            }
                                        } else if ($curElem.hasClass("fileItem") || $curElem.hasClass("fileTR")) {
                                            var FileExtension = getFileExtension($curElem.find("a").text());
                                            var link = $curElem.find("a:first").text(newName);
                                            if($curElem.find("a.inline_player").length>0){
                                                generateInlinePlayers($curElem);
                                            }
                                            link.attr("href", $curElem.closest("tr").attr("rel") + newName);
                                            link.attr("rel", escape(unescape(link.attr("href"))));
                                            FileExtension = getFileExtension(newName);
                                            $curElem.removeAttr("title");
                                            $curElem.find("div.renamePanel").remove();
                                            $curElem.find("span,a:first").show();
                                            $curElem.attr("name", newName);
                                            if (!$curElem.closest("tr").data("menuOn")) {
                                                $curElem.closest("tr").removeClass("rowHoverFixed").removeClass("rowHover");
                                            }
                                            loadPreview = true;
                                        }
                                        $curElem.enableContextMenu();
                                        $curElem.attr('draggable', 'true');
                                        $($curElem).closest("TR").animate({
                                            "background": "#FFFFCC"
                                        }, 500, function () {
                                            $($curElem).closest("TR").animate({
                                                "background": "inherit"
                                            }, 500, function () {
                                                if (loadPreview) {
                                                    loadIconPreview(
                                                    1, true, $($curElem), basket);
                                                }
                                                bindContextMenu($curElem);
                                            });
                                        });
                                    }
                                },
                                complete: function () {
                                    $curElem.removeClass("wait");
                                },
                                error: function () {
                                    $.growlUI(getLocalizationKey("ProblemWhileRenamingGrowlText"), getLocalizationKey("ProblemWhileRenamingDescGrowlText"), o.GrowlTimeout, "growlError", o.GrowlWithCloseButton);
                                }
                            });
                        });
                    } else { // Thumbs view
                        if (!el) {
                            el = $("#filesContainerDiv").find("li.fileBoxSelected:visible:first");
                        }
                        if (!el || el.length == 0) {
                            $.growlUI(getLocalizationKey("RenameNothingSelectedGrowlText"), "&nbsp;", o.GrowlTimeout, "growlError");
                            return;
                        }
                        if ($("#thumbRenamePanel").length == 0) {
                            var renameTemplate = "<div class='renamePanel'><h2>" + getLocalizationKey("RenameWindowHeaderText") + "</h2><input type='text' class='renameField' /><div class='saveButton'>" + getLocalizationKey("RenamePanelSaveLinkText") + "</div>&nbsp;&nbsp;<div class='cancelButton'>" + getLocalizationKey("RenamePanelCancelLinkText") + "</div></div>";
                            $("body").append("<div id='thumbRenamePanel'>" + renameTemplate + "</div>");
                            $("#thumbRenamePanel").hide();
                        }
                        var $renameBox = $('#thumbRenamePanel');
                        //var toTop = (window.screen.availHeight / 2) - ($renameBox.height() * 2);
                        $.blockUI({
                            message: $renameBox,
                            css: {
                                padding: '10px 10px 20px 30px',
                                'background-color': getPopupColor(true),
                                'border': "1px solid " + getPopupColor(),
                                '-webkit-border-radius': '10px',
                                '-moz-border-radius': '10px',
                                color: '#000',
                                opacity: 0.9,
                                top: '20%',
                                left: '40%',
                                width: '305px'
                            }
                        });
                        if(basket)
                        {
                            $(".blockOverlay").css("z-index", "1002");
                            $(".blockMsg").css("z-index", "1003");
                        }
                        $renameBox.find(".renameField").val($(el).find("div.imgTitle").find("a").text()).focus();
                        $renameBox.find(".cancelButton").unbind().click(
                        function () {
                            $.unblockUI();
                            $("#thumbRenamePanel").remove();
                            $renameBox.find("input").removeClass("wait");
                        });
                        $renameBox.find(".renameField").unbind().keyup(

                        function (evt) {
                            var evt = (evt) ? evt : ((event) ? event : null);
                            if (evt.keyCode == 13) {
                                $renameBox.find(".saveButton").click();
                                return false;
                            } else if (evt.keyCode == 27) {
                                $renameBox.find(".cancelButton").click();
                                return false;
                            }
                        });
                        $renameBox.find(".saveButton").unbind().click(
                        function () {
                            var newName = $renameBox.find(".renameField").val();
                            newName = newName.replace(/\//g, o.folderNameSpecialCharacterSubstitute).replace(/:/g, o.folderNameSpecialCharacterSubstitute);
                            $renameBox.find(".renameField").val(newName);

                            var oldName = $(el).find("div.imgTitle").find("a").text();
                            var pathName = $(el).find("div.imgTitle").find("a").attr("rel");
                            var obj = {
                                command: "rename",
                                path: crushFTPTools.encodeURILocal(unescape(pathName)),
                                name1: crushFTPTools.encodeURILocal(unescape(oldName)),
                                name2: crushFTPTools.encodeURILocal(unescape(newName)),
                                random: Math.random()
                            };
                            $renameBox.find("input").addClass("wait");
                            obj.c2f = crushFTPTools.getCrushAuth();
                            $.ajax({
                                type: "POST",
                                url: o.ajaxCallURL,
                                data: obj,
                                success: function (response) {
                                    var responseText = getActionResponseText(response);
                                    if (responseText.length > 0) {
                                        $.growlUI(getLocalizationKey("ProblemWhileRenamingGrowlText"), getLocalizationKey("ProblemWhileRenamingDescGrowlText") + responseText, o.GrowlTimeout, "growlError", o.GrowlWithCloseButton);
                                    } else {
                                        if(basket)
                                        {
                                            var fileFullName = obj.path + obj.name1;
                                            //Items in the basket
                                            var ItemsInTheBasket = $(document).data(o.BasketDataKey);
                                            for(var i=0;i<ItemsInTheBasket.length;i++)
                                            {
                                                if(unescape(fileFullName) == unescape(ItemsInTheBasket[i].file))
                                                {
                                                    ItemsInTheBasket[i].name = obj.name2;
                                                    ItemsInTheBasket[i].file = obj.path + obj.name2;
                                                }
                                            }
                                        }
                                        var link = $(el).find("div.imgTitle").find("a");
                                        if ($(el).hasClass("directoryThumb")) {
                                            link.text(newName).attr("href", link.attr("rel") + newName + "/");
                                        } else {
                                            link.text(newName).attr("href", link.attr("rel") + newName);
                                        }
                                        setTitleText(link);
                                        var imglink = $(el).find("a.imgLink");
                                        if ($(el).hasClass("directoryThumb")) {
                                            imglink.attr("rel", escape(unescape(link.attr("rel") + newName + "/")));
                                        } else {
                                            imglink.attr("rel", escape(unescape(link.attr("rel") + newName)));
                                        }
                                        imglink.attr("href", link.attr("href"));
                                        $renameBox.find(".cancelButton").click();
                                        $(el).removeAttr("title");
                                        $(el).find(".vtip").removeAttr("title");
                                        // $($(el)).animate({
                                        //     "background-color": "#FFFFCC"
                                        // }, 500, function () {
                                        //     $($(el)).animate({
                                        //         "background-color": "#FFFFFF"
                                        //     }, 500, function () {
                                        //         loadIconPreview(1, true, $(el), basket);
                                        //         bindContextMenu($(el));
                                        //     });
                                        // });
                                        loadIconPreview(1, true, $(el), basket);
                                        bindContextMenu($(el));
                                    }
                                },
                                complete: function () {
                                    $renameBox.find("input").removeClass("wait");
                                },
                                error: function () {
                                    $.growlUI(getLocalizationKey("ProblemWhileRenamingGrowlText"), getLocalizationKey("ProblemWhileRenamingDescGrowlText"), o.GrowlTimeout, "growlError", o.GrowlWithCloseButton);
                                }
                            });
                        });
                    }
                }

                //Get action response text from server reply
                function getActionResponseText(msg) {
                    var responseText = '';
                    try {
                        var msgs = msg.getElementsByTagName("commandResult");
                        for (var x = 0; x < msgs.length; x++) {
                            responseText += IE(msgs[x].getElementsByTagName("response")[0]).textContent;
                        }
                    } catch (ex) {}
                    return crushFTPTools.sanitize(responseText);
                }

                //Get data of elements from privs of elements
                function getDataOfElemFromPrivs(currentPrivs, val) {
                    var comment = false;
                    if (currentPrivs && val && val.length > 0) {
                        val = "(" + val;
                        var commentIndex = currentPrivs.indexOf(val);
                        if (commentIndex >= 0) {
                            comment = currentPrivs.substring(commentIndex, currentPrivs.length);
                            comment = comment.substring(val.length, comment.indexOf(")"));
                        }
                    }
                    return comment;
                }

                function resetPrivs(privs)
                {
                    if(privs.indexOf("locked")>=0 && privs.indexOf("inherited")<0)
                    {
                        return privs.replace("(write)","").replace("(delete)","").replace("(deletedir)","").replace("(makedir)","").replace("(rename)","").replace("(resume)","");
                    }
                    else
                        return privs;
                }

                var buttonsToShowOnEmptyFolder = ["javascript:performAction('createFolder');","javascript:performAction('copyDirectLink');","javascript:performAction('upload');", "javascript:performAction('userOptions');", "javascript:performAction('paste');", "javascript:performAction(\"showBasket\");" ,"/WebInterface/CrushTunnel.jnlp", "/WebInterface/help/index.html", "javascript:doLogout();"];
                //Render main navigation buttons and context menu items
                function renderButtons() {
                    if ($(document).data("uploadOnly")) { //No buttons for upload only
                        return;
                    }
                    else if(window.listingPageShown)
                    {
                        $("#mainNavigation").hide();
                        return;
                    }
                    $("div.mainNavigation").find("a[href!='javascript:doLogout();']").parent().remove();
                    var currentPrivs = $(document).data("folderPrivs");
                    currentPrivs = currentPrivs || "(read)";
                    if($("#searchResultNotification").attr("search"))
                        currentPrivs += "(read)";
                    var comment = getDataOfElemFromPrivs(currentPrivs, "comment");
                    if (comment &&  currentPrivs.indexOf("(inherited)")<0) {
                        comment = unescape(comment);
                        comment = comment.replace(/\#LPR#/g, "(").replace(/\#RPR#/g, ")");
                        $("#comments").empty().html(comment).show();
                    } else {
                        $("#comments").hide();
                    }
                    if(currentPrivs)
                        currentPrivs = currentPrivs.toLowerCase();
                    var menuList = $(document).data("menuList");
                    var mainNav = $("#mainNavigation").hide();
                    if (menuList) {
                        var mainMenu = $(".mainNavigation").find("ul.topnav");
                        mainMenu.empty();
                        //Loop through menu item and make a button list
                        var groupSubItems = [];
                        var groupStart = false;
                        var groupLastItem = false;
                        for (var i = 0; i < menuList.length; i++) {
                            var text = menuList[i].name.toString();
                            var val = text.substring(1, text.indexOf(":") - 1);
                            if(val)
                                val = val.toLowerCase().replace(/ /g, "");
                            if(val == "slideshow" && menuList[i].text.indexOf("quickView")>0)
                                val = "quickview";
                            var isGroupRoot = menuList[i].isgroupRoot.toString() == "true";
                            var isGroupSubItem = menuList[i].isSubItem.toString() == "true";
                            text = text.substring(text.indexOf(":") + 1, text.length);
                            if(isGroupRoot)
                            {
                                if(groupStart && groupSubItems.length>0)
                                {
                                    mainMenu.find(".groupRoot:last").after("<li class='navbarGroup'><ul class='groupMenu'>"+groupSubItems.join("")+"</ul></li>");
                                    groupSubItems = [];
                                }
                                groupStart = true;
                            }

                            if(!isGroupSubItem && !isGroupRoot)
                            {
                                groupLastItem = groupStart;
                                groupStart = false;
                            }
                            var renderLastItem = false;
                            if(i == menuList.length-1 && groupSubItems.length>0)
                            {
                                groupLastItem = true;
                                renderLastItem = true;
                            }

                            if(!renderLastItem && groupLastItem && groupSubItems.length>0)
                            {
                                mainMenu.find(".groupRoot:last").after("<li class='navbarGroup'><ul class='groupMenu'>"+groupSubItems.join("")+"</ul></li>");
                                groupSubItems = [];
                            }
                            var link = menuList[i].text.replace(/\"/g,'\'');
                            if(link.indexOf("javascript:customFileAction_")==0)
                            {
                                var method = link.split("_")[1].split("(")[0];
                                link = link.replace("_" + method, "").replace("customFileAction", "customFileActionProxy").replace("()", "('"+method+"')");
                            }
                            if(groupStart)
                            {
                                if (!currentPrivs || !menuList[i].requiredPriv || currentPrivs.indexOf(menuList[i].requiredPriv) >= 0 || menuList[i].name.toString().indexOf("(custom):")==0)
                                {
                                    if(link.endsWith(":external"))
                                    {
                                        link = link.replace(":external", "");
                                        if(isGroupRoot)
                                            mainMenu.append("<li class='groupRoot menuItem "+val+"'><a meta=\""+menuList[i].name+"\" target=\"_blank\" class='menuLink' href=\"" + link + "\">" + text + "</a></li>");
                                        else
                                            groupSubItems.push("<li class='groupSubItem menuItem "+val+"'><a meta=\""+menuList[i].name+"\" target=\"_blank\" class='menuLink' href=\"" + link + "\">" + text + "</a></li>");
                                    }
                                    else
                                    {
                                        if(isGroupRoot)
                                            mainMenu.append("<li class='groupRoot menuItem "+val+"'><a meta=\""+menuList[i].name+"\" class='menuLink' href=\"javascript:void(0);\">" + text + "</a></li>");
                                        else
                                            groupSubItems.push("<li class='groupSubItem menuItem "+val+"'><a meta=\""+menuList[i].name+"\" class='menuLink' href=\"" + link + "\">" + text + "</a></li>");
                                    }
                                }
                            }
                            else if (!currentPrivs || !menuList[i].requiredPriv || currentPrivs.indexOf(menuList[i].requiredPriv) >= 0 || menuList[i].name.toString().indexOf("(custom):")==0)
                            {
                                if(!isGroupSubItem && !isGroupRoot)
                                {
                                    if(link.endsWith(":external"))
                                    {
                                        link = link.replace(":external", "");
                                        mainMenu.append("<li class='menuItem "+val+"'><a meta=\""+menuList[i].name+"\" target=\"_blank\" class='menuLink' href=\"" + link + "\">" + text + "</a></li>");
                                    }
                                    else
                                        mainMenu.append("<li class='menuItem "+val+"'><a meta=\""+menuList[i].name+"\" class='menuLink' href=\"" + link + "\">" + text + "</a></li>");
                                }
                            }
                            if(renderLastItem && groupLastItem && groupSubItems.length>0)
                            {
                                mainMenu.find(".groupRoot:last").after("<li class='navbarGroup'><ul class='groupMenu'>"+groupSubItems.join("")+"</ul></li>");
                                groupSubItems = [];
                            }
                        }
                        mainNav.hide();
                    }
                    mainNav.find('.groupRoot').find("a").each(function(){
                        if(!$(this).parent().next().is(".navbarGroup") || $(this).parent().next().find("li[style!='display: none;']").length==0)
                        {
                            $(this).parent().hide();
                            return;
                        }
                        else
                            $(this).parent().show();
                        $(this).unbind().click(function(event) {
                            mainNav.find(".navbarGroup").hide();
                            var menu = $(this).closest('li').next("li").show();
                            if(menu.is(".navbarGroup"))
                            {
                                menu.find('ul').css("left", $(this).offset().left - 20);
                            }
                            $(document).unbind("mouseup.navbarGroup").bind("mouseup.navbarGroup", function(){
                                menu.hide();
                                $(document).unbind("mouseup.navbarGroup");
                            });
                            $(document).unbind("keyup.navbarGroup").bind("keyup.navbarGroup", function(e){
                                if( e.which=== 27 || e.keyCode === 27 ) {
                                    menu.hide();
                                    $(document).unbind("keyup.navbarGroup");
                                }
                            });
                            return false;
                        });
                    });

                    var menuInterval;
                    mainNav.find(".navbarGroup").find("ul").hover(function() {
                        $(this).closest("li").prev().find("a:first").addClass('hovered');
                        if(menuInterval)
                            clearInterval(menuInterval);
                    }, function() {
                        var that = $(this);
                        var elem = $(this).closest("li").prev().find("a:first")
                        if(elem.hasClass('hovered'))
                        {
                            elem.removeClass('hovered');
                            menuInterval = setInterval(function(){
                                that.parent().hide();
                                clearInterval(menuInterval);
                            }, 500);
                        }
                    });

                    //Highlight pase button if there are files copied
                    highlightPasteButton();
                    if (window.slideshowOnly) {
                        $("div.mainNavigation").find("a[href!='javascript:doLogout();']").parent().remove();
                    }
                    //Build context menu
                    var menuListContextMenu = $(document).data("menuListContextMenu");
                    if (menuListContextMenu) {
                        var mainMenu = $("#myMenu");
                        mainMenu.empty();
                        var groupSubItems = [];
                        var groupStart = false;
                        var groupLastItem = false;
                        for (var i = 0; i < menuListContextMenu.length; i++) {
                            var text = menuListContextMenu[i].name.toString();
                            var isGroupRoot = menuListContextMenu[i].isgroupRoot.toString() == "true";
                            var isGroupSubItem = menuListContextMenu[i].isSubItem.toString() == "true";

                            var val = text.substring(1, text.indexOf(":") - 1);
                            text = text.substring(text.indexOf(":") + 1, text.length);
                            var command = menuListContextMenu[i].text;
                            if(command.indexOf("javascript:customFileAction_")==0)
                            {
                                var method = command.split("_")[1].split("(")[0];
                                command = command.replace("_" + method, "").replace("customFileAction", "customFileActionProxy").replace("()", "('"+method+"')");
                            }
                            if (command.indexOf("()") >= 0) {
                                command = command.replace(")", "true)");
                            } else {
                                command = command.replace(")", ",true)");
                            }
                            command = command.replace(/\"/g,'\'');
                            command = crushFTPTools.encodeURILocal(command);
                            var onEmpty = "";
                            if(buttonsToShowOnEmptyFolder.has(menuListContextMenu[i].text) || menuListContextMenu[i].text.indexOf('javascript:performAction("downloadSyncApp",')>=0)
                                onEmpty = " onEmptyItem ";

                            if(isGroupRoot)
                            {
                                if(groupStart && groupSubItems.length>0)
                                {
                                    mainMenu.append("<li class='navbarGroupContext'><ul class='groupMenuContext'>"+groupSubItems.join("")+"</ul></li>");
                                    groupSubItems = [];
                                }
                                groupStart = true;

                            }

                            if(!isGroupSubItem && !isGroupRoot)
                            {
                                groupLastItem = groupStart;
                                groupStart = false;
                            }
                            var renderLastItem = false;
                            if(i == menuListContextMenu.length-1 && groupSubItems.length>0)
                            {
                                groupLastItem = true;
                                renderLastItem = true;
                            }

                            if(!renderLastItem && groupLastItem && groupSubItems.length>0)
                            {
                                mainMenu.append("<li class='navbarGroupContext'><ul class='groupMenuContext'>"+groupSubItems.join("")+"</ul></li>");
                                groupSubItems = [];
                            }
                            if(groupStart)
                            {

                                if(isGroupRoot)
                                    mainMenu.append('<li class="groupRootContext menuItem ' + onEmpty + val.toLowerCase().replace(/ /g, "") + '"><a href="javascript:void(0);" command="' + unescape(command) + '">' + text + '</a></li>');
                                else
                                    groupSubItems.push('<li class="groupSubItemContext menuItem ' + onEmpty + val.toLowerCase().replace(/ /g, "") + '"><a href="javascript:void(0);" command="' + unescape(command) + '">' + text + '</a></li>');
                            }
                            else
                            {
                                if(renderLastItem && groupLastItem && groupSubItems.length>0)
                                {
                                    mainMenu.append("<li class='navbarGroupContext'><ul class='groupMenuContext'>"+groupSubItems.join("")+"</ul></li>");
                                    groupSubItems = [];
                                }
                                else if(!isGroupSubItem && !isGroupRoot)
                                {
                                    mainMenu.append('<li class="menuItem ' + onEmpty + val.toLowerCase().replace(/ /g, "") + '"><a href="javascript:void(0);" command="' + unescape(command) + '">' + text + '</a></li>');
                                }
                            }
                            if(renderLastItem && groupLastItem && groupSubItems.length>0)
                            {
                                mainMenu.append("<li class='navbarGroupContext'><ul class='groupMenuContext'>"+groupSubItems.join("")+"</ul></li>");
                                groupSubItems = [];
                            }
                        }
                    }
                    if ($(document).data("username") == "anonymous") {
                        //No logout link for anonymous
                        $("ul.topnav,#myMenu").find("a:contains('Logout')").parent().remove();
                    } else {
                        $("ul.topnav,#myMenu").find("a:contains('Login')").parent().remove();
                    }
                    $("a[href$='/WebInterface/admin/index.html']").unbind("click.loading").bind("click.loading",function(){
                        window.logoutInitiated = true;
                    });
                    //Apply customization options
                    applyCustomizations();
                    applyButtonLocalizations();
                    var _loc = $(document).data("localizations");
                    if (mainMenu && _loc["CopyLinkText"] && mainMenu.find("li.copydirectlink").length > 0 && mainMenu.find("li.copydirectlink").find("a").length > 0) {
                        mainMenu.find("li.copydirectlink").find("a").attr('id', 'CopyLinkText').text(_loc["CopyLinkText"]);
                    }
                    if(mainNav.find("li").length>0)
                       mainNav.show();
                    if(typeof window.navigationMenuItemChangeHTML != "undefined")
                    {
                        for(var item in window.navigationMenuItemChangeHTML)
                        {
                            try{
                                var val = window.navigationMenuItemChangeHTML[item];
                                $("a:exacttext('"+item+"')", mainNav).html(val);
                            }
                            catch(ex){}
                        }
                    }
                    setTimeout(function(){
                        mainNav.find('.groupRoot').find("a").each(function(){
                            if(!$(this).parent().next().is(".navbarGroup") || $(this).parent().next().find("li[style!='display: none;']").length==0)
                            {
                                $(this).parent().hide();
                                return;
                            }
                            else
                                $(this).parent().show();
                        });
                    },300);
                    var languageMenu = $("#languageMenu");
                    if(window.showOnlyTheseLanguages)
                    {
                        var langs = window.showOnlyTheseLanguages.split(",");
                        languageMenu.find("li").hide();
                        for (var i = 0; i < langs.length; i++) {
                            var curLang = $.trim(langs[i]).toLowerCase();
                            if(curLang && curLang.length>2)
                            {
                                curLang = curLang.charAt(0).toUpperCase() + curLang.slice(1);
                                languageMenu.find("#languageName" + curLang).show().parent().show();
                            }
                        }
                    }
                    if(typeof window.onMenuRendering!="undefined")
                    {
                        window.onMenuRendering($("ul.topnav,#myMenu"));
                    }
                }
                //Clear current context
                window.clearContext = function () {
                    $(document).removeData("currentContext");
                }
                //Retrive current context
                window.currentContext = function () {
                    var curElem = $(document).data("currentContext");
                    clearContext();
                    if (curElem) {
                        return curElem.elem;
                    } else {
                        return false;
                    }
                }

                window.isCrush7Ready = function()
                {
                    var version = $(document).data("crushftp_version");
                    if(version)
                    {
                        version = parseInt(version.replace( /^\D+/g, ''));
                        if(version && version != NaN)
                        {
                            return version >= 7;
                        }
                    }
                    return false;
                }

                window.verifyUserStatus = function()
                {
                    var targetUrl = unescape(window.location.toString().split("#")[0]);
                    bindUserName(false, function (response, username) {
                        if (response == "failure") {
                            window.location = "/WebInterface/login.html?link=" + targetUrl;
                        }
                        else if ($.cookie(o.CookieAutoAppletFlag) + "" == "true")
                        {
                            if (!$(document).data("appletLoaded")) $(document).data("appletLoaded", false);
                            if (!$(document).data("appletLoaded")) {
                                loadApplet(true, function (pnl) {
                                    if(!$(".appletNote").is(":visible") && window.cancelDropAction)
                                    {
                                        window.cancelDropAction(true);
                                    }
                                });
                            }
                        }
                    });
                }

                //Login status thread
                function userLoginStatusCheckThread() {
                    if (!window.loginStatusThreadInterval) {
                        window.loginStatusThreadInterval = setInterval(window.verifyUserStatus, 600000);
                    }
                }

                //Bind user name
                function bindUserName(isInit, callBack) { /* Data to POST to receive file listing */
                    var obj = {
                        command: "getUsername",
                        random: Math.random()
                    }; /* Make a call and receive list */
                    var username = "anonymous";
                    obj.c2f = crushFTPTools.getCrushAuth();
                    $.ajax({
                        type: "POST",
                        url: o.ajaxCallURL,
                        data: obj,
                        error: function (XMLHttpRequest, textStatus, errorThrown) {
                            errorThrown = errorThrown || "getUsername failed";
                            $.growlUI("Error : " + errorThrown, errorThrown, o.GrowlTimeout, "", o.GrowlWithCloseButton);
                            callBack("failure", username);
                        },
                        success: function (msg) {
                            var responseText = msg;
                            try {
                                var response = msg.getElementsByTagName("response");
                                response = IE(response[0]).textContent;
                                if (response == "success") {
                                    username = msg.getElementsByTagName("username");
                                    username = IE(username[0]).textContent;
                                }
                                username = username || "";
                                if (username == "anonymous" || username == "") {
                                    $(document).data("username", "anonymous");
                                } else {
                                    $(document).data("username", username);
                                }
                                $("#crumbs").find(".userHome").text($(document).data("username"));
                            } catch (ex) {
                                if (callBack) {
                                    callBack("failure", username);
                                    return false;
                                }
                            }
                            if (isInit) {
                                renderButtons();
                                var filesBasket = $("#filesBasket").dialog({
                                    title : getLocalizationKey("BasketHeaderText") || "Files in the Basket",
                                    autoOpen: false,
                                    closeOnEscape: false,
                                    draggable: true,
                                    width : 840,
                                    minWidth : 840,
                                    height : 600,
                                    minHeight : 600,
                                    //position: ["right", 5],
                                    dialogClass : "basketWindow",
                                    buttons: {},
                                    resizable: true,
                                    create: function(event, ui) {
                                        //$(event.target).parent().css('position', 'fixed');
                                    },
                                    resizeStop: function(event, ui) {
                                        var position = [(Math.floor(ui.position.left) - $(window).scrollLeft()),
                                                         (Math.floor(ui.position.top) - $(window).scrollTop())];
                                        $(event.target).parent().css('position', 'fixed');
                                        //$(filesBasket).dialog('option','position',position);
                                        $(filesBasket).dialog('option','position', { my: "center", at: "center", of: window });
                                        var h = filesBasket.dialog("widget").height();
                                        h -= window.basketSizeLimiter || 160;
                                        if(filesBasket.find(".ui-state-highlight").length>0)
                                            h = h - filesBasket.find(".ui-state-highlight").height() - 10;
                                        if(h<360)h=360;
                                        filesBasket.find("div.filesSelectedInBasket").height(h + "px");
                                    },
                                    open:function(event, ui){
                                        $('.basketWindow').find(".ui-dialog-title:first").attr("id", "BasketHeaderText");
                                        var title = getLocalizationKey("BasketHeaderText") || "Files in the Basket";
                                        $("#BasketHeaderText").text(title);
                                        if($.CrushFTP.browseAdvanced)
                                        {
                                            window.cancelDropAction(true);
                                        }
                                        filesBasket.parent().addClass("downloadBasket");
                                        var closeButton = filesBasket.parent().find(".ui-dialog-titlebar-close").show().unbind("hover");
                                        if(closeButton.parent().find("a.fullScreen").length==0)
                                        {
                                            closeButton.after('<a title="Maximize" href="#" role="button" style="float: right;margin-right: 13px;margin-top: 0px;" class="fullScreen ui-corner-all"><span class="ui-icon ui-icon-arrow-4-diag">Fullscreen</span></a>');
                                            var fullScreenLink = closeButton.parent().find("a.fullScreen").click(function(){
                                                var isFullS = filesBasket.attr("maximized");
                                                if(!isFullS)
                                                {
                                                    $(this).find("span").addClass("ui-icon-arrow-1-sw").removeClass("ui-icon-arrow-4-diag");
                                                    $(this).attr("title", "Resize to original size");
                                                    var h = window.innerHeight ? window.innerHeight : $(window).height();
                                                    var w = $(window).width() - 10;
                                                    h -= 5;
                                                    filesBasket.parent().css("position", "fixed").css("zIndex", "2100").removeClass('basketWindow');
                                                    filesBasket.dialog("widget").animate({
                                                        width: w+'px',
                                                        height: h+'px'
                                                      }, {
                                                      duration: 100,
                                                      step: function() {
                                                        filesBasket.dialog('option', 'position', { my: "center", at: "center", of: window });
                                                      }
                                                    });
                                                    filesBasket.dialog('option', 'resizable', false);
                                                    filesBasket.dialog('option', 'draggable', false);
                                                    filesBasket.height(h + "px");
                                                    h -= window.basketSizeLimiter || 160;
                                                    if(filesBasket.find(".ui-state-highlight").length>0)
                                                        h = h - filesBasket.find(".ui-state-highlight").height() - 10;
                                                    filesBasket.find("div.filesSelectedInBasket").height(h + "px");
                                                    filesBasket.attr("maximized", "true");
                                                    $("body").css("overflow", "hidden");
                                                }
                                                else
                                                {
                                                    $(this).attr("title", "Maximize");
                                                    $(this).find("span").addClass("ui-icon-arrow-4-diag").removeClass("ui-icon-arrow-1-sw");
                                                    filesBasket.parent().css("position", "absolute").css("zIndex", "inherit").addClass('basketWindow');
                                                    $("body").css("overflow", "auto");
                                                    filesBasket.dialog("widget").animate({
                                                        width: '840px',
                                                        height:'580px'
                                                      }, {
                                                      duration: 100,
                                                      step: function() {
                                                        filesBasket.dialog('option', 'position', { my: "center", at: "center", of: window });
                                                      }
                                                    });
                                                    filesBasket.dialog('option', 'resizable', true);
                                                    filesBasket.dialog('option', 'draggable', true);
                                                    filesBasket.height("auto");
                                                    if(typeof window.basketSizeLimiter != "undefined")
                                                        filesBasket.find("div.filesSelectedInBasket").height("370px");
                                                    else
                                                        filesBasket.find("div.filesSelectedInBasket").height("440px");
                                                    filesBasket.removeAttr("maximized");
                                                }
                                                return false;
                                            });
                                            if(window.basketKeepMaximized)
                                                fullScreenLink.trigger("click");
                                        }
                                        else
                                        {
                                            if(filesBasket.attr("maximized"))
                                            {
                                                filesBasket.removeAttr("maximized");
                                            }
                                            else
                                            {
                                                filesBasket.attr("maximized", "true");
                                            }
                                            closeButton.parent().find("a.fullScreen").trigger("click");
                                        }
                                    },
                                    close : function()
                                    {
                                        $("body").css("overflow", "auto");
                                        filesBasket.parent().css("zIndex", "inherit").removeClass('basketWindow');
                                        if($.CrushFTP.browseAdvanced)
                                        {
                                            //window.showDropArea();
                                        }
                                    }
                                });
                            } else {
                                if (callBack) {
                                    callBack(response, username);
                                }
                            }
                        }
                    });
                }

                window.generatePasswordBasedOnRules = function(){
                    var passwords = [];
                    var maxChars = parseInt($(document).data("random_password_length")) || 8;
                    var randomPass = function(length, numeric, possible){
                        length = length || 8;
                        var randomId = "";
                        possible = possible || "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789";
                        if(numeric)
                        {
                            possible = "0123456789";
                        }
                        for( var i=0; i < length; i++ )
                            randomId += possible.charAt(Math.floor(Math.random() * possible.length));
                        return randomId;
                    }
                    passwords.push(randomPass(maxChars));
                    var minNumeric = $(document).data("min_password_numbers") || 0;
                    var minLower = $(document).data("min_password_lowers") || 0;
                    var minUpper = $(document).data("min_password_uppers") || 0;
                    var minSpecial = $(document).data("min_password_specials") || 0;
                    if(minNumeric>0 || minLower>0 || minUpper>0 || minSpecial>0)
                    {
                        passwords = [];
                        if(minNumeric>0)
                        {
                            passwords.push(randomPass(minNumeric, true));
                        }
                        if(minLower>0)
                        {
                            passwords.push(randomPass(minLower, false, 'abcdefghijklmnopqrstuvwxyz'));
                        }
                        if(minUpper>0)
                        {
                            passwords.push(randomPass(minUpper, false, 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'));
                        }
                        if(minSpecial>0)
                        {
                            passwords.push(randomPass(minSpecial, false, '!$^&*()_-+=[]{};,.<>?~'));
                        }
                    }
                    else{
                        passwords.push(randomPass());
                    }
                    passwords.sort(function(a,b){ return( parseInt( Math.random()*10 ) %2 );});
                    var pass = passwords.join("");
                    pass = pass.shuffle();
                    if(pass.length>maxChars)
                    {
                        pass = pass.substr(0, maxChars);
                    }
                    else if(pass.length<maxChars)
                    {
                        pass += randomPass(maxChars - pass.length, true);
                    }
                    return pass.shuffle();
                }

                //Generate random password
                window.generateRandomPassword = function(length) {
                    length = length || 8;
                    var randomId = "";
                    var possible = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789";
                    for (var i = 0; i < length; i++)
                    randomId += possible.charAt(Math.floor(Math.random() * possible.length));
                    return randomId;
                }

                window.bindDataToForm = function(_panel, curItem){
                    var attrToUse = "name";
                    curItem = curItem.split("&");
                    _panel.find("input[type='text'],input[type='password'], textarea, select").each(function(){
                        if($(this).attr(attrToUse))
                        {
                            if(curItem)
                            {
                                for(var i=0; i<curItem.length;i++)
                                {
                                    var elem = curItem[i].split("=");
                                    if(elem[0] == $(this).attr(attrToUse))
                                    {
                                        $(this).val(crushFTPTools.decodeURILocal(elem[1]));
                                    }
                                }
                            }
                            else
                            {
                                $(this).val("");
                            }
                        }
                    });
                    _panel.find("input[type='checkbox']").each(function(){
                        if($(this).attr(attrToUse))
                        {
                            if(curItem)
                            {
                                var flag = false;
                                for(var i=0; i<curItem.length;i++)
                                {
                                    var elem = curItem[i].split("=");
                                    if(elem[0] == $(this).attr(attrToUse) && crushFTPTools.decodeURILocal(elem[1]) == $(this).val())
                                    {
                                        flag = true;
                                    }
                                }
                                if(flag)
                                    $(this).attr("checked", "checked");
                                else
                                    $(this).removeAttr("checked");
                            }
                            else
                                $(this).removeAttr("checked");
                        }
                    });
                    _panel.find("input[type='radio']").each(function(){
                        if($(this).attr(attrToUse))
                        {
                            if(curItem)
                            {
                                var flag = false;
                                for(var i=0; i<curItem.length;i++)
                                {
                                    var elem = curItem[i].split("=");
                                    if(elem[0] == $(this).attr(attrToUse) && crushFTPTools.decodeURILocal(elem[1]) == $(this).val())
                                    {
                                        flag = true;
                                    }
                                }
                                if(flag)
                                {
                                    $(this).parent().find("input[type='radio']").removeAttr("checked");
                                    $(this).attr("checked", "checked");
                                }
                                else
                                    $(this).removeAttr("checked");
                            }
                            else
                                $(this).removeAttr("checked");
                        }
                    });
                };

                //Bind user customization info
                function bindUserCustomizationInfo(callback) {
                    if(window.retryGetUserInfo && window.retryGetUserInfo > 3)
                    {
                        //alert("There was a problem while loading user info, you will be logged out.\n\n Try after re-login, if problem persists contact administrator");
                        doLogout();
                        return false;
                    }
                    var mainNav = $("#mainNavigation").hide();

                    var obj = {
                        command: "getUserInfo",
                        path: crushFTPTools.encodeURILocal(hashListener.getHash().toString().replace("#", "")),
                        random: Math.random(),
                        c2f : crushFTPTools.getCrushAuth()
                    };

                    function applyUserInfoToLayout(msg)
                    {
                        var responseText = msg;
                        var metaInfo = [];
                        var userInfo = {};
                        $(msg).find("*").each(function(){
                            var tag = $(this).prop("tagName");
                            if(tag.toLowerCase().indexOf("meta_")==0)
                            {
                                metaInfo[tag] = $(this).text();
                            }
                            if(tag === "first_name" || tag === "last_name" || tag === "email" || tag === "username" || tag === "user_name" || tag === "root_dir_name")
                                userInfo[tag] = $(this).text();
                        });
                        window.metaInfo = metaInfo;
                        window.userInfo = userInfo;
                        var buttons = msg.getElementsByTagName("buttons_subitem");
                        //Go through various customizations option and show items based on customization
                        if (msg.getElementsByTagName("expire_password_when")[0]) {
                            var expire_password_when = IE(msg.getElementsByTagName("expire_password_when")[0]).textContent;
                            if (expire_password_when && expire_password_when.length > 0) $.growlUI(getLocalizationKey("PasswordExpiringMsgText"), expire_password_when, o.GrowlTimeout, "growlError", o.GrowlWithCloseButton);
                        }
                        var user_priv_options = IE(msg.getElementsByTagName("user_priv_options")[0]).textContent;
                        var display_alt_logo = IE(msg.getElementsByTagName("display_alt_logo")[0]).textContent;
                        window.temp_accounts_length = $(msg).find("temp_accounts_length").text() || 4;
                        window.temp_upload_ext = $(msg).find("temp_upload_ext").text() || "";
                        var altDomains = $(msg).find("alt_http_domains").text() || "";
                        altDomains = altDomains ? altDomains.replace("alt_http_domains", "") : "";
                        if(altDomains){
                            if(altDomains.indexOf(";")>=0)
                                altDomains = altDomains.split(";");
                            else
                                altDomains = altDomains.split("\n");
                            window.alternate_domains = altDomains;
                        }
                        if(display_alt_logo && display_alt_logo == "false")
                        {
                            $(document).data("disableDirectoryLogo", true);
                        }
                        if(msg.getElementsByTagName("user_name") && msg.getElementsByTagName("user_name").length>0)
                        {
                            var user_name = IE(msg.getElementsByTagName("user_name")[0]).textContent;
                            var loggedinText = getLocalizationKey("LoggedInAsLabelText") || "Logged in as :";
                            if(user_name)
                                $("#loggedInAs").prepend("<span class='ui-priority-primary' id='LoggedInAsLabelText'>"+loggedinText+"</span>" + user_name + "");
                        }
                        if(msg.getElementsByTagName("account_expire") && msg.getElementsByTagName("account_expire").length>0)
                        {
                            var account_expire = IE(msg.getElementsByTagName("account_expire")[0]).textContent;
                            if(account_expire)
                            {
                                var expText = getLocalizationKey("AccountExpiresOnLabelText") || "Expires : ";
                                if(account_expire.indexOf("/")>0)
                                    $("#loggedInAs").append(", <span class='ui-priority-primary' id='AccountExpiresOnLabelText'>"+expText+"</span>" + account_expire + "");
                                else
                                {
                                    if(!isNaN(parseInt(account_expire)))
                                    {
                                        var dateInfo = account_expire.match(/../g);
                                        if(dateInfo && dateInfo != null)
                                        {
                                            try{
                                                var month = parseInt(dateInfo[0]) - 1;
                                                var dt = new Date(dateInfo[2] + "" + dateInfo[3], month, dateInfo[1], dateInfo[4], dateInfo[5]);
                                                var fdt = $.datepicker.formatDate("MM dd, yy", dt);
                                                var hrs = dt.getHours();
                                                var minute = dt.getMinutes();
                                                if(hrs<10)
                                                    hrs = "0"+hrs;
                                                if(minute<10)
                                                    minute = "0"+minute;
                                                fdt = fdt + " " + hrs + ":" + minute;
                                                $("#loggedInAs").append(", <span class='ui-priority-primary' id='AccountExpiresOnLabelText'>"+expText+"</span>" + fdt + "");
                                            }catch(ex){}
                                        }
                                    }
                                }
                            }
                        }
                        if(msg.getElementsByTagName("root_dir_name") && msg.getElementsByTagName("root_dir_name").length>0)
                        {
                            var root_dir_name = IE(msg.getElementsByTagName("root_dir_name")[0]).textContent;
                            $(document).data("root_dir_name", root_dir_name);
                        }
                        $(document).data("user_priv_options", user_priv_options);
                        if (user_priv_options && (user_priv_options.indexOf("(SITE_PASS)") >= 0 || user_priv_options.indexOf("(CONNECT)") >= 0)) {
                            var changePasswordPanel = $(".changePasswordPanel", "#userOptions").show();
                            $("#new_password1").val("");
                            changePasswordPanel.find("#btnGeneratePassword").unbind().click(function () {
                                $("#generated_password").val(window.generatePasswordBasedOnRules());
                                $("#passwordGeneratePanel").show();
                                return false;
                            });
                            $("#passwordGeneratePanel").hide();
                            $("#changePassword").find("a.usePassword").unbind().click(function () {
                                $("#new_password1").val($("#generated_password").val());
                                $("#new_password2").focus();
                                return false;
                            });
                            $("#changePassword").find("a.cancelPassword").unbind().click(function () {
                                $("#generated_password").val("");
                                $("#passwordGeneratePanel").hide();
                                return false;
                            });
                        } else {
                            $(".changePasswordPanel", "#userOptions").hide();
                        }

                        var menuListBar = [];
                        var menuListContextMenu = [];
                        for (var x = 0; x < buttons.length; x++) {
                            var opt = {};
                            opt.name = IE(buttons[x].getElementsByTagName("key")[0]).textContent;
                            opt.text = IE(buttons[x].getElementsByTagName("value")[0]).textContent;
                            opt.requiredPriv = IE(buttons[x].getElementsByTagName("requiredPriv")[0]).textContent;
                            opt.isgroupRoot = buttons[x].getElementsByTagName("isgroupRoot").length>0 ? IE(buttons[x].getElementsByTagName("isgroupRoot")[0]).textContent : "";
                            opt.isSubItem = buttons[x].getElementsByTagName("isSubItem").length>0 ? IE(buttons[x].getElementsByTagName("isSubItem")[0]).textContent : "";

                            if (IE(buttons[x].getElementsByTagName("for_menu")[0]).textContent == "true") {
                                menuListBar.push(opt);
                            }
                            if (IE(buttons[x].getElementsByTagName("for_context_menu")[0]).textContent == "true") {
                                menuListContextMenu.push(opt);
                            }
                        }
                        $(document).data("menuList", menuListBar);
                        $(document).data("menuListContextMenu", menuListContextMenu);
                        var customizationItems = msg.getElementsByTagName("customizations_subitem");
                        var customizations = [];
                        for (var x = 0; x < customizationItems.length; x++) {
                            var opt = {};
                            opt.key = IE(customizationItems[x].getElementsByTagName("key")[0]).textContent;
                            opt.value = "";
                            try {
                                opt.value = IE(customizationItems[x].getElementsByTagName("value")[0]).textContent;
                            } catch (e) {} //value may not exist.
                            customizations.push(opt);
                        }
                        $(document).data("customizations", customizations);
                        $(document).data("unique_upload_id", IE(msg.getElementsByTagName("unique_upload_id")[0]).textContent);
                        $(document).data("random_password_length", IE(msg.getElementsByTagName("random_password_length")[0]).textContent);
                        $(document).data("min_password_length", IE(msg.getElementsByTagName("min_password_length")[0]).textContent);
                        $(document).data("min_password_numbers", IE(msg.getElementsByTagName("min_password_numbers")[0]).textContent);
                        $(document).data("min_password_lowers", IE(msg.getElementsByTagName("min_password_lowers")[0]).textContent);
                        $(document).data("min_password_uppers", IE(msg.getElementsByTagName("min_password_uppers")[0]).textContent);
                        $(document).data("min_password_specials", IE(msg.getElementsByTagName("min_password_specials")[0]).textContent);
                        applyCustomizations();
                        if(!window.useOldUploader){
                            if(!window.newUploadAdded){
                                window.newUploadAdded = true;
                                $.getScript("/WebInterface/jQuery/upload/js/inject.js");
                            }
                            $("body").bind("newUploadPanelLoaded", function(){
                                setTimeout(function() {
                                    var customizations = $(document).data("customizations"); //Customizations from cache
                                    if(!window.useOldUploader && window.newUploadAdded && window.crushUpload && !window.newUploadCustomizationsApplied){
                                        window.newUploadCustomizationsApplied = true;
                                        window.crushUpload.applyCustomizations(customizations);
                                    }
                                }, 100);
                            });
                        }
                        // if(window.useChunkedDownload){
                        //     if(!window.chunkedDownloadAdded){
                        //         window.chunkedDownloadAdded = true;
                        //         $.getScript("/WebInterface/jQuery/download/js/inject.download.js");
                        //     }
                        // }
                        if(window.displayWelcomeNote)
                            displayWelcomeNote();
                        window.attachCalendarPopup($("#delayedUpload"));
                        window.attachCalendarPopup($("#searchDiv"));
                        if (!$(document).data("slideShowOnly")) {
                            if (currentView() == "Thumbnail") showTree($("#filesContainerDiv"), crushFTPTools.encodeURILocal(o.root), false);
                            else showTree($("#filesContainer"), crushFTPTools.encodeURILocal(o.root), false);
                        }
                        if(window.showUploadNotification)
                        {
                            if(Notification.permission !== 'granted'){
                                Notification.requestPermission();
                            }
                        }
                        if(typeof window.getUserInfo == "undefined")
                        {
                            window.getUserInfo = function(){
                                return $.xml2json(msg);
                            }
                            if(window.onUserInfoReady)
                                window.onUserInfoReady();
                        }
                        if(callback)
                            callback();
                    }
                    obj.c2f = crushFTPTools.getCrushAuth();
                    $.ajax({
                        type: "POST",
                        url: o.ajaxCallURL,
                        data: obj,
                        error: function (XMLHttpRequest, textStatus, errorThrown) {
                            errorThrown = errorThrown || "getUserInfo failed";
                            $.growlUI("Error : " + errorThrown, errorThrown, o.GrowlTimeout, "", o.GrowlWithCloseButton);
                            if(!window.retryGetUserInfo)
                                window.retryGetUserInfo = 0;
                            window.retryGetUserInfo+=1;
                            bindUserCustomizationInfo();
                        },
                        success: function (msg) {
                            try{
                                if($(msg).find("userInfo").length == 0)
                                {
                                    if(!window.retryGetUserInfo)
                                        window.retryGetUserInfo = 0;
                                    window.retryGetUserInfo+=1;
                                    bindUserCustomizationInfo();
                                }
                                else
                                    applyUserInfoToLayout(msg);
                            }
                            catch(ex){
                                if(!window.retryGetUserInfo)
                                        window.retryGetUserInfo = 0;
                                    window.retryGetUserInfo+=1;
                                    bindUserCustomizationInfo();
                            }
                        }
                    });
                }

                //Show welcome note
                window.displayWelcomeNote = function(always) {
                    var $elem = $("div#welcomeFormPanel");
                    var userName = $(document).data("username");
                    var buttonText = getLocalizationKey("WelcomeFormOkButtonText");
                    var _formShown = $.cookie(o.CookieWelcomeNote + "_" + userName);
                    if(_formShown && _formShown.length>0)
                        _formShown = "true";
                    else
                        _formShown = "false";
                    if(always)
                        _formShown = "false";

                    //Get form from server named messageForm, build form if exist and show to user
                    getCustomForm("messageForm", function (data, hasForm, formName, showAlways) {
                        if (hasForm) {
                            if (!showAlways) //If not to show always and shown already once, do nothing
                            {
                                var formShown = $.cookie(o.CookieWelcomeNote + "_" + userName + "_" + formName);
                                if (formShown && formShown.length > 0) return false;
                            }
                            //Build form and show in a popup
                            var welcomeForm = $("div.welcomeForm", "#welcomeFormPanel");
                            welcomeForm.html("<form id='frmWelcome' method='post' target='dummyIframe' action='/WebInterface/function/?command=discard&c2f="+crushFTPTools.getCrushAuth()+"'>" + data + "</form>").find("table").css("text-align", "left");
                            setCustomFormFieldAttributes(welcomeForm)
                            attachCalendarPopup(welcomeForm);
                            $("button#resetPasteForm", welcomeForm).unbind().click(function (event) {
                                welcomeForm.clearForm();
                                event.stopPropagation();
                                event.preventDefault();
                            });
                            welcomeForm.find("input").keydown(function (evt) {
                                var evt = (evt) ? evt : ((event) ? event : null);
                                if (evt.keyCode == 13) {
                                    $("button.submitForm", welcomeForm).click();
                                    return false;
                                } else if (evt.keyCode == 27) {
                                    $("button#resetPasteForm", welcomeForm).click();
                                    return false;
                                }
                            });
                            //Display error message for welcome note
                            function displayError(msg) {
                                var form = $("table.customForm", welcomeForm);
                                if (form.prev().hasClass("attention")) {
                                    form.prev().remove();
                                }
                                form.before("<div class='attention'>" + msg + "</div>");
                                form.prev().css("float", "none");
                            }
                            //Submit action
                            $("button.submitForm", welcomeForm).unbind().click(function (event) {
                                welcomeForm.find("form").submit();
                                event.stopPropagation();
                                event.preventDefault();
                                if (!validateForm("", welcomeForm)) {
                                    return;
                                }
                                var messageForm = welcomeForm;
                                var formClone = messageForm.find("form");
                                messageForm = serializeForm(formClone[0]);
                                if (messageForm.length == 0) {
                                    $.unblockUI();
                                    return;
                                }
                                messageForm += "&command=messageForm&random=" + Math.random()+"&c2f="+crushFTPTools.getCrushAuth();
                                var obj = messageForm;
                                welcomeForm.find("h2").addClass("spinner");
                                obj.c2f = crushFTPTools.getCrushAuth();
                                $.ajax({
                                    type: "POST",
                                    url: o.ajaxCallURL,
                                    data: obj,
                                    error: function (XMLHttpRequest, textStatus, errorThrown) {
                                        errorThrown = errorThrown || "messageForm failed";
                                        displayError("Error : " + errorThrown);
                                    },
                                    success: function (msg) {
                                        $("#welcomeFormPanel").find("h2").removeClass("spinner");
                                        var responseText = msg;
                                        var response = msg.getElementsByTagName("response");
                                        response = IE(response[0]).textContent;
                                        if (response.toLowerCase() == "success") {
                                            var options = {
                                                path: '/',
                                                expires: 365
                                            };
                                            if (!showAlways) {
                                                $.cookie(o.CookieWelcomeNote + "_" + userName + "_" + formName, true, options);
                                            }
                                            $.cookie(o.CookieWelcomeNote + "_" + userName, true, options);
                                            $.unblockUI();
                                        } else {
                                            displayError(getLocalizationKey("WelcomeNoteSubmitFormFailureMsgText"));
                                        }
                                    }
                                });
                                return false;
                            });
                            $.blockUI({
                                message: $elem,
                                css: {
                                    border: 'none',
                                    width: '650px',
                                    padding: '15px',
                                    color: '#000',
                                    'border': '1px solid ' + getPopupColor(),
                                    'background-color': getPopupColor(true),
                                    'margin-left': '-320px',
                                    left: '50%',
                                    position: 'absolute',
                                    top: '10%',
                                    '-webkit-border-radius': '10px',
                                    '-moz-border-radius': '10px',
                                    opacity: 1,
                                    '-webkit-box-shadow': '2px 5px 5px #373434',
                                    '-moz-box-shadow': '2px 5px 5px #373434'
                                }
                            });
                        }
                    }, buttonText, _formShown);
                }

                function execAfterDirLoad(){
                    if(window.onDirectoryLoad){
                        var destinationPath = unescape(hashListener.getHash().toString().replace("#", ""));
                        window.onDirectoryLoad(destinationPath);
                    }
                }

                //Load directory preview in top of window corner
                function loadDirectoryPreview() {
                    var destinationPath = crushFTPTools.encodeURILocal(hashListener.getHash().toString().replace("#", ""));
                    destinationPath = destinationPath || "/";
                    $("div.directoryPreview").hide();
                    var ok = true;
                    if (!$(document).data("disableDirectoryLogo")) $("div.directoryPreview").empty().append("<img id='directoryPreviewImg' src='" + destinationPath + ".logo.png' />");
                    $('#directoryPreviewImg').load(function () {
                        $('div.directoryPreview').show();
                    });
                }

                //Get localization key
                function getLocalizationKey(key) {
                    var _loc = $(document).data("localizations");
                    var defaultText = localizations[key];
                    if (_loc && _loc[key]) {
                        defaultText = _loc[key];
                    }
                    return defaultText;
                }
                window.getLocalizationKeyExternal = function(key)
                {
                    return getLocalizationKey(key);
                }

                window.localizeServerMessage = function(message)
                {
                    var valToReplace = [],
                        rxp = /{([^}]+)}/g,
                        curMatch;
                    while(curMatch = rxp.exec(message)) {
                        valToReplace.push(curMatch[1]);
                    }
                    if(valToReplace.length>0)
                    {
                        for(var i=0;i<valToReplace.length;i++)
                        {
                            var key = valToReplace[i];
                            var locVal = getLocalizationKey(key);
                            if(locVal)
                            {
                                message = message.replaceAll("{"+key+"}", locVal);
                            }
                        }
                    }
                    return message;
                }

                window.applyButtonLocalizations = function(){
                    var btns;
                    if(window.localizations && window.localizations.buttons)
                    {
                        btns = window.localizations.buttons;
                    }
                    if(window.dontShowButtonsInMainMenu)
                    {
                        $("ul.topnav").addClass('no-buttons');
                    }
                    $("ul.topnav, #myMenu").find("a").each(function(){
                        var baseText = $(this).attr("baseText");
                        var curText = baseText || $.trim($(this).text()).toLowerCase();
                        if(!baseText)
                        {
                            $(this).attr("baseText", curText);
                            $(this).attr("basetext_exact", $.trim($(this).text()));
                            $(this).attr("origText", curText);
                        }
                        if(btns)
                        {
                            var origText = $(this).attr("origText");
                            if(origText.indexOf("##")==0)
                            {
                                origText = origText.substring(origText.lastIndexOf("##") + 2, origText.length);
                                origText = $.trim(origText);
                            }
                            else if(origText.indexOf("##")>0)
                            {
                                origText = origText.substring(0, origText.indexOf("##"));
                                origText = $.trim(origText);
                            }
                            if(origText && typeof btns[origText] != "undefined")
                            {
                                $(this).text(btns[origText]);
                                $(this).attr("loctext", btns[origText]);
                            }
                            else if(curText && btns[curText])
                            {
                                $(this).text(btns[curText]);
                            }
                        }
                    });

                    var contextMenuPanel = $("#myMenu");
                    $("ul.topnav").find("a").each(function(){
                        var curText = $.trim($(this).attr("basetext_exact"));
                        var curElem = $(this);
                        var hasImage = false;
                        var locText = $.trim($(this).attr("loctext"));
                        if(curText && curText.indexOf("#")>=0)
                        {
                            var matches = [];
                            var pattern = /\#\#(.*?)\#\#/g;
                            var match;
                            while ((match = pattern.exec(curText)) != null)
                            {
                              matches.push(match[1]);
                            }
                            if(matches.length>0)
                            {
                                for (var i = 0; i < matches.length; i++) {
                                    var curImg = matches[i];
                                    var imgPath = "";
                                    if(curImg.toLowerCase().indexOf("http://")<0 && curImg.toLowerCase().indexOf("https://")<0)
                                    {
                                        imgPath = "/WebInterface/images/" + curImg;
                                    }
                                    else
                                    {
                                        imgPath = curImg;
                                    }
                                    curText = $.trim(curText.replace("##"+curImg+"##", "</div><div class='menuBtn' style='margin-left:-7px;background-image:url("+imgPath+");'></div><div class='menuText'>"));
                                };
                                curElem.html("<div class='menuText'>" + curText + "</div>");
                                if(locText || locText != "")
                                {
                                    var displayText = $.trim(curElem.text());
                                    curText = curText.replace("class='menuText'>" + displayText, "class='menuText'>" + locText);
                                    curText = curText.replace("class='menuText'> " + displayText, "class='menuText'> " + locText);
                                }
                                curElem.html("<div class='menuText'>" + curText + "</div>");
                                curElem.closest("li").removeClass('menuItem');
                                hasImage = true;
                            }
                        }
                        if(!hasImage)
                        {
                            curText = $.trim($(this).attr("loctext")) || $.trim($(this).attr("basetext_exact"));
                            var meta = $(this).attr("meta");
                            if(meta.indexOf("(")==0)
                            {
                                if($(this).closest("li").hasClass('groupRoot'))
                                {
                                    var imgPath = window.topMenuGroupItemIcon || "/WebInterface/jQuery/images/buttonIcons/menudown.png";
                                    curText = "<div class='menuText'></div><div class='menuText'>" + curText + " </div><div class='menuBtn group-down-icon' style='background-image:url("+imgPath+");'></div>";
                                    curElem.html(curText);
                                }
                                else
                                {
                                    meta = meta.replace("(", "");
                                    meta = meta.substring(0, meta.indexOf(")"));
                                    if(meta && meta.length>0)
                                    {
                                        //var imgPath = "url(/WebInterface/jQuery/images/buttonIcons/" + meta + ".png)";
                                        if(meta && $.trim(meta.toLowerCase())=="admin")
                                        {
                                            if(window.topMenuAdminMenuIconCustomImage)
                                            {
                                                var imgPath = window.topMenuAdminMenuIconCustomImage;
                                                if(imgPath.toLowerCase().indexOf("http://")<0 && imgPath.toLowerCase().indexOf("https://")<0)
                                                {
                                                    imgPath = "url(/WebInterface/images/" + imgPath + ")";
                                                }
                                                else
                                                {
                                                    imgPath = "url(" + imgPath + ")";
                                                }
                                                curText = "<div class='menuText'></div><div class='menuBtn' style='background-image:"+imgPath+";'></div><div class='menuText'>" + curText + "</div>";
                                                curElem.html(curText);
                                            }
                                        }
                                        else
                                        {
                                            curText = "<div class='menuText'>" + curText + "</div>";
                                            curElem.html(curText);
                                        }
                                        /*if(window.useContextMenuIconsInTopBar)
                                        {
                                            var relContextItem = contextMenuPanel.find("li." + meta);
                                            if(window.useContextmenuHoverIconInTopBar)
                                            {
                                                if(relContextItem.length>0)
                                                {
                                                    relContextItem.addClass('hover');
                                                    if(relContextItem.find("a").css("background-image"))
                                                    {
                                                        imgPath = relContextItem.find("a").css("background-image") + ";background-repeat:no-repeat;background-position:0px 2px";
                                                    }
                                                    relContextItem.removeClass('hover');
                                                }
                                            }
                                            else
                                                imgPath = relContextItem.find("a").css("background-image") || imgPath;

                                        }*/

                                    }
                                    else
                                        curElem.html("<div class='menuText'>" + curText + "</div>");
                                }
                            }
                        }
                        else if($(this).closest("li").hasClass('groupRoot') && curElem.find(".menuBtn").length<=1)
                        {
                            var imgPath = window.topMenuGroupItemIcon || "/WebInterface/jQuery/images/buttonIcons/menudown.png";
                            curElem.append("<div class='menuBtn group-down-icon' style='background-image:url("+imgPath+");'></div>");
                        }
                    });
                    contextMenuPanel.find("a").each(function(){
                        var locText = $.trim($(this).attr("loctext"));
                        var curText = $.trim($(this).attr("basetext_exact"));
                        var curElem = $(this);
                        if(curText && curText.indexOf("#")>=0)
                        {
                            var matches = [];
                            var pattern = /\#\#(.*?)\#\#/g;
                            var match;
                            while ((match = pattern.exec(curText)) != null)
                            {
                              matches.push(match[1]);
                            }

                            for (var i = 0; i < matches.length; i++) {
                                var curImg = matches[i];
                                var imgPath = "";
                                if(curImg.toLowerCase().indexOf("http://")<0 && curImg.toLowerCase().indexOf("https://")<0)
                                {
                                    imgPath = "url(" + "/WebInterface/images/" + curImg + ")";
                                }
                                else
                                    imgPath = "url(" + curImg + ")";

                                curText = curText.replace("##"+curImg+"##", "");
                                if(imgPath.indexOf("-hover")>=0){
                                    curElem.css("background-image", imgPath.replace("-hover", ""));
                                    curElem.hover(function() {
                                        $(this).css("background-image", imgPath);
                                    }, function(){
                                        $(this).css("background-image", imgPath.replace("-hover", ""));
                                    });
                                }
                                else{
                                    curElem.css("background-image", imgPath);
                                }
                            };
                            if(locText || locText != "")
                            {
                                var displayText = curText;
                                curText = curText.replace(displayText, locText);
                                curText = curText.replace(" " + displayText, locText);
                            }
                            curElem.html("<div class='menuText'>" + curText + "</div>");
                        }
                    });
                };

                //Apply localizations
                window.applyLocalizations = function () {
                    var _loc = $(document).data("localizations"); //All localizations from cache
                    if(typeof window.persistentLocalizationStrings != "undefined")
                    {
                        _loc = $.extend(_loc, window.persistentLocalizationStrings);
                    }
                    if (_loc) {
                        for (var i in _loc) //Loop through localizations
                        {
                            if (i) {
                                var key = i.toString();
                                var val = _loc[i].toString();
                                if (key && (val || val == "") && key!="slideshow") {
                                    //If button or input, set value
                                    if (key.toLowerCase().indexOf("button") >= 0 || key.toLowerCase().indexOf("input") >= 0) {
                                        $("." + key).val(val);
                                        try{
                                            $("." + key).text(val);
                                        }catch(ex){}
                                    } else if (key.toLowerCase().indexOf("byclass") >= 0 || key.toLowerCase().indexOf("multiple") >= 0) //If localization is for multiple items, set html
                                    {
                                        $("." + key).html(val);
                                    }
                                    else if(key.toLowerCase().indexOf("selectoptiontext")>0)
                                    {
                                        $("[_loc='"+key+"']").text(val);
                                    }
                                    else if (key.toLowerCase().indexOf("settitle") >= 0 ) //If localization is for tooltip title
                                    {
                                        if (key.toLowerCase().indexOf("class") >= 0){
                                          var itm = $("." + key).attr("title", val);
                                          if(itm.hasClass('vtip'))
                                          {
                                            itm.removeData('thisInfo').unbind('.cluetip');
                                            vtip(itm);
                                          }
                                        }
                                        else{
                                          var itm = $("#" + key).attr("title", val);
                                          if(itm.hasClass('vtip'))
                                          {
                                            itm.removeData('thisInfo').unbind('.cluetip');
                                            vtip(itm);
                                          }
                                        }
                                    } else if(key == "webInterfacePageTitle"){
                                        document.title = val;
                                        try{
                                            pageTitleNotification.vars.OriginalTitle = val;
                                        }catch(ex){}
                                        window.hasLocalTitle = true;
                                    } else {
                                        $("#" + key).html(val);
                                    }
                                }
                            }
                        }
                        //Various hard coded localization
                        var date1 = $("select#date1_action", "div#searchDiv");
                        date1.find("option[value='after']").text(getLocalizationKey("SearchFormModifiedOptionAfterText"));
                        date1.find("option[value='before']").text(getLocalizationKey("SearchFormModifiedOptionBeforeText"));
                        var date2 = $("select#date2_action", "div#searchDiv");
                        date2.find("option[value='after']").text(getLocalizationKey("SearchFormModifiedOptionAfterText"));
                        date2.find("option[value='before']").text(getLocalizationKey("SearchFormModifiedOptionBeforeText"));
                        var sizeDropdown = $("select#size1_action, select#size2_action", "div#searchDiv");
                        sizeDropdown.find("option[value='bigger than']").text(getLocalizationKey("SearchFormSizeOptionBiggerThanText"));
                        sizeDropdown.find("option[value='smaller than']").text(getLocalizationKey("SearchFormSizeOptionSmallerThanText"));
                        var typeDropdown = $("select#type1_action", "div#searchDiv");
                        typeDropdown.find("option[value='file']").text(getLocalizationKey("SearchFormItemTypeOptionFileText"));
                        typeDropdown.find("option[value='folder']").text(getLocalizationKey("SearchFormItemTypeOptionFolderText"));
                        $("#filesContainer").find("td.thName").html(getLocalizationKey("TreeviewHeaderNameText"));
                        $("#filesContainer").find("td.thSize").html(getLocalizationKey("TreeviewHeaderSizeText"));
                        $("#filesContainer").find("td.thModified").html(getLocalizationKey("TreeviewHeaderModifiedText"));
                        $("#filesContainer").find("td.thPath").html(getLocalizationKey("TreeviewHeaderPathText"));
                        $("#filesContainer").find("td.thKeywords").html(getLocalizationKey("TreeviewHeaderKeywordsText"));
                        updatePageSizeOnLayout();
                        var curLangName = localizations.currentLanguageName;
                        var languageDisplayName = localizations["languageName"+curLangName];
                        if(languageDisplayName)
                        {
                            $("#currentLanguageName").text(languageDisplayName);
                        }
                        $("#crumbs").find(".refreshButton").attr("title", getLocalizationKey("refreshListingButtonTooltipText"));
                    }
                }

                function isNumeric(value) {
                    return /^\d+$/.test(value);
                }

                //Apply customizations
                function applyCustomizations() {
                    var customizations = $(document).data("customizations"); //Customizations from cache
                    if (!customizations) return;
                    if(!window.useOldUploader && window.newUploadAdded && window.crushUpload && !window.newUploadCustomizationsApplied){
                        window.newUploadCustomizationsApplied = true;
                        window.crushUpload.applyCustomizations(customizations);
                    }
                    /*if(window.hideFilter)
                        window.hideFilter("false");
                    if(window.hideCheckBoxColumn)
                        window.hideCheckBoxColumn();*/
                    var advUpload = $("#advancedBrowseOptionsDiv");
                    var nativeUpload = $("#nativeBrowseOptionsDiv");
                    var filesContainer = $("#filesContainer");
                    var searchDiv = $("#searchDiv");
                    for (var i=0;i<customizations.length;i++) //Loop through customizations
                    {
                        var custItem = customizations[i];
                        //Switch from key and apply customization based on key and value
                        switch (custItem.key) {
                        case "redirectRoot":
                            //Redirect root
                            window.redirectRoot = custItem.value;
                            break;
                        case "shareyyyymmdd":
                            // If share window to yse yyyymmdd format
                            window.Shareyyyymmdd = custItem.value == "true";
                            break;
                        case "shareddmmyyyy":
                            // If share window to yse ddmmyyyy format
                            window.Shareddmmyyyy = custItem.value == "true";
                            break;
                        case "customformyyyymmdd":
                            // If custom forms has to use yyyymmdd format for date
                            window.CustomFormyyyymmdd = custItem.value == "true";
                            break;
                        case "DATE_FORMAT_TEXT":
                            window.customDateFormat = custItem.value;
                            break;
                        case "dateSeparator":
                            window.dateSeparator = custItem.value;
                            break;
                        case "TIME_FORMAT_TEXT":
                            window.customTimeFormat = custItem.value;
                            break;
                        case "logo":
                            //Logo to show on layout
                            var logoLink = custItem.value;
                            if(logoLink.toLowerCase().indexOf("http://")<0 && logoLink.toLowerCase().indexOf("https://")<0)
                            {
                                logoLink = "/WebInterface/images/" + logoLink;
                            }
                            if($("div.logo", "#header").find("img").length>0)
                                $("div.logo", "#header").find("img").replaceWith("<img src='" + logoLink+ "' />");
                            else
                                $("div.logo", "#header").append("<img src='" + logoLink + "' />");
                            break;
                        case "linkOnLogo":
                            // Hyperlink on logo
                            var link = custItem.value;
                            if (link) {
                                if (!$("div.logo").find("img").parent().attr("href")) {
                                    if(link == "#")
                                        $("div.logo").find("img").wrap("<a href='" + link + "'></a>");
                                    else
                                       $("div.logo").find("img").wrap("<a target='_blank' href='" + link + "'></a>");
                                } else {
                                    $("div.logo").parent().attr("href", link);
                                }
                                if(window.logoLinkTarget){
                                    $("div.logo").parent().attr("target", window.logoLinkTarget);
                                }
                                $("div.logo").find("img").css("border", "none");
                            }
                            break;
                        case "linkTargetOnLogo":
                            // Hyperlink on logo
                            var linkTarget = custItem.value;
                            if (linkTarget) {
                                window.logoLinkTarget = linkTarget;
                                if ($("div.logo").find("img").parent().attr("href")) {
                                    $("div.logo").find("img").parent().attr("target", linkTarget);
                                }
                            }
                            break;
                        case "logoAlign":
                            //Allignment of logo on screen
                            if (custItem.value == "middle") {
                                $("div.logo").css("float", "none").addClass("logoCenter").parent().css("text-align", "center");
                            } else if (custItem.value == "right") {
                                $("div.logo").css("float", "right").addClass("logoCenter").parent().css("text-align", "right");
                            } else {
                                $("div.logo").css("float", "left").removeClass("logoCenter").parent().css("text-align", "left");
                            }
                            break;
                        case "title":
                            //Document title
                            if(!window.hasLocalTitle)
                            {
                                document.title = custItem.value;
                                try{
                                    pageTitleNotification.vars.OriginalTitle = custItem.value;
                                }catch(ex){}
                            }
                            break;
                        case "slideshowWindowTitle":
                            if(window.forSlideshow)
                            {
                                document.title = custItem.value;
                            }
                            break;
                        case "header":
                            //Header on layout
                            if($("div#headerText").text().length==0)
                                $("div#headerText").html(custItem.value).attr("id", "_headerText");
                            break;
                        case "hideUploadBar" :
                            //Hide new upload bar
                            if (custItem.value.toLowerCase() == "true")
                            {
                                $.cssRule({
                                    "#fileUploadBarHolder, #viewFileQueue, #globalProgressBar": [
                                        ["display", "none !important;"]
                                    ]
                                });

                                $("#fileQueueInfo").removeClass("ui-widget-content ui-corner-all").css("box-shadow", "none").css("-webkit-box-shadow", "none").css("-moz-box-shadow", "none").css("border", "none");

                                $.CrushFTP.uploadBarHidden = true;
                            }
                            break;
                        case "uploadBarInline" :
                            //Hide new upload bar
                            if (custItem.value.toLowerCase() == "true")
                            {
                                $("#fileRepo").css("position", "relative").css("max-width", "100%")

                                //$("#fileRepo").find("ul").css("max-height", "100px");

                                $.CrushFTP.uploadBarInline = true;
                            }
                            break;
                        case "hideGlobalUploadBar" :
                            //Hide new upload bar
                            if (custItem.value.toLowerCase() == "true")
                            {
                                $.cssRule({
                                    "#globalProgressBar": [
                                        ["display", "none"]
                                    ]
                                });
                            }
                            break;
                        case "hideDNDUploadInfoText" :
                            //Hide new upload bar
                            if (custItem.value.toLowerCase() == "true")
                            {
                                $.cssRule({
                                    "#browserDragdropInfoText": [
                                        ["display", "none"]
                                    ]
                                });
                            }
                            break;
                        case "showUploadNotification" :
                            //Hide new upload bar
                            if (custItem.value.toLowerCase() == "true")
                            {
                               window.showUploadNotification = true;
                            }
                            break;
                        case "dontShowUploadQueueCompletedGrowlMessage" :
                            //Hide new upload bar
                            if (custItem.value.toLowerCase() == "true")
                            {
                               window.dontShowUploadQueueCompletedGrowlMessage = true;
                            }
                            break;
                        case "disableUploadTimeLimit" :
                            //Hide new upload bar
                            if (custItem.value.toLowerCase() == "true")
                            {
                               window.disableUploadTimeLimit = true;
                            }
                            break;
                        case "blockUploadingDirs":
                            //Uploading dir is disabled
                            window.blockUploadingDirs = custItem.value.toLowerCase() == "true";
                            break;
                        case "upload_disableFileQueueDisplayAfterFilesAdded":
                            //Uploading dir is disabled
                            window.disableFileQueueOnFileAdded = custItem.value.toLowerCase() == "true";
                            break;
                        case "upload_MaxChunkSizeInMB":
                            if(isNumeric(custItem.value)){
                                window.maxChunkSize = parseInt(custItem.value);
                            }
                            break;
                        case "upload_MaxFileSizeInMB":
                            if(isNumeric(custItem.value)){
                                window.maxFileSizeAllowed = parseInt(custItem.value);
                            }
                            break;
                        case "maxRetriesBeforeCancellingUpload":
                            if(isNumeric(custItem.value)){
                                window.requestRetries = parseInt(custItem.value);
                            }
                            break;
                        case "noTimeoutUploadedNote":
                            //Uploading dir is disabled
                            window.noTimeoutUploadedNote = custItem.value.toLowerCase() == "true";
                            break;
                        case "noFilesOverlayBGColor":
                            //No files available msg overlay BG color
                            window.noFilesOverlayBGColor = custItem.value;
                            break;
                        case "noFilesOverlayTransparency":
                            //No files available msg overlay BG color
                            window.noFilesOverlayTransparency = custItem.value;
                            break;
                        case "headerTextColor":
                            //Header text color
                            $("#headerContent").css("color", custItem.value);
                            break;
                        case "growlTextColor":
                            //Growl message text color
                            $.blockUI.defaults.growlCSS.color = custItem.value;
                            break;
                        case "growlBackgroundColor":
                            //Growl message BG color
                            $.blockUI.defaults.growlCSS.backgroundColor = custItem.value;
                            break;
                        case "headerTextSize":
                            //Header text size
                            $("#headerContent").css("font-size", custItem.value);
                            break;
                        case "headerTextStyle":
                            //Header text style
                            if (custItem.value.indexOf("bold") >= 0) {
                                $("#headerContent").css("font-weight", custItem.value);
                            } else {
                                $("#headerContent").css("font-style", custItem.value);
                            }
                            break;
                        case "headerTextAlign":
                            //Header text aling
                            $("div#_headerText").css("text-align", custItem.value);
                            break;
                        case "headerBackgroundColor":
                            //Header background color
                            $("#headerContent").css("background-color", custItem.value);
                            break;
                        case "footer":
                            //Footer html
                            if($("div.footerContent").length>0 && $("div.footerContent").html().length==0)
                                $("div.footerContent").html(custItem.value);
                            break;
                        case "footerTextColor":
                            //Footer text color
                            $.cssRule({
                                "div.footerContent": [
                                    ["color", custItem.value]
                                    ]
                            });
                            break;
                        case "footerTextSize":
                            //Footer text size
                            $.cssRule({
                                "div.footerContent": [
                                    ["font-size", custItem.value]
                                    ]
                            });
                            break;
                        case "footerTextStyle":
                            //Footer text style
                            if (custItem.value.indexOf("bold") >= 0) {
                                $.cssRule({
                                    "div.footerContent": [
                                        ["font-weight", custItem.value]
                                        ]
                                });
                            } else {
                                $.cssRule({
                                    "div.footerContent": [
                                        ["font-style", custItem.value]
                                        ]
                                });
                            }
                            break;
                        case "footerTextAlign":
                            //Footer text alignment
                            $.cssRule({
                                "div.footerContent": [
                                    ["text-align", custItem.value]
                                    ]
                            });
                            break;
                        case "footerBackgroundColor":
                            //Footer background color
                            $.cssRule({
                                "div.footerContent": [
                                    ["background-color", custItem.value]
                                    ]
                            });
                            break;
                        case "uploadOnly":
                            //If layout need to be upload only
                            if (custItem.value.toLowerCase() == "true") {
                                makeItUploadOnly();
                            }
                            break;
                        case "slideShowOnly":
                            //If layout need to be slideshow only
                            if (custItem.value.toLowerCase() == "true") {
                                if (!window.forSlideshow) {
                                    makeItSlideShowOnly();
                                }
                            }
                            break;
                        case "replaceListingWithPage":
                            //If layout need to be replaced with HTML file
                            if (custItem.value.toLowerCase() != "") {
                                window.listingHTMLPage = custItem.value;
                            }
                            break;
                        case "replaceListingWithPageKeepButtons":
                            //If layout need to be replaced with HTML file
                            if (custItem.value.toLowerCase() == "true") {
                                window.listingHTMLPageKeepButtons = true;
                            }
                            break;
                        case "metaInfoKeysToShowInTreeview":
                                window.metaInfoKeysToShowInTreeview = custItem.value;
                            break;
                        case "popupBackgroundColor":
                            //Popup background color
                            $(document).data("popupBackgroundColor", custItem.value);
                             $.cssRule({
                                "#searchDiv tr.tblAltRow, #searchDiv tr.tblRow, .ui-dialog .ui-widget-content": [
                                    ["background-color", custItem.value]
                                ]
                            });
                            if(!$(document).data("slideShowOnly"))
                            {
                                $.fn.media.defaults.bgColor = custItem.value;
                            }
                            break;
                        case "popupOverlayBackgroundColor":
                            //Popup background color
                            $(document).data("popupOverlayBackgroundColor", custItem.value);
                            $.cssRule({
                                ".blockUI.blockOverlay, div.ui-widget-overlay": [
                                    ["background", custItem.value + " !important"]
                                ]
                            });
                            break;
                        case "popupBorderColor":
                            //Popup border color
                            $(document).data("popupBorderColor", custItem.value);
                            $.cssRule({
                                ".ui-dialog": [
                                    ["border-color", custItem.value]
                                ]
                            });
                            $.cssRule({
                                ".ui-dialog .ui-widget-header": [
                                    ["border-color", custItem.value]
                                    ]
                            });
                            break;
                        case "popupHeaderBackgroundColor":
                            //Popup header BG color
                            $(document).data("popupHeaderBackgroundColor", custItem.value);
                            $.cssRule({
                                ".blockUI .popupHeader": [
                                    ["background-color", custItem.value]
                                    ]
                            });
                            $.cssRule({
                                ".ui-dialog .ui-widget-header": [
                                    ["background", custItem.value],
                                    ["background-color", custItem.value]
                                    ]
                            });
                            break;
                        case "popupHeaderTextColor":
                            //Popup header text color
                            $.cssRule({
                                ".blockUI .popupHeader": [
                                    ["color", custItem.value]
                                    ]
                            });
                            $.cssRule({
                                ".ui-dialog .ui-widget-header": [
                                    ["color", custItem.value]
                                    ]
                            });
                            break;
                        case "quickSharePopupBackgroundColor":
                             $.cssRule({
                                ".publishStatusDialog, .publishStatusDialog div, .publishStatusDialog .ui-dialog-content, .publishStatusDialog .ui-widget-content, .publishStatusDialog .ui-dialog-buttonpane": [
                                    ["background-color", custItem.value]
                                ]
                            });
                            break;
                        case "quickSharePopupHeaderBackgroundColor":
                            //Popup header BG color
                            $.cssRule({
                                ".publishStatusDialog .ui-dialog-titlebar, .publishStatusDialog .ui-widget-header": [
                                    ["background", custItem.value]
                                    ]
                            });
                            break;
                        case "quickSharePopupHeaderTextColor":
                            //Popup header text color
                            $.cssRule({
                                ".publishStatusDialog .ui-dialog-titlebar, .publishStatusDialog .ui-widget-header": [
                                    ["color", custItem.value]
                                    ]
                            });
                            break;
                        case "quickSharePopupHeaderBorderColor":
                            //Popup header border color
                            $.cssRule({
                                ".publishStatusDialog .ui-dialog-titlebar, .publishStatusDialog .ui-widget-header": [
                                    ["border-color", custItem.value]
                                    ]
                            });
                            break;
                        case "quickShareSendEmail":
                            if (custItem.value == "true")
                            {
                                window.quickShareSendEmail = true;
                            }
                            break;
                        case "altTempAccount":
                            if (custItem.value == "true")
                            {
                                window.altTempAccount = true;
                            }
                            break;
                        case "splitShareRequests":
                            if (custItem.value == "true")
                            {
                                window.splitShareRequests = true;
                            }
                            break;
                        case "shareAllowPrivsModification":
                            if (custItem.value == "true")
                            {
                                window.shareAllowPrivsModification = true;
                            }
                            break;
                        case "defaultAltTempAccount":
                            if (custItem.value)
                            {
                                window.defaultAltTempAccount = custItem.value;
                            }
                            break;
                        case "quickShareDisableNotificationPopup":
                            if (custItem.value == "true")
                            {
                                window.quickShareDisableNotificationPopup = true;
                            }
                            break;
                        case "shareShowCopyEmailBody":
                            if (custItem.value == "true")
                            {
                                $.cssRule({
                                ".shareCompleted a.copybodytoclip, .ui-dialog-content a.copybodytoclip": [
                                    ["display", "inline-block !important"]
                                    ]
                                });
                            }
                            break;
                        case "discourageEmailsInInternalShares":
                            if (custItem.value == "true")
                            {
                                window.discourageEmailsInInternalShares = true;
                            }
                            break;
                        case "shareDisableNotificationPopup":
                            if (custItem.value == "true")
                            {
                                window.shareDisableNotificationPopup = true;
                            }
                            break;
                        case "quickShareOpenEmailClient":
                            if (custItem.value == "true")
                            {
                                window.quickShareOpenEmailClient = true;
                            }
                            break;
                        case "normalShareOpenEmailClient":
                            if (custItem.value == "true")
                            {
                                window.normalShareOpenEmailClient = true;
                            }
                            break;
                        case "hideShareResultLink":
                            if (custItem.value == "true")
                            {
                                window.hideShareResultLink = true;
                            }
                            break;
                        case "mainBackgroundColor":
                            //Body background color
                            $.cssRule({
                                "body": [
                                    ["background-color", custItem.value]
                                    ]
                            });
                            break;
                        case "mainTextColor":
                            //Body text color
                            $.cssRule({
                                "body, a, a:visited, a:active,.viewSelectorPanel a.viewlink, .viewSelectorPanel a.viewlink:visited,.filterPanel a, .filterPanel a:visited": [
                                    ["color", custItem.value]
                                    ]
                            });
                            break;
                        case "mainBackgroundImage":
                            //Body background image
                            var imgLink = custItem.value;
                            if(imgLink.toLowerCase().indexOf("http://")<0 && imgLink.toLowerCase().indexOf("https://")<0)
                            {
                                imgLink = "/WebInterface/images/" + imgLink;
                            }
                            $.cssRule({
                                "body": [
                                    ["background-image", "url(" + imgLink + ")"]
                                    ]
                            });
                            break;
                        case "mainBackgroundImageNoRepeat":
                            //Body background image, no-repeat
                            if (custItem.value == "true") {
                                $.cssRule({
                                    "body": [
                                        ["background-repeat", "no-repeat"]
                                        ]
                                });
                            }
                            break;
                        case "mainBorderColor":
                            //Body border color
                            $.cssRule({
                                "body": [
                                    ["border", "1px solid " + custItem.value]
                                    ]
                            });
                            break;
                        case "headerButtonBarBackgroundColor":
                            //header button bar background color
                            $.cssRule({
                                "#mainNavigation": [
                                    ["background-color", custItem.value]
                                    ]
                            });
                            break;
                        case "buttonFontColor":
                            //Main navigation button font color
                            $.cssRule({
                                "ul.topnav li a.menuLink": [
                                    ["color", custItem.value + " !important"]
                                    ]
                            });
                            break;
                        case "buttonHoverFontColor":
                            //Main navigation button font color on hover
                            $.cssRule({
                                "ul.topnav li a.menuLink:hover": [
                                    ["color", custItem.value + " !important"]
                                    ]
                            });
                            break;
                        case "buttonBackgroundColor":
                            //Main navigation button font background color
                            $.cssRule({
                                "#mainNavigation li": [
                                    ["background-color", custItem.value + " !important"]
                                    ]
                            });
                            break;
                        case "buttonHoverColor":
                            //Main navigation button background color on hover
                            $.cssRule({
                                "#mainNavigation a.menuLink:hover": [
                                    ["background-color", custItem.value + " !important"]
                                    ]
                            });
                            break;
                        case "buttonBackgroundImage":
                            //Main navigation button background image
                            var imgLink = custItem.value;
                            if(imgLink.toLowerCase().indexOf("http://")<0 && imgLink.toLowerCase().indexOf("https://")<0)
                            {
                                imgLink = "/WebInterface/images/" + imgLink;
                            }
                            $.cssRule({
                                "#mainNavigation a.menuLink": [
                                    ["background-image", "url(" + imgLink + ")" + " !important"],
                                    ["background-repeat", "repeat-x" + " !important"]
                                    ]
                            });
                            break;
                        case "buttonHoverImage":
                            //Main navigation button background image on hover
                            var imgLink = custItem.value;
                            if(imgLink.toLowerCase().indexOf("http://")<0 && imgLink.toLowerCase().indexOf("https://")<0)
                            {
                                imgLink = "/WebInterface/images/" + imgLink;
                            }
                            $.cssRule({
                                "#mainNavigation a.menuLink:hover": [
                                    ["background-image", "url(" + imgLink + ") !important"],
                                    ["background-repeat", "repeat-x !important"]
                                    ]
                            });
                            break;
                        case "listBackgroundColor":
                            //Item listing background color
                            $.cssRule({
                                "#filesListing, #basketFilesContainer, div.filesSelectedInBasket, #basketFilesContainerThumb, div.filesSelectedInBasket div": [
                                    ["background-color", custItem.value]
                                    ]
                            });
                            break;
                        case "listTextColor":
                            //Item listing font/text color
                            $.cssRule({
                                "#filesListing, #basketFilesContainer": [
                                    ["color", custItem.value]
                                    ]
                            });
                            $.cssRule({
                                "#filesListing a, #basketFilesContainer a": [
                                    ["color", custItem.value]
                                    ]
                            });
                            break;
                        case "listTextColorHover":
                            //Item listing font/text color on hover
                            $.cssRule({
                                "#filesListing tr:hover, #basketFilesContainer tr:hover": [
                                    ["color", custItem.value]
                                    ]
                            });
                            $.cssRule({
                                "#filesListing tr:hover a, #basketFilesContainer tr:hover a": [
                                    ["color", custItem.value]
                                    ]
                            });

                            $.cssRule({
                                "#filesListing a:hover, #basketFilesContainer a:hover": [
                                    ["color", custItem.value]
                                    ]
                            });
                            break;
                        case "listTextSize":
                            //Item listing text size
                            $.cssRule({
                                "#filesListing,tr.jqueryFileTree, #filesListing a, #basketFilesContainer": [
                                    ["font-size", custItem.value]
                                    ]
                            });
                            break;
                        case "listTextStyle":
                            //Item listing text style ie. bold, italic etc
                            if (custItem.value.indexOf("bold") >= 0) {
                                $.cssRule({
                                    "#filesListing,tr.jqueryFileTree, #filesListing a, #basketFilesContainer, #basketFilesContainer a": [
                                        ["font-weight", custItem.value]
                                        ]
                                });
                            } else {
                                $.cssRule({
                                    "#filesListing,tr.jqueryFileTree, #filesListing a, #basketFilesContainer, #basketFilesContainer a": [
                                        ["font-style", custItem.value]
                                        ]
                                });
                            }
                            break;
                        case "listHeaderBackgroundColor":
                            //Item listing header background color
                            $.cssRule({
                                "#filesListing td.header, #basketFilesContainer td.header": [
                                    ["background-color", custItem.value]
                                    ]
                            });
                            break;
                        case "listHeaderTextColor":
                            //Item listing header text color
                            $.cssRule({
                                "#filesListing td.header, #basketFilesContainer td.header": [
                                    ["color", custItem.value]
                                    ]
                            });
                            break;
                        case "listHeaderTextSize":
                            //Item listing header text size
                            $.cssRule({
                                "#filesListing td.header, #basketFilesContainer td.header": [
                                    ["font-size", custItem.value]
                                    ]
                            });
                            break;
                        case "listHeaderTextStyle":
                            //Item listing header text style
                            if (custItem.value.indexOf("bold") >= 0) {
                                $.cssRule({
                                    "#filesListing td.header, #basketFilesContainer td.header": [
                                        ["font-weight", custItem.value]
                                        ]
                                });
                            } else {
                                $.cssRule({
                                    "#filesListing td.header, #basketFilesContainer td.header": [
                                        ["font-style", custItem.value]
                                        ]
                                });
                            }
                            break;
                        case "listDefaultSortColumnIndex":
                            //Item listing default sorting column
                            {
                                var val = parseInt(custItem.value);
                                if(val)
                                {
                                    if(val>=2)
                                        val+=1;
                                    $(document).data("listDefaultSortColumnIndex", val);
                                }
                            }
                            break;
                        case "listDefaultSortDirection":
                            //Item listing default sort direction
                            $(document).data("listDefaultSortDirection", custItem.value);
                            break;
                        case "listSortingAlphaNumeric":
                            if(custItem.value == "true")
                            {
                                window.alphanumericalSorting = true;
                            }
                            break;
                        case "listAlternateColor":
                            //Item listing alternate item row background color
                            $.cssRule({
                                ".jqueryFileTreeAlt": [
                                    ["background-color", custItem.value + ""]
                                    ]
                            });
                            break;
                        case "listHoverColor":
                            //Item listing background color on hover
                            $.cssRule({
                                ".rowHover td, .rowHoverFixed td": [
                                    ["background-color", custItem.value + " !important"]
                                    ]
                            });
                            break;
                        case "tooltipBackgroundColor":
                            //Tooltip's background color
                            $.cssRule({
                                ".tipsy-inner": [
                                    ["background-color", custItem.value]
                                    ]
                            });
                            break;
                        case "tooltipTextColor":
                            //Tooltip's text color
                            $.cssRule({
                                ".tipsy-inner": [
                                    ["color", custItem.value]
                                    ]
                            });
                            break;
                        case "useFilterForSearch":
                            if(custItem.value == "true")
                            {
                                window.useFilterForSearch = true;
                            }
                            break;
                        case "searchDepth":
                            if(custItem.value)
                            {
                                window.searchDepth = custItem.value;
                            }
                            break;
                        case "startFileFilterOnlyAfterThisChars":
                            if(custItem.value)
                            {
                                window.startFileFilterOnlyAfterThisChars = parseInt(custItem.value);
                            }
                            break;
                        case "disableFolderExpansionInTreeview":
                            if(custItem.value == "true")
                            {
                                window.disableFolderExpansionInTreeview = true;
                            }
                            break;
                        case "hideFilterPanel":
                            // Hide filter
                            window.hideFilter(custItem.value);
                            var varHideFilter = $.cookie(o.CookieHideFilter);
                            varHideFilter = varHideFilter == "true";
                            if (varHideFilter) {
                                $("#hideFilter").attr("checked", "checked");
                                $("#hideFilter").closest("span").hide();
                            } else {
                                $("#hideFilter").removeAttr("checked");
                            }
                            break;
                         case "hideSelectionLink":
                            if(custItem.value == "true")
                            {
                                $("a.selectionLink").parent().hide();
                            }
                            break;
                         case "hidePageSizeSelectionLink":
                            if(custItem.value == "true")
                            {
                                $("a.pageSizeSelectionLink").parent().hide().closest(".per-page").hide();
                            }
                            break;
                        case "defaultItemsPerPage":
                            if(custItem.value && !window.defaultPageSizeSet)
                            {
                                window.defaultPageSizeSet = true;
                                changePagerSize(parseInt(custItem.value), true);
                            }
                            break;
                        case "CHECK_COL":
                            //Enable/disable checkbox column
                            $(document).data("disableCheckCol", custItem.value);
                            if (custItem.value == "true") {
                                $("#hideCheckBoxColumn").attr("checked", "checked");
                            } else {
                                $("#hideCheckBoxColumn").removeAttr("checked");
                            }
                            window.hideCheckBoxColumn(custItem.value == "true");
                            break;
                        case "NAME_COL":
                            //Enable/disable name column
                            $(document).data("disableNameCol", custItem.value);
                            break;
                        case "SIZE_COL":
                            //Enable/disable size column
                            $(document).data("disableSizeCol", custItem.value);
                            break;
                        case "MODIFIED_COL":
                            //Enable/disable modified column
                            $(document).data("disableModifiedCol", custItem.value);
                            break;
                        case "KEYWORDS_COL":
                            //Enable/disable keywords column
                            $(document).data("disableKeywordsCol", custItem.value);
                            break;
                        case "SHOWPATH_COL":
                            if (custItem.value == "true")
                            {
                                window.alwaysShowPathColumn = true;
                                $("#filesListing").addClass("showPathColumn");
                            }
                            break;
                        case "enableFolderPreview" :
                            if (custItem.value == "true")
                            {
                                window.enableFolderPreview = true;
                            }
                            break;
                        case "disableCrushSyncIcon" :
                            if (custItem.value == "true")
                            {
                                window.disableCrushSyncIcon = true;
                            }
                            break;
                        case "noCopyLinkOnContextMenu" :
                            if (custItem.value == "true")
                            {
                                window.noCopyLinkOnContextMenu = true;
                            }
                            break;
                        case "NAME_COL_TEXT":
                            //name column header text
                            localizations.TreeviewHeaderNameText =  custItem.value;
                            filesContainer.find("td[colName='name']").text(custItem.value);
                            break;
                        case "SIZE_COL_TEXT":
                            //size column header text
                            localizations.TreeviewHeaderSizeText =  custItem.value;
                            filesContainer.find("td[colName='size']").text(custItem.value);
                            break;
                        case "MODIFIED_COL_TEXT":
                            //modified column header text
                            localizations.TreeviewHeaderModifiedText =  custItem.value;
                            filesContainer.find("td[colName='modified']").text(custItem.value);
                            break;
                        case "KEYWORDS_COL_TEXT":
                            //keywords column header text
                            localizations.TreeviewHeaderKeywordsText =  custItem.value;
                            filesContainer.find("td[colName='keywords']").text(custItem.value);
                            break;
                        case "BROWSER_UPLOAD_START_TEXT":
                            //Browser upload windo "start upload" button text to display
                            $("#browserFileUpload").find("#submitAction").find("a.upload").text(custItem.value);
                            break;
                        case "shareThumbnail":
                            //Settings to share thumbnail or not
                            $(document).data("shareThumbnail", custItem.value);
                            break;
                        case "shareFiles":
                            //Settings to share thumbnail or not
                            $(document).data("shareFiles", custItem.value);
                            break;
                        case "autoShareUploadedItem":
                            //Auto share uploaded item
                            $(document).data("autoShareUploadedItem", custItem.value);
                            break;
                        case "autoShareUploadedItemNotify":
                            //Auto share uploaded item
                            $(document).data("autoShareUploadedItemNotify", custItem.value);
                            break;
                        case "autoRemoveUploadedItemFromList":
                            if (custItem.value == "true")
                            {
                                window.autoRemoveUploadedItemFromList = true;
                            }
                            break;
                        case "hideStartButtonOnIndividualUploadItem":
                            if (custItem.value == "true")
                            {
                                window.hideStartButtonOnIndividualUploadItem = true;
                            }
                            break;
                        case "maxFilesInQueue":
                            if (custItem.value)
                            {
                                window.maxFilesInQueue = parseInt(custItem.value);
                            }
                            break;
                        case "maxFileNameLengthInUpload":
                            if (custItem.value)
                            {
                                window.maxFileNameLengthInUpload = parseInt(custItem.value);
                            }
                            break;
                        case "shareAsMoveReference":
                            if (custItem.value == "true")
                            {
                                window.shareAsMoveReference = true;
                            }
                            break;
                        case "disableShareForUploadedItem":
                            //Disable share from uploaded item
                            $(document).data("disableShareForUploadedItem", custItem.value);
                            break;
                        case "shareMethodUploadedItem":
                            //Default method to use while sharing uploaded item
                            $(document).data("shareMethodUploadedItem", custItem.value);
                            break;
                        case "defaultShareMethod":
                            //Default method to use while sharing
                            $(document).data("defaultShareMethod", custItem.value);
                            break;
                        case "shareWindowNoUserInfoAfterShare":
                            if (custItem.value == "true")
                            {
                                window.shareWindowNoUserInfoAfterShare = true;
                            }
                            break;
                        case "shareIgnoreFolders":
                            if (custItem.value == "true")
                            {
                                window.shareIgnoreFolders = true;
                            }
                            break;
                        case "shareEmailBodyNoHTMLArea":
                            if (custItem.value == "true")
                            {
                                window.shareEmailBodyNoHTMLArea = true;
                            }
                            break;
                        case "shareIgnoreFiles":
                            if (custItem.value == "true")
                            {
                                window.shareIgnoreFiles = true;
                            }
                            break;
                        case "shareWindowNoOpenInEmail":
                            if (custItem.value == "true")
                            {
                                window.shareWindowNoOpenInEmail = true;
                            }
                            break;
                        case "shareWindowEnableUsernameLookup":
                            if (custItem.value == "true")
                            {
                                window.shareWindowEnableUsernameLookup = true;
                            }
                            break;
                        case "shareWindowHidePermissions":
                            if (custItem.value == "true")
                            {
                                window.shareWindowHidePermissions = true;
                            }
                            break;
                        case "shareWindowDefaultPermissions":
                            if (custItem.value)
                            {
                                window.shareWindowDefaultPermissions = custItem.value;
                            }
                            break;
                        case "shareWindowEnableMultipleUsernameSelection":
                            if (custItem.value == "true")
                            {
                                window.shareWindowEnableMultipleUsernameSelection = true;
                            }
                            break;
                        case "shareWindowNoOpenInNewTab":
                            if (custItem.value == "true")
                            {
                                window.noOpenInNewTabManageShares = true;
                            }
                            break;
                        case "shareWindowDisableDirectLinkForFile":
                                window.shareWindowDisableDirectLinkForFile = custItem.value == "true";
                            break;
                        case "shareWindowFlagDirectLinkForFile":
                            window.shareWindowFlagDirectLinkForFile = custItem.value == "true";
                            break;
                        case "shareWindowHideDownloadButtonVisible":
                            window.shareWindowHideDownloadButtonVisible = custItem.value == "true";
                            break;
                        case "shareWindowHideDownloadButtonVisibleDefaultVal":
                            window.shareWindowHideDownloadButtonVisibleDefaultVal = custItem.value == "true";
                            break;
                        case "shareAdvanced":
                            //Allow/dis-allow advanced sharing option
                            $(document).data("shareAdvanced", custItem.value);
                            break;
                        case "ShareDefaultLoginsValue":
                            var maxLogins = parseInt(custItem.value);
                            if(maxLogins && maxLogins != NaN)
                            {
                                if(maxLogins<-1)maxLogins=-1;
                                $(document).data("ShareDefaultLoginsValue", maxLogins);
                            }
                            break;
                        case "shareAllowUploads":
                            //Allow/dis-allow uploads while sharing
                            $(document).data("shareAllowUploads", custItem.value);
                            break;
                        case "shareAllowUploadsPrivs":
                            if(custItem.value)
                                $(document).data("shareAllowUploadsPrivs", custItem.value);
                            break;
                        case "disableThumbnailHover":
                            //Enable/disable thumbnail hover info popup setting
                            $(document).data("disableThumbnailHover", custItem.value);
                            break;
                        case "defaultThumbnailSize":
                            //Default thumbs size (1 to 30)
                            var size = parseInt(custItem.value);
                            if(size && size != NaN)
                            {
                                if(size>30)size = 30;
                                if(size<0)size = 0;
                                window.defaultThumbnailSize = size;
                                if(typeof window.defaultThumbnailSize != "undefined" && typeof window.zoomSlider != "undefined")
                                {
                                    window.zoomSlider.slider("value", window.defaultThumbnailSize);
                                }
                            }
                            break;
                        case "maxImageSizeForThumbnail":
                            //Default thumbs size (1 to 30)
                            var size = parseInt(custItem.value);
                            if(size && size != NaN)
                            {
                                window.maxImageSizeForThumbnail = size;
                            }
                            break;
                        case "disableTreeviewHover":
                            //Enable/disable treeview item hover info popup setting
                            $(document).data("disableTreeviewHover", custItem.value);
                            break;
                        case "disableUploadBarAnimation":
                            //Disable animation of upload bar when showing
                            if (custItem.value == "true") window.disableUploadBarAttentionAnimation = true;
                            break;
                        case "disableDragDropUpload":
                            //Disable animation of upload bar when showing
                            if (custItem.value == "true") {
                                window.disableDragDropUpload = true;
                                $.cssRule({
                                    "#browserDragdropInfoText": [
                                        ["display", "none"]
                                    ]
                                });
                            }
                            break;
                        case "upload_hideUploadBarAfterUpload":
                            //Hide upload window after upload finishes
                            if (custItem.value == "true") window.hideUploadBarAfterUpload = true;
                            break;
                        case "autoAppletFlag":
                            //Load applet automatically when page loads flag
                            window.autoAppletFlagSet(custItem.value == "true");
                            if (custItem.value == "true") $("#autoAppletFlag").attr("checked", "checked");
                            break;
                        case "autoUploadFlag":
                            if(typeof window.autoUploadFlagSet != "undefined")
                            {
                                //Load applet automatically when page loads flag
                                if (custItem.value == "true")
                                    window.autoUploadFlagSet(custItem.value);
                                else
                                    window.autoUploadFlagSet();
                            }
                            break;
                        case "notAllowedExtensionsToUpload":
                            if (custItem.value && custItem.value.length>0)
                            {
                                var exts = custItem.value.toLowerCase().split(",");
                                exts.clean("");
                                window.notAllowedExtensionsToUpload = exts;
                            }
                            break;
                        case "onlyAllowedExtensionsToUpload":
                            if (custItem.value && custItem.value.length>0)
                            {
                                var exts = custItem.value.toLowerCase().split(",");
                                exts.clean("");
                                window.onlyAllowedExtensionsToUpload = exts;
                            }
                            break;
                        case "compressionInApplet":
                            //admin preference to use compression in applet or not.
                            window.compressionInApplet = custItem.value;
                            break;
                        case "showResume":
                            //Show an option of resume in browser file upload window flag
                            if (custItem.value == "false") {
                                $("#browserFileUpload").find("label[for='chkUploadResume']").hide();
                                $("#filesBasket").find("#chkDownloadResume").closest("div").hide();
                            } else {
                                $("#browserFileUpload").find("label[for='chkUploadResume']").show();
                                $("#filesBasket").find("#chkDownloadResume").closest("div").show();
                            }
                            break;
                        case "ResumeUploadSelectedByDefault":
                            //Show an option of resume in browser file upload window flag
                            if (custItem.value == "true") {
                                $("#browserFileUpload").find("#chkUploadResume").attr("checked", "checked");
                                $("#filesBasket").find("#chkDownloadResume").attr("checked", "checked");
                                $("#resumeUpload_AppletConfig").attr("checked", "checked");
                            }
                            break;
                        case "pathBackgroundColor":
                            // Path/Breadcrumbs background color
                            $.cssRule({
                                "#crumbs": [
                                    ["background-color", custItem.value]
                                    ]
                            });
                            break;
                        case "thumbsViewSingleClick":
                            if (custItem.value == "true")
                            {
                                window.thumbsViewSingleClick = true;
                            }
                            break;
                        case "autoRefreshListingTime":
                            if (custItem.value)
                            {
                                window.autoRefreshListingTime = parseInt(custItem.value);
                                if(!window.autoRefreshListingTime || isNaN(window.autoRefreshListingTime))
                                    window.autoRefreshListingTime = 0;
                            }
                            break;
                        case "hideHiddenFilesCount":
                            if (custItem.value == "true")
                            {
                                window.hideHiddenFilesCount = true;
                            }
                            break;
                        case "pathTextColor":
                            // Path/Breadcrumbs font color
                            $.cssRule({
                                "#crumbs li,#crumbs li a, #crumbs li a:visited": [
                                    ["color", custItem.value]
                                    ]
                            });
                            break;
                        case "pathTextSize":
                            // Path/Breadcrumbs text size
                            $.cssRule({
                                "#crumbs": [
                                    ["font-size", custItem.value]
                                    ]
                            });
                            break;
                        case "quotaTextColor":
                            // Quota text color
                            $.cssRule({
                                ".quotaText": [
                                    ["color", custItem.value]
                                    ]
                            });
                            break;
                        case "quotaTextSize":
                            // Quota text size
                            $.cssRule({
                                ".quotaText": [
                                    ["font-size", custItem.value]
                                    ]
                            });
                            break;
                        case "quotaTextStyle":
                            // Quota text style
                            if (custItem.value.indexOf("bold") >= 0) {
                                $.cssRule({
                                    ".quotaText": [
                                        ["font-weight", custItem.value]
                                        ]
                                });
                            } else {
                                $.cssRule({
                                    ".quotaText": [
                                        ["font-style", custItem.value]
                                        ]
                                });
                            }
                            break;
                        case "quotaTextAlign":
                            // Quota text allignment on screen
                            $.cssRule({
                                ".quotaText": [
                                    ["text-align", custItem.value]
                                    ]
                            });
                            break;
                        case "quotaBackgroundColor":
                            // Quota text background color
                            $.cssRule({
                                ".quotaText": [
                                    ["background-color", custItem.value]
                                    ]
                            });
                            break;
                        case "commentsTextColor":
                            // Comments text color
                            $.cssRule({
                                ".comments": [
                                    ["color", custItem.value]
                                    ]
                            });
                            break;
                        case "commentsTextSize":
                            // Comments text size
                            $.cssRule({
                                ".comments": [
                                    ["font-size", custItem.value]
                                    ]
                            });
                            break;
                        case "commentsTextStyle":
                            // Comments text style
                            if (custItem.value.indexOf("bold") >= 0) {
                                $.cssRule({
                                    ".comments": [
                                        ["font-weight", custItem.value]
                                        ]
                                });
                            } else {
                                $.cssRule({
                                    ".comments": [
                                        ["font-style", custItem.value]
                                        ]
                                });
                            }
                            break;
                        case "commentsTextAlign":
                            // Comments text allignment on screen
                            $.cssRule({
                                ".comments": [
                                    ["text-align", custItem.value]
                                    ]
                            });
                            break;
                        case "commentsBackgroundColor":
                            // Comments background color
                            $.cssRule({
                                ".comments": [
                                    ["background-color", custItem.value]
                                    ]
                            });
                            break;
                        case "OPEN_NEW_WINDOW_EXTENSIONS":
                            // Extensions to open in new window and void forced download
                            var exts = custItem.value.split(",");
                            if (exts && exts.length > 0) {
                                var trimmed = [];
                                $.each(exts, function(index, item){
                                    trimmed.push($.trim(this));
                                });
                                $(document).data("OPEN_NEW_WINDOW_EXTENSIONS", trimmed);
                            } else {
                                $(document).removeData("OPEN_NEW_WINDOW_EXTENSIONS");
                            }
                            break;
                        case "promptZipNameWhileDownloading" :
                            if (custItem.value == "true")
                            {
                                window.promptZipNameWhileDownloading = true;
                            }
                            break;
                        case "defaultZipNameWhileDownloading" :
                            if (custItem.value)
                            {
                                window.archiveFileName = custItem.value;
                            }
                            break;
                        case "useSlideshowInsteadOfPreview" :
                            if (custItem.value == "true")
                            {
                                window.useSlideshowInsteadOfPreview = true;
                            }
                            break;
                         case "hideRotateIconsInPreview" :
                            if (custItem.value == "true")
                            {
                                window.hideRotateIconsInPreview = true;
                            }
                            break;
                        case "showDownloadButtonInQuickPreview" :
                            if (custItem.value == "true")
                            {
                                window.showDownloadButtonInQuickPreview = true;
                            }
                            break;
                        case "showAddToBasketButtonInQuickPreview" :
                            if (custItem.value == "true")
                            {
                                window.showAddToBasketButtonInQuickPreview = true;
                            }
                            break;
                        case "useExtensionForAltMoviewPreview" :
                            if (custItem.value)
                            {
                                window.useExtensionForAltMoviewPreview = $.trim(custItem.value).toLowerCase();
                            }
                            break;
                        case "hidePreviewOptionForFiles" :
                            if (custItem.value)
                            {
                                window.hidePreviewOptionForFiles = $.trim(custItem.value).toLowerCase().split(",") || [];
                                for(var ext = 0; ext < window.hidePreviewOptionForFiles.length; ext++){
                                    window.hidePreviewOptionForFiles[ext] = $.trim(window.hidePreviewOptionForFiles[ext]);
                                }
                            }
                            break;
                        case "OPEN_PREVIEW_EXTENSIONS":
                            // Extensions to open preview window and void forced download
                            var exts = custItem.value.split(",");
                            if (exts && exts.length > 0) {
                                var trimmed = [];
                                $.each(exts, function(index, item){
                                    trimmed.push($.trim(this));
                                });
                                $(document).data("OPEN_PREVIEW_EXTENSIONS", trimmed);
                            } else {
                                $(document).removeData("OPEN_PREVIEW_EXTENSIONS");
                            }
                            break;
                        case "OPEN_SLIDESHOW_EXTENSIONS":
                            // Extensions to open SLIDESHOW window and void forced download
                            var exts = custItem.value.split(",");
                            if (exts && exts.length > 0) {
                                var trimmed = [];
                                $.each(exts, function(index, item){
                                    trimmed.push($.trim(this));
                                });
                                $(document).data("OPEN_SLIDESHOW_EXTENSIONS", trimmed);
                            } else {
                                $(document).removeData("OPEN_SLIDESHOW_EXTENSIONS");
                            }
                            break;
                        case "DisableClickToDownload":
                            if (custItem.value && custItem.value.length > 0)
                                window.disableClickToDownload = custItem.value == "true";
                            break;
                        case "TooltipExifInfoKeys":
                            if (custItem.value && custItem.value.length > 0)
                                window.TooltipExifInfoKeys = custItem.value;
                            break;
                        case "EditeableExifInfoKeys":
                            if (custItem.value && custItem.value.length > 0)
                                window.EditeableExifInfoKeys = custItem.value;
                            break;
                        case "genericIconTree":
                            //Generic icon to use in tree, no preview icon
                            if (custItem.value && custItem.value.length > 0 && custItem.value == "true") {
                                $(document).data("genericIconTree", true);
                            }
                            break;
                        case "genericIconThumbnail":
                            //Generic icon to use in thumbnails, no preview icon
                            if (custItem.value && custItem.value.length > 0 && custItem.value == "true") {
                                $(document).data("genericIconThumbnail", true);
                            }
                            break;
                        case "maxAllowedDownloadSize":
                            //Maximum size allowed to download
                            if (custItem.value && custItem.value.length>0) {
                                $(document).data("maxAllowedDownloadSize", custItem.value);
                            }
                            break;
                        case "hideAdvancedUploader":
                            //Hide advanced uploader
                            if (custItem.value == "true")
                            {
                                window.hideAdvancedUploader = true;
                                $("#browseTypeSelector").hide();
                            }
                            break;
                        case "doNotAdviceAdvancedUploader":
                            //Do not show message to prefer advanced uploading for big files
                            if (custItem.value == "true")
                            {
                                window.doNotAdviceAdvancedUploader = true;
                            }
                            break;
                        case "defaultAdvancedUploader":
                            //make advanced uploader default
                            if (custItem.value == "true")
                            {
                                setTimeout(function(){
                                    $("#browseTypeSelector").removeClass("advanced").addClass("normal").trigger("click").attr("title", locale.fileupload.SwitchToNormalUpload).removeData('thisInfo').unbind('.cluetip');
                                    vtip($("#browseTypeSelector"));
                                }, 500);
                            }
                            break;
                        case "hideShareMethod":
                            if (custItem.value == "true")
                            {
                                $.cssRule({
                                    ".shareMethodRow": [
                                        ["display", "none !important"]
                                        ]
                                });
                            }
                            break;
                        case "hideInternalShareMethod":
                            if (custItem.value == "true")
                            {
                                $.cssRule({
                                    ".shareInternalOption": [
                                        ["display", "none !important"]
                                        ]
                                });
                            }
                            break;
                        case "hideExternalShareMethod":
                            if (custItem.value == "true")
                            {
                                $.cssRule({
                                    ".shareExternalOption": [
                                        ["display", "none !important"]
                                        ]
                                });
                            }
                            break;
                        case "hideShareType":
                            if (custItem.value == "true")
                            {
                                $.cssRule({
                                    "#shareTypeRow": [
                                        ["display", "none !important"]
                                        ]
                                });
                            }
                            break;
                        case "hideShareSendEmail":
                            if (custItem.value == "true")
                            {
                                $.cssRule({
                                    ".sendEmail": [
                                        ["display", "none !important"]
                                        ]
                                });
                            }
                            break;
                        case "hideShareExpiresRow":
                            if (custItem.value == "true")
                            {
                                $.cssRule({
                                    "#shareExpirationRow": [
                                        ["display", "none !important"]
                                        ]
                                });
                            }
                            break;
                        case "hideShareLoginsRow":
                            if (custItem.value == "true")
                            {
                                $.cssRule({
                                    "#shareMaxUsesRow": [
                                        ["display", "none !important"]
                                        ]
                                });
                            }
                            break;
                        case "hideShareFromRow":
                            if (custItem.value == "true")
                            {
                                $.cssRule({
                                    ".emailFrom": [
                                        ["display", "none !important"]
                                        ]
                                });
                            }
                            break;
                        case "hideShareToRow":
                            if (custItem.value == "true")
                            {
                                $.cssRule({
                                    ".emailTo": [
                                        ["display", "none !important"]
                                        ]
                                });
                            }
                            break;
                        case "hideShareCCRow":
                            if (custItem.value == "true")
                            {
                                $.cssRule({
                                    ".emailCc": [
                                        ["display", "none !important"]
                                        ]
                                });
                            }
                            break;
                        case "hideShareBCCRow":
                            if (custItem.value == "true")
                            {
                                $.cssRule({
                                    ".emailBcc": [
                                        ["display", "none !important"]
                                        ]
                                });
                            }
                            break;
                        case "hideShareReplyToRow":
                            if (custItem.value == "true")
                            {
                                $.cssRule({
                                    ".emailReplyTo": [
                                        ["display", "none !important"]
                                        ]
                                });
                            }
                            break;
                        case "hideShareSubjectRow":
                            if (custItem.value == "true")
                            {
                                $.cssRule({
                                    ".emailSubject": [
                                        ["display", "none !important"]
                                        ]
                                });
                            }
                            break;
                        case "readonlyShareSubject":
                            window.shareWindoeEmailSubjectReadonly = custItem.value == "true";
                            break;
                        case "hideShareBodyRow":
                            if (custItem.value == "true")
                            {
                                $.cssRule({
                                    ".emailBody": [
                                        ["display", "none !important"]
                                        ]
                                });
                            }
                            break;
                        case "readonlyShareBody":
                            window.shareWindoeEmailBodyReadonly = custItem.value == "true";
                            break;
                        case "hideAdvancedOption":
                            if (custItem.value == "true")
                            {
                                $.cssRule({
                                    "#shareAdvancedHolder": [
                                        ["display", "none !important"]
                                        ]
                                });
                            }
                            break;
                        case "hideAttachThumbnailOption":
                            if (custItem.value == "true")
                            {
                                $.cssRule({
                                    "#shareAttachHolder": [
                                        ["display", "none !important"]
                                        ]
                                });
                            }
                            break;
                        case "hideAttachFilesOption":
                            if (custItem.value == "true")
                            {
                                $.cssRule({
                                    "#shareAttachFileHolder": [
                                        ["display", "none !important"]
                                        ]
                                });
                            }
                            break;
                        case "hideShareComments":
                            if (custItem.value == "true")
                            {
                                $.cssRule({
                                    ".share_comments": [
                                        ["display", "none !important"]
                                        ]
                                });
                            }
                            break;
                        case "showShareKeywords":
                            if (custItem.value == "true")
                            {
                                window.keywordsInShare = true;
                                $.cssRule({
                                    ".share_keywords": [
                                        ["display", "table-row"]
                                        ]
                                });
                            }
                            break;
                        case "shareIncludeAllRecursiveItemsList":
                            if (custItem.value == "true")
                            {
                                window.shareIncludeAllRecursiveItemsList = true;
                            }
                            break;
                        case "forceGeneratePasswordShare":
                            if (custItem.value == "true")
                            {
                                window.forceGeneratePasswordShare = true;
                            }
                            break;
                        case "hideFullAccessOption":
                            if (custItem.value == "true")
                            {
                                $.cssRule({
                                    "#shareFullAccessHolder": [
                                        ["display", "none !important"]
                                        ]
                                });
                                window.hideFullAccessOption = true;
                            }
                            break;
                        case "hideUserPassGenerationOption":
                            if (custItem.value == "true")
                            {
                                $.cssRule({
                                    ".shareUserGenerationPanel": [
                                        ["display", "none !important"]
                                        ]
                                });
                            }
                            break;
                        /*Upload window customizations*/
                        case "upload_UploadBarBorderColor":
                            $.cssRule({
                                "#fileQueueInfo": [
                                    ["border-color", custItem.value]
                                    ]
                            });
                            break;
                        case "upload_UploadBarBGColor":
                            $.cssRule({
                                "#fileQueueInfo": [
                                    ["background", custItem.value]
                                    ]
                            });
                            break;
                        case "upload_UploadBarTextColor":
                            $.cssRule({
                                "#fileQueueInfo": [
                                    ["color", custItem.value]
                                    ]
                            });
                            break;
                        case "upload_UploadBarDragHoverBGColor":
                            $.cssRule({
                                ".dropzone.hover, #dropItemsPanel": [
                                    ["background", custItem.value]
                                    ]
                            });
                            break;
                        case "upload_UploadBarDragHoverBorderColor":
                            $.cssRule({
                                ".dropzone.hover, #dropItemsPanel": [
                                    ["border-color", custItem.value]
                                    ]
                            });
                            break;
                        case "upload_UploadBarDragHoverTextColor":
                            $.cssRule({
                                ".dropzone.hover, #dropItemsPanel": [
                                    ["color", custItem.value]
                                    ]
                            });
                            break;
                        case "upload_fileWindowAsDialog":
                            if(custItem.value == "true")
                            {
                                window.fileWindowAsDialog = true;
                            }
                            break;
                        case "upload_oldFileUploader":
                            if(custItem.value == "true")
                            {
                                if(!window.useOldUploader){
                                    window.useOldUploader = true;
                                }
                            }
                            break;
                        case "upload_oldFileUploaderFF":
                            if(custItem.value == "true" && navigator.userAgent.toLowerCase().indexOf('firefox') > -1)
                            {
                                if(!window.useOldUploader){
                                    window.useOldUploader = true;
                                }
                            }
                            break;
                        case "upload_oldFileUploaderSafari":
                            if(custItem.value == "true" && navigator.userAgent.indexOf('Safari') != -1 && navigator.userAgent.indexOf('Chrome') == -1 &&  navigator.userAgent.indexOf('Android') == -1)
                            {
                                if(!window.useOldUploader){
                                    window.useOldUploader = true;
                                }
                            }
                            break;
                        case "upload_oldFileUploaderEdge":
                            if(custItem.value == "true" && navigator.appVersion.indexOf("Edge") != -1)
                            {
                                if(!window.useOldUploader){
                                    window.useOldUploader = true;
                                }
                            }
                            break;
                        case "upload_oldFileUploaderChrome":
                            if(custItem.value == "true" && navigator.userAgent.indexOf('Chrome') > -1)
                            {
                                if(!window.useOldUploader){
                                    window.useOldUploader = true;
                                }
                            }
                            break;
                        case "upload_oldFileUploaderIE":
                            if(custItem.value == "true" && $("html").hasClass('ie') && $.browser.version <= 10)
                            {
                                if(!window.useOldUploader){
                                    window.useOldUploader = true;
                                }
                            }
                            break;
                        case "upload_UploadQueueHeaderBGColor":
                            $.cssRule({
                                ".fileListHeader, div.uploadFormHeader": [
                                    ["background", custItem.value],
                                    ["background-color", custItem.value]
                                    ]
                            });
                            break;
                         case "upload_UploadQueueHeaderBorderColor":
                            $.cssRule({
                                ".fileListHeader, div.uploadFormHeader": [
                                    ["border", "none"]
                                    ]
                            });
                            break;
                        case "upload_UploadQueueHeaderTextColor":
                            $.cssRule({
                                ".fileListHeader, div.uploadFormHeader": [
                                    ["color", custItem.value]
                                    ]
                            });
                            break;
                        case "upload_UploadQueueBGColor":
                            $.cssRule({
                                "#fileRepo,#uploadInfoForm, .ui-dialog .ui-dialog-buttonpane, #fileUploadModule": [
                                    ["background", custItem.value],
                                    ["background-color", custItem.value]
                                    ]
                            });
                            break;
                        case "upload_UploadQueueTextColor":
                            $.cssRule({
                                "#fileRepo, #uploadInfoForm": [
                                    ["color", custItem.value]
                                    ]
                            });
                            $.cssRule({
                                "#fileRepo a, #fileRepo .ui-widget-content": [
                                    ["color", custItem.value + " !important"]
                                    ]
                            });
                            break;
                        case "upload_UploadQueueItemBGColor":
                            $.cssRule({
                                "#fileRepo .template-upload": [
                                    ["background", custItem.value]
                                    ]
                            });
                            break;
                        case "upload_UploadQueueItemTextColor":
                            $.cssRule({
                                "#fileRepo .template-upload": [
                                    ["color", custItem.value]
                                    ]
                            });
                            $.cssRule({
                                "#fileRepo .template-upload a, #fileRepo .template-upload.ui-widget-content": [
                                    ["color", custItem.value + " !important"]
                                    ]
                            });
                            break;
                        case "upload_UploadProgressbarBGColor":
                            $.cssRule({
                                "#fileRepo .template-upload": [
                                    ["background", custItem.value]
                                    ]
                            });
                            break;
                        case "upload_UploadProgressbarTextColor":
                            $.cssRule({
                                "#globalProgressBar": [
                                    ["color", custItem.value]
                                    ]
                            });
                            $.cssRule({
                                "#globalProgressBar a": [
                                    ["color", custItem.value + " !important"]
                                    ]
                            });
                            break;
                        case "waveformLoadingProgressbarColor":
                            $.cssRule({
                                ".columnName .progressBar .ui-progressbar-value": [
                                    ["background-image", "none"],
                                    ["background", custItem.value]
                                ]
                            });
                            break;
                        case "slideshow_BackgroundColor":
                            if($(document).data("slideShowOnly"))
                            {
                                $.cssRule({
                                    "#slideshowPage, #slideshowPage #container, #slideshowPage #fileQueueInfo, div.slideshow a.advance-link, div.caption-container, span.image-caption, div.photo-index, div.navigation-container, div.navigation, ul.thumbs, div.pagination span.current, .image-wrapper, .previewPanel": [
                                        ["background", custItem.value]
                                        ]
                                });
                            }
                            window.slideshowBG = custItem.value;
                            break;
                        case "slideshow_TextColor":
                            if($(document).data("slideShowOnly"))
                            {
                               $.cssRule({
                                    "#slideshowPage, #slideshowPage #container, #slideshowPage #fileQueueInfo, div.slideshow a.advance-link, div.caption-container, span.image-caption, div.photo-index, div.navigation-container, div.navigation, ul.thumbs, div.pagination span.current": [
                                        ["color", custItem.value]
                                        ]
                                });
                               if(!window.slideshowAnchorCSSSet)
                               {
                                    $.cssRule({
                                        "#slideshowPage a, #itemControls": [
                                            ["color", custItem.value]
                                            ]
                                    });
                                }
                            }
                            break;
                        case "slideshow_AnchorColor":
                            if($(document).data("slideShowOnly"))
                            {
                                $.cssRule({
                                    "#slideshowPage a, #itemControls, #SSPage .play,#SSPage .pause,#SSPage .prev,#SSPage .next, #footerss a": [
                                        ["color", custItem.value]
                                        ]
                                });
                                window.slideshowAnchorCSSSet = true;
                            }
                            break;
                        case "slideshow_AutoStartInXSeconds":
                            if($(document).data("slideShowOnly") || window.forSlideshow)
                            {
                                var slideshowAutoStartIn = parseInt(custItem.value);
                                if(typeof slideshowAutoStartIn != "undefined" && slideshowAutoStartIn!= NaN)
                                {
                                    if(slideshowAutoStartIn<=0)slideshowAutoStartIn=1;
                                    setTimeout(function(){
                                        $("#controls").find("a.play").trigger("click");
                                    }, slideshowAutoStartIn * 1000);
                                }
                            }
                            break;
                        /*Manage share window*/
                        case "manageShare_HeaderBGColor":
                            $.cssRule({
                                ".manageShareWindow .ui-widget-header": [
                                    ["background", custItem.value],
                                    ["background-color", custItem.value]
                                    ]
                            });
                            break;
                         case "manageShare_HeaderBorderColor":
                            $.cssRule({
                                ".manageShareWindow .ui-widget-header": [
                                    ["border-color", custItem.value]
                                    ]
                            });
                            break;
                        case "manageShare_HeaderTextColor":
                            $.cssRule({
                                ".manageShareWindow .ui-widget-header": [
                                    ["color", custItem.value]
                                    ]
                            });
                            break;
                        /*Basket items*/
                        case "basket_HeaderBGColor":
                            $.cssRule({
                                ".downloadBasket .ui-widget-header": [
                                    ["background", custItem.value],
                                    ["background-color", custItem.value]
                                    ]
                            });
                            break;
                         case "basket_HeaderBorderColor":
                            $.cssRule({
                                ".downloadBasket .ui-widget-header": [
                                    ["border-color", custItem.value]
                                    ]
                            });
                            break;
                        case "basket_HeaderTextColor":
                            $.cssRule({
                                ".downloadBasket .ui-widget-header": [
                                    ["color", custItem.value]
                                    ]
                            });
                            break;
                        case "basket_BGColor":
                            $.cssRule({
                                ".downloadBasket,.downloadBasket #filesBasket, .downloadBasket .ui-dialog .ui-dialog-buttonpane": [
                                    ["background", custItem.value],
                                    ["background-color", custItem.value]
                                    ]
                            });
                            break;
                        case "basket_TextColor":
                            $.cssRule({
                                ".downloadBasket, #filesBasket": [
                                    ["color", custItem.value]
                                    ]
                            });
                            $.cssRule({
                                ".downloadBasket a, .downloadBasket .ui-widget-content": [
                                    ["color", custItem.value + " !important"]
                                    ]
                            });
                            break;
                        case "basket_TVHeaderBGColor":
                            $.cssRule({
                                ".downloadBasket thead td": [
                                    ["background", custItem.value]
                                    ]
                            });
                            break;
                        case "basket_TVHeaderTextColor":
                            $.cssRule({
                                ".downloadBasket thead td": [
                                    ["color", custItem.value + " !important"]
                                    ]
                            });
                            break;
                        case "basket_TVBGColor":
                            $.cssRule({
                                ".downloadBasket #basketFilesContainer tbody tr": [
                                    ["background", custItem.value],
                                    ["background-color", custItem.value]
                                    ]
                            });
                            break;
                         case "basket_TVTextColor":
                            $.cssRule({
                                ".downloadBasket #basketFilesContainer tbody td, .downloadBasket #basketFilesContainer tbody td a, a.imgLink": [
                                    ["color", custItem.value + " !important"]
                                    ]
                            });
                            break;
                        case "basket_TVHoverBGColor":
                            $.cssRule({
                                ".downloadBasket #basketFilesContainer .rowHover": [
                                    ["background", custItem.value + " !important"],
                                    ["background-color", custItem.value + " !important"]
                                    ]
                            });
                            break;
                        case "basket_TVHoverTextColor":
                            $.cssRule({
                                ".downloadBasket #basketFilesContainer .rowHover td, .downloadBasket #basketFilesContainer .rowHover td a, a.imgLink": [
                                    ["color", custItem.value + " !important"]
                                    ]
                            });
                            break;
                        case "basket_HideCheckbox":
                            if(custItem.value == "true")
                            {
                                $.cssRule({
                                    ".downloadBasket #basketFilesContainer .thSelect, .downloadBasket #basketFilesContainer .columnSelect": [
                                        ["display", "none !important"]
                                        ]
                                });
                            }
                            break;
                        case "basket_DefaultView":
                            if(custItem.value == "treeview")
                            {
                                $("#viewSelectorPanelBasket").find("a.treeViewLink").trigger("click");
                            }
                            else
                            {
                                $("#viewSelectorPanelBasket").find("a.thumbnailViewLink").trigger("click");
                            }
                            break;
                        case "hideViewSelector":
                            if(custItem.value == "true")
                            {
                                $.cssRule({
                                    "#viewSelectorPanel": [
                                        ["display", "none !important"]
                                        ]
                                });
                            }
                            break;
                        case "listDefaultView":
                            if(!window.customListDefaultView)
                            {
                                if(custItem.value == "treeview")
                                {
                                    window.customListDefaultView = "tree";
                                    changeView("tree");
                                    $(".treeViewLink", "#viewSelectorPanel").animate({
                                        opacity: 0.3
                                    }, 500);
                                    $(".thumbnailViewLink", "#viewSelectorPanel").animate({
                                        opacity: 1
                                    }, 500);
                                }
                                else
                                {
                                    window.customListDefaultView = "thumbs";
                                     $(".thumbnailViewLink", "#viewSelectorPanel").animate({
                                        opacity: 0.3
                                    }, 500);

                                    $(".treeViewLink", "#viewSelectorPanel").animate({
                                        opacity: 1
                                    }, 500);
                                    changeView("Thumbnail");
                                }
                            }
                            break;
                        case "basket_NoViewChange":
                            if(custItem.value == "true")
                            {
                                $.cssRule({
                                    "#viewSelectorPanelBasket": [
                                        ["display", "none !important"]
                                        ]
                                });
                            }
                            break;
                        case "basket_Maximized":
                            if(custItem.value == "true")
                            {
                                window.basketKeepMaximized = true;
                            }
                            break;
                        case "basket_HideFilter":
                            if(custItem.value == "true")
                            {
                                $.cssRule({
                                    "#filterPanelBasket": [
                                        ["display", "none !important"]
                                        ]
                                });
                            }
                            break;
                        case "basket_HideDownload":
                            if(custItem.value == "true")
                            {
                                $.cssRule({
                                    "#BasketDownloadLinkText": [
                                        ["display", "none !important"]
                                        ]
                                });
                            }
                            break;
                        case "basket_HideShare":
                            if(custItem.value == "true")
                            {
                                $.cssRule({
                                    "#BasketShareItemsLinkText": [
                                        ["display", "none !important"]
                                        ]
                                });
                            }
                            break;
                        case "basket_HideDownloadAdvanced":
                            if(custItem.value == "true")
                            {
                                $.cssRule({
                                    "#BasketDownloadAdvancedLinkText": [
                                        ["display", "none !important"]
                                        ]
                                });
                            }
                            break;
                        case "basket_NoContextMenu":
                            if(custItem.value == "true")
                            {
                                window.disableContextMenuOnBasket = true;
                            }
                            break;
                        case "basket_ThumbnailsBorderColor":
                            $.cssRule({
                                ".fileBoxBasket .imgBox": [
                                    ["border-color", custItem.value],
                                    ["-moz-box-shadow", "none"],
                                    ["-webkit-box-shadow", "none"],
                                    ["box-shadow", "none"]
                                ]
                            });
                            break;
                        case "basket_ThumbnailsHoverBorderColor":
                            $.cssRule({
                                ".fileBoxBasket:hover": [
                                    ["border-color", custItem.value]
                                ]
                            });
                            break;
                        case "thumbnailsImageBoxBorderColor":
                            $.cssRule({
                                ".fileBox .imgBox": [
                                    ["border-color", custItem.value],
                                    ["-moz-box-shadow", "none"],
                                    ["-webkit-box-shadow", "none"],
                                    ["box-shadow", "none"]
                                ]
                            });
                            break;
                        case "thumbnailsBorderColor":
                            $.cssRule({
                                ".fileBox": [
                                    ["border-color", custItem.value],
                                    ["-moz-box-shadow", "none"],
                                    ["-webkit-box-shadow", "none"],
                                    ["box-shadow", "none"]
                                ]
                            });
                            break;
                        case "thumbnailsBGColor":
                            $.cssRule({
                                ".fileBox": [
                                    ["background-color", custItem.value]
                                ]
                            });
                            break;
                        case "thumbnailsTextColor":
                            $.cssRule({
                                ".fileBox a": [
                                    ["color", custItem.value]
                                ]
                            });
                            break;
                        case "thumbnailsSelectedTextColor":
                            $.cssRule({
                                ".fileBox.fileBoxSelected, .fileBox.fileBoxSelected a": [
                                    ["color", custItem.value]
                                ]
                            });
                            break;
                        case "thumbnailsSelectedBGColor":
                            $.cssRule({
                                ".fileBox.fileBoxSelected, .fileBox.fileBoxSelected div": [
                                    ["background-color", custItem.value + " !important"]
                                ]
                            });
                            break;
                        case "thumbnailsSelectedBorderColor":
                            $.cssRule({
                                ".fileBox.fileBoxSelected": [
                                    ["border-color", custItem.value]
                                ]
                            });
                            break;
                        case "thumbnailsHoverBGColor":
                            $.cssRule({
                                ".fileBox:hover": [
                                    ["background-color", custItem.value + " !important"]
                                ]
                            });
                            break;
                        case "thumbnailsHoverTextColor":
                            $.cssRule({
                                ".fileBox:hover a": [
                                    ["color", custItem.value]
                                ]
                            });
                            break;
                        case "thumbnailsHoverBorderColor":
                            $.cssRule({
                                ".fileBox:hover": [
                                    ["border-color", custItem.value]
                                ]
                            });
                            break;
                        case "UPLOAD_THREADS":
                                window.UPLOAD_THREADS = parseInt(custItem.value);
                                if(!window.UPLOAD_THREADS || window.UPLOAD_THREADS == NaN)
                                    window.UPLOAD_THREADS = 1;
                            break;
                        case "DOWNLOAD_THREADS":
                                window.DOWNLOAD_THREADS = parseInt(custItem.value);
                                if(!window.DOWNLOAD_THREADS || window.DOWNLOAD_THREADS == NaN)
                                    window.DOWNLOAD_THREADS = 1;
                            break;
                        case "pagination_Color":
                            $.cssRule({
                                ".pagination a": [
                                    ["color", custItem.value]
                                    ]
                            });
                            break;
                        case "pagination_BGColor":
                            $.cssRule({
                                ".pagination a": [
                                    ["background-color", custItem.value]
                                    ]
                            });
                            break;
                        case "pagination_BorderColor":
                            $.cssRule({
                                ".pagination a": [
                                    ["border-color", custItem.value]
                                    ]
                            });
                            break;
                        case "pagination_ActiveColor":
                            $.cssRule({
                                ".pagination .current": [
                                    ["color", custItem.value]
                                    ]
                            });
                            break;
                        case "pagination_ActiveBGColor":
                            $.cssRule({
                                ".pagination .current": [
                                    ["background-color", custItem.value]
                                    ]
                            });
                            break;
                        case "pagination_ActiveBorderColor":
                            $.cssRule({
                                ".pagination .current": [
                                    ["border-color", custItem.value]
                                    ]
                            });
                            break;
                          case "pagination_DisabledColor":
                            $.cssRule({
                                ".pagination .prev.disable, .pagination .next.disable": [
                                    ["color", custItem.value]
                                    ]
                            });
                            break;
                        case "pagination_DisabledBGColor":
                            $.cssRule({
                                ".pagination .prev.disable, .pagination .next.disable": [
                                    ["background-color", custItem.value]
                                    ]
                            });
                            break;
                        case "pagination_DisabledBorderColor":
                            $.cssRule({
                                ".pagination .prev.disable, .pagination .next.disable": [
                                    ["border-color", custItem.value]
                                    ]
                            });
                            break;
                        case "pagination_HoverColor":
                            $.cssRule({
                                ".pagination a:hover, .pagination span:hover": [
                                    ["color", custItem.value]
                                    ]
                            });
                            break;
                        case "pagination_HoverBGColor":
                            $.cssRule({
                                ".pagination a:hover, .pagination span:hover": [
                                    ["background-color", custItem.value]
                                    ]
                            });
                            break;
                        case "pagination_HoverBorderColor":
                            $.cssRule({
                                ".pagination a:hover, .pagination span:hover": [
                                    ["border-color", custItem.value]
                                    ]
                            });
                            break;
                        case "maskedEmptyFolder":
                            if(custItem.value == "true")
                            {
                                window.maskedEmptyFolder = true;
                            }
                            break;
                        case "autoNavigateToFolderOnCreation":
                            if(custItem.value == "true")
                            {
                                $("#chkNavigateAfterMkdir").attr("checked", "checked");
                            }
                            break;
                        case "cutCopyOnlyFiles":
                            if(custItem.value == "true")
                            {
                                window.cutCopyOnlyFiles = true;
                            }
                            break;
                        case "uploadFormAskAgainChecked":
                            window.uploadFormAskAgainChecked = custItem.value == "true";
                            break;
                        case "uploadFormAskAgainHideAndChecked":
                            window.uploadFormAskAgainHideAndChecked = custItem.value == "true";
                            break;
                        case "uploadFormAskAgainHideAndUnchecked":
                            window.uploadFormAskAgainHideAndUnchecked = custItem.value == "true";
                            break;
                        case "dontuseHTML5Player":
                            window.dontuseHTML5Player = custItem.value == "true";
                            break;
                        case "disableRightClickOnHTML5Player":
                            window.disableRightClickOnHTML5Player = custItem.value == "true";
                            break;
                        case "autoStartMediaPlaybackInPreview":
                            window.autoStartMediaPlaybackInPreview = custItem.value == "true";
                            break;
                        case "autoPreviewMediaOnLoad":
                            window.autoPreviewMediaOnLoad = custItem.value == "true";
                            break;
                        case "searchDefaultKeywords":
                            searchDiv.find("#keyword").val(custItem.value);
                            break;
                        case "searchDefaultExactMatch":
                            if(custItem.value == "true")
                                searchDiv.find("#exact").attr("checked", "checked");
                            else
                                searchDiv.find("#exact").removeAttr("checked");
                            break;
                        case "searchDefaultSearchOnlyKeywords":
                            if(custItem.value == "true")
                                searchDiv.find("#keywords_only").attr("checked", "checked");
                            else
                                searchDiv.find("#keywords_only").removeAttr("checked");
                            break;
                        case "searchDefaultModifiedBefore":
                            var val = custItem.value;
                            if(val)
                            {
                                searchDiv.find("#date2").attr("checked", "checked");
                                searchDiv.find("#date2_action").val("before");
                                searchDiv.find("#date2_value").val(val);
                            }
                            break;
                        case "searchDefaultModifiedAfter":
                            var val = custItem.value;
                            if(val)
                            {
                                searchDiv.find("#date1").attr("checked", "checked");
                                searchDiv.find("#date1_action").val("before");
                                searchDiv.find("#date1_value").val(val);
                            }
                            break;
                        case "searchDefaultSize":
                            var val = custItem.value;
                            if(val)
                            {
                                if(val.indexOf(">")>=0)
                                {
                                    searchDiv.find("#size1").attr("checked", "checked");
                                    searchDiv.find("#size1_action").val("bigger than");
                                    searchDiv.find("#size1_value").val(val.replace(">",""));
                                }
                                else if(val.indexOf("<")>=0)
                                {
                                    searchDiv.find("#size1").attr("checked", "checked");
                                    searchDiv.find("#size1_action").val("smaller than");
                                    searchDiv.find("#size1_value").val(val.replace("<",""));
                                }
                            }
                            break;
                        case "searchDefaultType":
                            var val = custItem.value;
                            if(val)
                            {
                                searchDiv.find("#type1").attr("checked", "checked");
                                if(val=="file")
                                    searchDiv.find("#type1_action").val("file");
                                else if(val=="dir")
                                    searchDiv.find("#type1_action").val("folder");
                            }
                            break;
                        case "uploadBarHeaderText":
                            $("#uploadBarInformationText").text(custItem.value);
                            break;
                        case "showLanguageSelection":
                            if(custItem.value == "true")
                            {
                                $("#languageSelector").show();
                            }
                            break;
                        case "showLanguageSelectionPos":
                            if(custItem.value == "left")
                            {
                                $("#languageSelector").addClass('left');
                            }
                            break;
                        case "showOnlyTheseLanguages":
                            if(custItem.value)
                            {
                                window.showOnlyTheseLanguages = custItem.value;
                            }
                            break;
                        case "saveLanguageSelectionInCookie":
                            if(custItem.value == "false")
                            {
                                window.saveLanguageSelectionInCookie = false;
                            }
                            else if(custItem.value == "true")
                            {
                                window.saveLanguageSelectionInCookie = true;
                            }
                            break;
                        case "defaultWILanguage":
                            if(custItem.value && custItem.key == "defaultWILanguage")
                            {
                                window.defaultWILanguage = custItem.value;
                                setTimeout(function(){
                                    if(!window.isInitComplete)
                                    {
                                        loadAndApplyLanguageLocalizations(window.defaultWILanguage);
                                    }
                                }, 100);
                            }
                            break;
                        case "detectBrowserLanguage":
                            if(custItem.value == "true")
                            {
                                window.detectBrowserLanguage = true;
                            }
                            break;
                        case "doNotDisplayDirectoryInformation":
                            window.doNotDisplayDirectoryInformation = custItem.value == "true";
                            break;
                        case "doNotShowListFileSize":
                            $.cssRule({
                                "#dirSizeInfo": [
                                    ["display", "none !important"]
                                ]
                            });
                            break;
                        case "dontShowButtonsInMainMenu":
                            window.dontShowButtonsInMainMenu = custItem.value == "true";
                            break;
                        case "applyFilterToTreeLevels":
                            window.applyFilterToTreeLevels = custItem.value == "true";
                            break;
                        case "showExpandCollapseAllForTreeView":
                            if(custItem.value == "true" && !window.expandCollapseAllEventReady)
                            {
                                window.expandCollapseAllEventReady = true;
                                if(isCrush7Ready())
                                {
                                    $("a.treeViewExpandAllLink,a.treeViewCollapseAllLink").unbind().click(function(event) {
                                        if (currentView() != "Thumbnail") {
                                            expandAllItems(false, $(this).is(".treeViewExpandAllLink"));
                                        }
                                        return false;
                                    });
                                    $(".treeviewExpandOptions").show();
                                    if (currentView() == "Thumbnail") {
                                        $(".treeviewExpandOptions").hide();
                                    }
                                    window.showExpandAllButtons = true;
                                }
                                else
                                {
                                    $(".treeviewExpandOptions").hide();
                                }
                            }
                        case "noRedirectToLoginAfterAutoLogout":
                            if (custItem.value == "true")
                            {
                                window.noRedirectToLoginAfterAutoLogout = true;
                            }
                            break;
                        case "logoutOnPageClose":
                            if (custItem.value == "true")
                            {
                                window.logoutOnPageClose = true;
                            }
                            break;
                        case "HideUserOptionHideDotItems":
                            if(custItem.value && custItem.value == "true")
                                $("#userOptionHideDotItems").hide();
                            break;
                        case "HideUserOptionHideCheckBoxColumn":
                            if(custItem.value && custItem.value == "true")
                                $("#userOptionHideCheckBoxColumn").hide();
                            break;
                        case "HideUserOptionHideFilterSection":
                            if(custItem.value && custItem.value == "true")
                                $("#userOptionHideFilterSection").hide();
                            break;
                        case "HideUserOptionAutoStartUpload":
                            if(custItem.value && custItem.value == "true")
                                $("#userOptionAutoStartUpload").hide();
                            break;
                        case "HideUserOptionAutoLoadJavaApplet":
                            if(custItem.value && custItem.value == "true")
                                $("#userOptionAutoLoadJavaApplet").hide();
                            break;
                        case "HideUserOptionJavaCompression":
                            if(custItem.value && custItem.value == "true")
                                $("#userOptionJavaCompression").hide();
                            break;
                        case "HideUserOptionChangePassword":
                            if(custItem.value && custItem.value == "true")
                                $("#userOptionChangePassword").hide();
                            break;
                        case "HideUserOptionGeneratePassword":
                            if(custItem.value && custItem.value == "true")
                                $("#btnGeneratePassword", "#userOptionChangePassword").hide();
                            break;
                        case "disableDirectoryItemCount":
                            if(custItem.value && custItem.value == "true")
                                window.disableDirectoryItemCount = true;
                            break;
                        /* added by carlos */
                        case "inlinePlayer_graphcolor":
                            if(custItem.value)
                                inlinePlayer_graphcolor = custItem.value;
                            break;
                        case "inlinePlayer_progresscolor":
                            if(custItem.value)
                                inlinePlayer_progresscolor = custItem.value;
                            break;
                        case "inlinePlayer_visible":
                            if(custItem.value && (custItem.value == "true" || custItem.value == "false"))
                                inlinePlayer_enable = custItem.value;
                            break;
                        case "inlinePlayer_graphvisible":
                            if(custItem.value)
                                inlinePlayer_graphvisible = custItem.value;
                            break;
                        case "inlinePlayer_playqueue":
                            if(custItem.value == "true")
                                inlinePlayer_playqueue = true;
                            break;
                        case "AdvancedUploadDownloadOptionDefaultMode":
                            if(custItem.value)
                            {
                                $("#uploadOptionsDialog_ow").val(custItem.value);
                            }
                            break;
                        case "AdvancedUploadDownloadOptionHideCompression":
                            if(custItem.value && custItem.value == "true")
                            {
                                $("#uploadOptionsDialog").find(".compressionOptions").hide();
                            }
                            break;
                        case "AdvancedUploadDownloadOptionCompression":
                            if(custItem.value)
                            {
                                if(custItem.value == "true")
                                    $("#uploadOptionsDialog_co").val("false");
                                else
                                    $("#uploadOptionsDialog_co").val("true");
                            }
                            break;
                        case "AdvancedUploadDownloadOptionConfirmDialogDefaultAction":
                            if(custItem.value)
                            {
                                $("#ask_response, #ask_responseDownload").val(custItem.value);
                            }
                            break;
                        case "LogoutCustomRedirectPath":
                            if (custItem.value)
                            {
                                window.LogoutCustomRedirectPath = custItem.value;
                            }
                            break;
                        case "runBatchCompletedCommandAfterUploadQueueFinishes":
                            if(custItem.value && custItem.value == "true")
                                window.runBatchCompletedCommandAfterUploadQueueFinishes = true;
                            break;
                        case "customFileValidationMethod":
                            if(custItem.value)
                                window.customFileValidationMethod = window[custItem.value];
                            break;
                        case "customShareLinkURL":
                            if(custItem.value)
                                window.customShareLinkURL = custItem.value;
                            break;
                        case "disableUIDragDrop":
                            if(custItem.value == "true")
                                window.disableUIItemDragDrop = true;
                            break;
                        case "showFullKeywords":
                            if(custItem.value && custItem.value == "true"){
                                window.donotConcatKeywords = true;
                                $("body").addClass('fullKeywords');
                            }
                            break;
                        case "contextmeuBGColor":
                            $.cssRule({
                                ".contextMenu": [
                                    ["background-color", custItem.value]
                                ]
                            });
                            break;
                        case "contextmeuColor":
                            $.cssRule({
                                ".contextMenu": [
                                    ["color", custItem.value]
                                ]
                            });
                            break;
                        case "contextmeuHoverBGColor":
                            $.cssRule({
                                ".contextMenu LI.hover A": [
                                    ["background-color", custItem.value]
                                ]
                            });
                            break;
                        case "contextmeuHoverColor":
                            $.cssRule({
                                ".contextMenu LI.hover A": [
                                    ["color", custItem.value]
                                ]
                            });
                            break;
                        case "maxListItemsBeforeShowingWarning":
                            if(custItem.value)
                                window.maxListItemsBeforeShowingWarning = parseInt(custItem.value);
                            break;
                        case "maxListItemsWarningMessage":
                            if(custItem.value)
                                window.maxListItemsWarningMessage = custItem.value;
                            break;
                        case "maxUploadItemsBeforeShowingWarning":
                            if(custItem.value)
                                window.maxUploadItemsBeforeShowingWarning = parseInt(custItem.value);
                            break;
                        case "maxUploadItemsWarningMessage":
                            if(custItem.value)
                                window.maxUploadItemsWarningMessage = custItem.value;
                            break;
                         case "uploadWindowShowNameInsteadOfFullPath" :
                            if (custItem.value == "true")
                            {
                                window.uploadWindowShowNameInsteadOfFullPath = true;
                            }
                            break;
                        case "clickOnParentOfFileName" :
                            if (custItem.value == "true")
                            {
                                window.clickOnParentOfFileName = true;
                            }
                            break;
                        case "homeCustomTextFormat":
                            if(custItem.value)
                                window.homeCustomTextFormat = custItem.value;
                            break;
                        case "directCopyLinkWebInterfaceFriendly":
                            if(custItem.value == "true")
                                window.directCopyLinkWebInterfaceFriendly = true;
                            break;
                        default:
                            break;
                        }
                    }
                    var destinationPath = hashListener.getHash().toString().replace("#", "");
                    if (destinationPath.indexOf("/IMPULSEUpload/") > 0) //Upload only
                    {
                        makeItUploadOnly();
                    }

                    if(!window.isInitComplete)
                    {
                        setTimeout(function(){
                            if(!window.isInitComplete)
                            {
                                loadAndApplyLanguageLocalizations(false, true);
                            }
                            window.isInitComplete = true;
                        },100);
                    }
                }

                //Get popup color
                function getPopupColor(bg, header, headertext, slideshow) {
                    if (bg) {
                        return $(document).data("popupBackgroundColor") || "#FFF";
                    }
                    else if (header) {
                        return $(document).data("popupHeaderBackgroundColor") || "#F1EEEE";
                    }
                    else if (headertext) {
                        return $(document).data("popupHeaderTextColor") || "#000";
                    }
                    else if(slideshow)
                    {
                        if(window.slideshowBG)
                            return window.slideshowBG;
                        else
                            return $(document).data("popupBackgroundColor") || "#000";
                    } else {
                        return $(document).data("popupBorderColor") || "#CCC";
                    }
                }

                window.getPopupColorExternal = function(bg, header, headertext)
                {
                    return getPopupColor(bg, header, headertext);
                }

                //Apply share popup customizations
                function applyShareCustomizations(shareTemplate) {
                    var customizations = $(document).data("customizations");
                    if(window.shareWindoeEmailBodyReadonly)
                        $("textarea#emailBody", "#shareOptionDiv").attr("readonly", "readonly");
                    if(window.shareWindoeEmailSubjectReadonly)
                        $("#emailSubject", "#shareOptionDiv").attr("readonly", "readonly");
                    if (customizations)
                    {
                        for (var item in customizations) {
                            var custItem = customizations[item];
                            switch (custItem.key) {
                            case "EXPIREDAYS":
                                $("#txtdays", "#shareOptionDiv").val(custItem.value);
                                window.ShareItemExpiresInDays = parseInt(custItem.value);
                                if (window.ShareItemExpiresInDays == NaN) window.ShareItemExpiresInDays = 30;
                                break;
                            case "EXPIREDAYSMAX":
                                window.ShareItemExpiresInMaxDays = parseInt(custItem.value);
                                if (window.ShareItemExpiresInMaxDays == NaN) window.ShareItemExpiresInMaxDays = 0;
                                break;
                            case "SENDEMAILDEFAULT":
                                if(custItem.value == "true")
                                    $("#sendEmail").attr("checked","checked");
                                else
                                    $("#sendEmail").removeAttr("checked");
                                break;
                            case "SHAREMETHOD":
                                if(custItem.value && custItem.value.toLowerCase() == "internal")
                                    $("#shareUsername", "#shareOptionDiv").attr("checked","checked");
                                else
                                    $("#externalUser", "#shareOptionDiv").attr("checked","checked");
                                break;
                            case "EMAILFROM":
                                $("#emailFrom").val(custItem.value);
                                break;
                            case "EMAILTO":
                                $("#emailTo").val(custItem.value);
                                break;
                            case "EMAILCC":
                                $("#emailCc").val(custItem.value);
                                break;
                            case "EMAILBCC":
                                $("#emailBcc").val(custItem.value);
                                break;
                            case "EMAILREPLYTO":
                                $("#emailReplyTo").val(custItem.value);
                                break;
                            case "EMAILSUBJECT":
                                $("#emailSubject").val(custItem.value);
                                break;
                            case "EMAILBODY":
                                custItem.value = custItem.value.replace(/\\r/g, '\r');
                                custItem.value = custItem.value.replace(/\\n/g, '\n');
                                var emailVal = custItem.value;
                                window.shareEmailBody = crushFTPTools.decodeXML(emailVal);
                                $("textarea#emailBody", "#shareOptionDiv").val(emailVal);
                                break;
                            default:
                                break;
                            }
                        }
                        var maxLogins = $(document).data("ShareDefaultLoginsValue");
                        if(maxLogins)
                        {
                            $("#logins", "#shareOptionDiv").val(maxLogins);
                        }
                        if(window.shareWindowEnableUsernameLookup == true)
                        {
                            $("#shareMultipleSelectionQuick").closest("div").show();
                            var elem = $("#shareUsernames");
                            setTimeout(function(){
                                var formName = "share_form";
                                var elemName = "shareUsernames"
                                if(!elem.data("autoCompleteAdded"))
                                {
                                    elem.tokenInput("/WebInterface/function/?command=lookup_form_field&form_name="+formName+"&form_element_name=" + elemName + "&c2f=" + crushFTPTools.getCrushAuth(), {
                                        theme : "facebook",
                                        preventDuplicates : true,
                                        onResult: function (results, val) {
                                            if(results && results.length==0 && val)
                                            {
                                                results = [{"id":val,"name":val}];
                                            }
                                            return results;
                                        }
                                    });
                                    elem.data("autoCompleteAdded", true);
                                }
                            }, 500);
                            var multipleSelect = elem.closest("td").find(".multipleSelectOption");
                            $.ajax({
                                type: "POST",
                                url: "/WebInterface/function/?command=lookup_form_field&form_name=share_form&form_element_name=shareUsernames&q=&c2f="+crushFTPTools.getCrushAuth(),
                                success: function (data) {
                                    var checks = [];
                                    var users = [];
                                    var usersData = [];
                                    if(data && data.length>0)
                                    {
                                        for (var i = 0; i < data.length; i++) {
                                            var curItem = data[i];
                                            if(!users.has(curItem.name))
                                            {
                                                users.push(curItem.name);
                                                usersData.push(curItem);
                                            }
                                        };
                                    }
                                    elem.val("");
                                    window.availableInternalUsersCheck = usersData;
                                    $("#filterAvailableUsers, #filterAddedUsers").trigger('keyup');
                                }
                            });
                        }
                        else
                            $("#shareMultipleSelectionQuick").closest("div").hide();
                        if(typeof window.shareWindowFlagDirectLinkForFile != "undefined")
                        {
                            var dierctLink = $("#frmShareWindow").find(".directLink").hide();
                            if(window.shareWindowFlagDirectLinkForFile)
                                dierctLink.find("input").removeAttr("checked");
                            else
                                dierctLink.find("input").attr("checked", "checked");
                        }
                        if(window.shareWindowHideDownloadButtonVisible)
                        {
                            $("#hideDownloadButtonShare", "#shareOptionDiv").show();
                        }
                        if(window.altTempAccount){
                            var shareAltTempAcc = $("#shareAltTempAcc", "#shareOptionDiv").show();
                            if(window.defaultAltTempAccount)
                            {
                                shareAltTempAcc.find("#share_alt_tempaccount").val(window.defaultAltTempAccount);
                            }
                        }
                        if(window.shareAllowPrivsModification)
                        {
                            $(".shareFullPrivs", "#shareOptionDiv").show();
                            $(".permissions", "#shareOptionDiv").hide();
                        }
                        else{
                            $(".shareFullPrivs", "#shareOptionDiv").hide();
                            if(window.shareWindowHidePermissions == true)
                            {
                                $(".permissions", shareOptionDiv).hide();
                            }
                            else{
                                $(".permissions", shareOptionDiv).show();
                            }
                        }
                        if(window.shareWindowHideDownloadButtonVisibleDefaultVal)
                        {
                            $("#hide_download", "#shareOptionDiv").attr("checked", "checked");
                        }
                        if(window.forceGeneratePasswordShare)
                        {
                            var passGenPanel = $(".shareUserGenerationPanel").parent().removeClass("advanced").show();
                            passGenPanel.find("input[type='radio']").attr("disabled", "disabled");
                            passGenPanel.find("#ShareGeneratePass").attr("checked", "checked").trigger("change").parent().parent().hide();
                            setTimeout(function(){
                                passGenPanel.find(".generateUP").show().find("input").val("");
                            });
                        }
                        var inputs = $("#frmShareWindow").attr("autocomplete", "disabled").find("input:not([disabled])").attr("autocomplete", "disabled").prop("autocomplete", "disabled").attr("disabled", "disabled");
                        setTimeout(function () {
                            inputs.removeAttr("disabled");
                        }, 100);
                    }
                    if(!window.quickShareEmailBody)
                    {
                        window.quickShareEmailBody = crushFTPTools.decodeXML($("textarea#emailBody", "#shareOptionDiv").val());
                    }
                    if(window.applyShareTemplate){
                        if (shareTemplate && typeof shareTemplate == "string") {
                            if(window.shareTemplates && window.shareTemplates[shareTemplate]){
                                applyShareTemplate(window.shareTemplates[shareTemplate]);
                            }
                        }
                    }
                }

                //Switch to slideshow only mode
                function makeItSlideShowOnly() {
                    if(!window.doSlideshow || $(document).data("uploadOnly")) return;
                    $("#mainContent").hide();
                    $(document).data("slideShowOnly", true);
                    $("div.mainNavigation").remove();
                    $("#headerContent").prepend("<a id=\"logoutLinkTopCorner\" href=\"javascript:doLogout();\">"+getLocalizationKey("LogoutButtonText")+"</a>");
                    window.slideshowOnly = true;
                    doSlideshow(true);
                }

                //Switch to upload only mode
                function makeItUploadOnly() {
                    if(!$.CrushFTP || $(document).data("slideShowOnly"))return;
                    if(!$.CrushFTP.DNDAdded)
                    {
                        $.CrushFTP.attachDND(o);
                        $.CrushFTP.DNDAdded = true;
                    }
                    if(window.useOldUploader){
                        setTimeout(function() {
                           browserUploader();
                        }, 100);
                    }
                    else{
                        $("body").bind("newUploadPanelLoaded", function(){
                            setTimeout(function() {
                                browserUploader();
                                var customizations = $(document).data("customizations"); //Customizations from cache
                                if(!window.useOldUploader && window.newUploadAdded && window.crushUpload && !window.newUploadCustomizationsApplied){
                                    window.newUploadCustomizationsApplied = true;
                                    window.crushUpload.applyCustomizations(customizations);
                                }
                            }, 100);
                            var fileUploadModule = $('#fileUploadModule');
                            var maxWindowWidth = $(window).width() - 25;
                            var uploadModuleWidth = window.uploadPanelDefaultWidth || maxWindowWidth;
                            uploadModuleWidth = uploadModuleWidth < 850 ? 850 : uploadModuleWidth;
                            uploadModuleWidth = uploadModuleWidth > maxWindowWidth ? maxWindowWidth : uploadModuleWidth;
                            setTimeout(function(){
                                //window.showUploadPanel();
                                fileUploadModule.css("left", 13).css("top", 120).css("zIndex", 99);
                                window.crushUpload.listWidth(uploadModuleWidth);
                                window.resizeiFramePanel(window.crushUpload.listWidth);
                            }, 1000);
                            $(window).bind("resize", function(){
                                window.crushUpload.listWidth(uploadModuleWidth);
                                window.resizeiFramePanel(window.crushUpload.listWidth);
                            });
                            var dropZone = $('#dropItemsPanel').get(0);
                            dropZone.addEventListener('drop', function(e) {
                                crushUpload.addFiles(e);
                            });
                        });
                    }
                    var $elem = $("div#fileQueueInfo, div#dropItemsPanel, div#javaAppletDiv");
                    $("#mainContent").hide().before($elem);//.after("<span class='clear'></span>");
                    $("#hideUploadPanel").hide();
                    $("#mainContent").before($("div.mainNavigation"));
                    $("div.mainNavigation").remove();
                    $("#headerContent").prepend("<a id=\"logoutLinkTopCorner\" href=\"javascript:doLogout();\">"+getLocalizationKey("LogoutButtonText")+"</a>");
                    $("#header").css("margin-top", "15px");
                    var fileRepo = $("#fileRepo");
                    try{
                        fileRepo.draggable("destroy");
                    }catch(ex){}
                    fileRepo.css("position", "relative");
                    fileRepo.find(".fileListHeader").css("cursor","auto");
                    $("#viewFileQueue").remove();
                    fileRepo.find("#toggleFileList").remove();
                    fileRepo.css("width","99%");
                    fileRepo.find("ul.files").css({
                        "max-height" : "600px",
                        "overflow-y" : "",
                        "width" : "auto"
                    });
                    $.cssRule({
                        ".template-upload .name": [
                            ["width", "500px"]
                            ]
                    });
                    $(document).data("uploadOnly", true);
                }

                function showDirListingFile(callback)
                {
                    loading.show();
                    var path = document.location.hash;
                    if (path == "") path = "/";
                    if (path.indexOf("#") == 0) path = path.substring(1);
                    if(path.indexOf("/BASE64CRUSH_")==0 || path.indexOf("BASE64CRUSH_")==0)
                    {
                        if(path.indexOf("/") == 0)
                        {
                            path = path.replace("/", "");
                        }
                        if(path.lastIndexOf("/") == path.length-1)
                        {
                            path = path.substring(0, path.length-1);
                        }
                        path = Base64.decode(path.replace("BASE64CRUSH_", ""));
                    }
                    $("#htmlListingFile").empty().show().load(path + window.listingHTMLPage, function(response, status, xhr){
                        if (status == "error") {
                            window.listingPageShown = false;
                            setTimeout(function(){
                                loading.hide();
                            }, 100);
                            if(callback)
                                callback();
                        }
                        else
                        {
                            window.listingPageShown = true;
                            $("#mainNavigation,#filesListing, #fileQueueInfo,.layoutActionElement, .filter-content, #dndInfoTextHolder").hide();
                            if(window.listingHTMLPageKeepButtons)
                            {
                                $("#mainNavigation").show();
                            }
                            $(".mainProcessIndicator").hide();
                            bindBreadcrumbs();
                            setTimeout(function(){
                                loading.hide();
                            }, 100);
                        }
                    });
                }

                //Show slideshow popup, if slideshow only cover whole page with slideshow
                window.doSlideshow = function (_slideshowOnly, _popup) {
                    if ($(document).data("slideShowOnly")) {
                        $("#mainContent").before($('div.slideshow'));
                        $('div.slideshow').before($("div.mainNavigation"));
                    }
                    var h = window.innerHeight ? window.innerHeight : $(window).height();
                    h = h * 0.92;
                    var destinationPath = "#" + crushFTPTools.sanitize(window.loadedPath);
                    var iframePath = '/WebInterface/jQuery/slideshowView.html' + destinationPath;
                    var iframe = $('<iframe frameborder="0" scrolling="auto" style="width: 100%; height:' + h + 'px;background-color: #000000;" name="cftp_iframeSS" id="cftp_iframeSS" src="about:blank;" hspace="0" allowtransparency="false"></iframe>');
                    $('div.slideshow').empty().append(iframe);
                    iframe.attr("src", iframePath);
                    // $('div.slideshow').empty().append('<iframe frameborder="0" scrolling="auto" style="width: 100%; height:' + h + 'px;background-color: #000000;" name="cftp_iframeSS" id="cftp_iframeSS" src="'+iframePath+'" hspace="0" allowtransparency="false"></iframe>');
                    $(window).bind("resize", function () {
                        //When window resizes control and slideshow should resize its size
                        resetSlideShowDimensions();
                    });
                }
                //Hide Sync Popup
                window.hideSyncPopup = function()
                {
                    $("#manageSyncPanel").dialog("close");
                }

                //Sync loaded
                window.resizeSyncPopup = function()
                {
                    if($("#manageSyncPanel").hasClass("resized"))return;
                    $("#manageSyncPanel").css("overflow","auto");
                    var manageSyncPanel = $("#manageSyncPanel").addClass("resized").dialog("open").dialog("widget").animate({
                        title : "Manage Syncs",
                        width: '1100px',
                        height: '800px'
                    }, {
                        duration: 500,
                        step: function() {
                            $("#manageSyncPanel").dialog('option','position', { my: "center", at: "center", of: window });;
                        }
                    });
                    $("#manageSyncPanel").dialog({resizable: true});
                    //manageSyncPanel.dialog( "option", "position", manageSyncPanel.dialog( "option", "position" ) );
                    $("#manageSyncPanel").dialog('option','position', { my: "center", at: "center", of: window });
                    $("#manageSyncPanel").css("height","auto").find("iframe").attr("style", "width: 99%; height:770px;background-color: #fff;margin:0px;padding:0px;min-width:1100px;");
                }

                window.resetSyncPopupTitle = function()
                {
                    var _title = $("#manageSyncPanel").parent().find(".ui-dialog-titlebar").css("position","absolute").css("width", "100%");
                    setTimeout(function(){
                        _title.css("position","relative").css("width", "auto");
                    }, 100);
                }
                //Show manage sync popup
                window.popupManageSync = function (_slideshowOnly, _popup) {
                    var h = window.innerHeight ? window.innerHeight : $(window).height();
                    h = h * 0.92;
                    var manageSyncPanel = $("#manageSyncPanel").removeClass("resized").dialog({
                        autoOpen: false,
                        closeOnEscape: false,
                        dialogClass : "syncMgr",
                        title : "Manage Syncs",
                        draggable: true,
                        width: "500",
                        minHeight: 300,
                        height: 300,
                        modal: true,
                        buttons: {},
                        resizable: false,
                        position: { my: "center", at: "center", of: window },
                        open : function()
                        {
                            var closeButton = manageSyncPanel.parent().find(".ui-dialog-titlebar-close");
                            if(closeButton.parent().find("a.openInNewTab").length==0)
                            {
                                var _openLink = localizations.popupOpenInSeparateWindowText|| "Open in a separate window";
                                closeButton.after('<a title="'+_openLink+'" target="_blank" href="/WebInterface/sync/index.html" role="button" style="float: right;margin-right: 15px;margin-top: -15px;font-size: 12px;font-weight: normal;display: inline-block;width: auto;" class="openInNewTab ui-corner-all"><span style="float:left;margin-top:0px;" class="ui-icon ui-icon-newwin"></span>'+_openLink+'</a>');
                                var newTabLink = closeButton.parent().find("a.openInNewTab").click(function(){
                                    window.hideSyncPopup();
                                });
                            }
                            $("#manageSyncPanel").parent().css("position","absolute").css("z-index","9999");
                        },
                        create: function(event, ui) {
                            $(event.target).parent().css('position', 'fixed');
                        },
                        resizeStart : function(event, ui){
                            $("#manageSyncPanel").find("iframe").css("visibility", "hidden");
                        },
                        resizeStop: function(event, ui) {
                            $("#manageSyncPanel").find("iframe").css("visibility", "visible");
                            // var position = [(Math.floor(ui.position.left) - $(window).scrollLeft()),
                            //                  (Math.floor(ui.position.top) - $(window).scrollTop())];
                            // $(event.target).parent().css('position', 'fixed');
                            $("#manageSyncPanel").dialog('option','position', { my: "center", at: "center", of: window });
                        }
                    });
                    manageSyncPanel.empty().append('<iframe frameborder="0" scrolling="auto" style="width: 100%;height:300px;background-color: #fff;margin:0px;padding:0px;min-width: 95%;height:100%;" name="cftp_iframeManageSync" id="cftp_iframeManageSync" src="/WebInterface/sync/index.html?popup=true" hspace="0" allowtransparency="false"></iframe>');
                    manageSyncPanel.dialog("open");
                }

                window.popupManageShares = function()
                {
                    var h = window.innerHeight ? window.innerHeight : $(window).height();
                    h = h * 0.92;
                    var lang = window.languageLoaded ? "lang=" + window.languageLoaded : "lang=en";
                    var manageSharesPanel = $("#manageSharesPanel").removeClass("resized").dialog({
                        autoOpen: false,
                        closeOnEscape: false,
                        dialogClass : "manageShareWindow",
                        title : localizations.ManageShareWindowHeaderText,
                        draggable: true,
                        width: "80%",
                        maxHeight: h,
                        height : 650,
                        minWidth : 800,
                        modal: true,
                        buttons: {},
                        resizable: true,
                        zIndex : 2100,
                        position: { my: "center", at: "center", of: window },
                        open : function()
                        {
                            var closeButton = manageSharesPanel.parent().find(".ui-dialog-titlebar-close");
                            if(!window.noOpenInNewTabManageShares && closeButton.parent().find("a.openInNewTab").length==0)
                            {
                                var _openLink = localizations.popupOpenInSeparateWindowText|| "Open in a separate window";
                                closeButton.after('<a title="'+_openLink+'" target="_blank" href="/WebInterface/ManageShares/index.html?'+lang+'" role="button" style="float: right;margin-right: 30px;margin-top: -16px;font-size: 12px;font-weight: normal;display: inline-block;width: auto;" class="openInNewTab ui-corner-all"><span style="float:left;margin-top:0px;" class="ui-icon ui-icon-newwin"></span>'+_openLink+'</a>');
                                var newTabLink = closeButton.parent().find("a.openInNewTab").click(function(){
                                    manageSharesPanel.dialog("close");
                                });
                            }
                            manageSharesPanel.parent().css("zIndex", "1000");
                            var closeButton = manageSharesPanel.parent().find(".ui-dialog-titlebar-close").show().unbind("hover");
                            if(closeButton.parent().find("a.fullScreen").length==0)
                            {
                                closeButton.after('<a title="Maximize" href="#" role="button" style="float: right;margin-right: 13px;margin-top: 0px;" class="fullScreen ui-corner-all"><span class="ui-icon ui-icon-arrow-4-diag">Fullscreen</span></a>');
                                var fullScreenLink = closeButton.parent().find("a.fullScreen").click(function(){
                                    var isFullS = manageSharesPanel.attr("maximized");
                                    if(!isFullS)
                                    {
                                        $(this).find("span").addClass("ui-icon-arrow-1-sw").removeClass("ui-icon-arrow-4-diag");
                                        $(this).attr("title", "Resize to original size");
                                        var h = window.innerHeight ? window.innerHeight : $(window).height();
                                        var w = $(window).width() - 10;
                                        h -= 5;
                                        //manageSharesPanel.parent().css("position", "fixed");
                                        manageSharesPanel.parent().css("position", "fixed").css("zIndex", "2100")
                                        $("body").css("overflow", "hidden");
                                        manageSharesPanel.dialog("widget").animate({
                                            width: w+'px',
                                            height:h+'px'
                                          }, {
                                          duration: 100,
                                          step: function() {
                                            manageSharesPanel.dialog('option', 'position', { my: "center", at: "center", of: window });
                                          }
                                        });
                                        manageSharesPanel.dialog('option', 'resizable', false);
                                        manageSharesPanel.dialog('option', 'draggable', false);
                                        manageSharesPanel.height(h + "px");
                                        h -= 30;
                                        manageSharesPanel.find("iframe").height(h + "px");
                                        manageSharesPanel.find("iframe").width(w + "px");
                                        manageSharesPanel.attr("maximized", "true");
                                    }
                                    else
                                    {
                                        $(this).attr("title", "Maximize");
                                        $(this).find("span").addClass("ui-icon-arrow-4-diag").removeClass("ui-icon-arrow-1-sw");
                                        //manageSharesPanel.parent().css("position", "absolute");
                                        manageSharesPanel.parent().css("position", "absolute");
                                        $("body").css("overflow", "auto");
                                        manageSharesPanel.dialog("widget").animate({
                                            width: '80%',
                                            height:'650px'
                                          }, {
                                          duration: 100,
                                          step: function() {
                                            manageSharesPanel.dialog('option', 'position',  { my: "center", at: "center", of: window });
                                          }
                                        });
                                        manageSharesPanel.dialog('option', 'resizable', true);
                                        manageSharesPanel.dialog('option', 'draggable', true);
                                        manageSharesPanel.find("iframe").height("600px").width("100%");
                                        manageSharesPanel.removeAttr("maximized");
                                    }
                                    return false;
                                });
                            }
                            else
                            {
                                if(manageSharesPanel.attr("maximized"))
                                {
                                    manageSharesPanel.removeAttr("maximized");
                                }
                                else
                                {
                                    manageSharesPanel.attr("maximized", "true");
                                }
                                closeButton.parent().find("a.fullScreen").trigger("click");
                            }
                        },
                        create: function(event, ui) {
                            $(event.target).parent().css('position', 'fixed');
                        },
                        resizeStop: function(event, ui) {
                            manageSharesPanel.width("100%");
                            if(ui.size.height > 650)
                                manageSharesPanel.find("iframe").height(ui.size.height - 50);
                            else
                                manageSharesPanel.find("iframe").height(600);
                        },
                        close : function()
                        {
                            $("body").css("overflow", "auto");
                        }
                    });
                    manageSharesPanel.empty().append('<iframe frameborder="0" scrolling="auto" style="width: 100%;background-color: #fff;margin:0px;padding:0px;height:600px;" name="cftp_iframeManageShares" id="cftp_iframeManageShares" src="/WebInterface/ManageShares/index.html?popup=true&'+lang+'" hspace="0" allowtransparency="false"></iframe>');
                    manageSharesPanel.dialog("open");
                }

                function rotateImage(imgControl, flag)
                {
                    if(!imgControl || imgControl.length==0)return;
                    var curAngle = imgControl.attr("curAngle") || 0;
                    curAngle = parseInt(curAngle);
                    var oldAngle = parseInt(curAngle);
                    if(curAngle == -360 || curAngle == 360) curAngle=0;
                    if(flag)
                        curAngle -= 90;
                    else
                        curAngle += 90;
                    if(curAngle == -360 || curAngle == 360) curAngle = 0;
                    imgControl.rotate({
                        angle: oldAngle,
                        animateTo: curAngle
                    });
                    imgControl.attr("curAngle", curAngle);
                    var resizeA = curAngle;
                    if(resizeA == -360 || resizeA == 360) resizeA = 0;
                    var h = imgControl.parent().height();
                    var _h = h * 0.98;
                    var imgH = imgControl.parent().height();
                    var imgW = imgControl.parent().width();
                    if(resizeA != 0 && resizeA != 180 && resizeA != -180)
                    {
                        if(imgW<imgH)
                        {
                            _h = Math.round(imgW * 0.65);
                            imgControl.css({"height":"auto","width": _h + "px", "margin-top":"80px"});
                        }
                        else
                        {
                            imgControl.css({"height":"auto","width": _h + "px", "margin-top":"80px"});
                        }
                    }
                    else
                    {
                        imgControl.css({"height":_h + "px","width":"auto", "margin-top":"auto"});
                    }
                }

                function isAltPreviewPresentForMovie(file)
                {
                    var ext = window.useExtensionForAltMoviewPreview;
                    file = file.substr(0,file.lastIndexOf(".")) + "." + ext;
                    var _path = file.substr(0,file.lastIndexOf("/")) || "";
                    if(!_path.endsWith("/"))
                        _path = _path + "/";
                    try{
                        _path = crushFTPTools.decodeURILocal(_path);
                        _path = crushFTPTools.encodeURILocal(unescape(unescape(_path)));
                    }
                    catch(ex)
                    {
                        _path = crushFTPTools.encodeURILocal(_path);
                    }
                    var obj = {
                        command: "getXMLListing",
                        format: "JSONOBJ",
                        path: _path,
                        random: Math.random()
                    };
                    var hasAltFile = false;
                    obj.c2f = crushFTPTools.getCrushAuth();
                    $.ajax({
                        type: "POST",
                        url: o.ajaxCallURL,
                        data: obj,
                        async: false,
                        dataType: "json",
                        beforeSend: function(x) {
                            if(x && x.overrideMimeType) {
                                x.overrideMimeType("application/j-son;charset=UTF-8");
                            }
                        },
                        success: function (data) {
                            if(data.listing)
                            {
                                for (var i = 0; i < data.listing.length; i++) {
                                    var curItem = data.listing[i];
                                    if(curItem.href_path == file)
                                        hasAltFile = true;
                                }
                            }
                        }
                    });
                    return hasAltFile;
                 }

                //Quick view on item, allows preview of large image in popup of item (If item has preview, provides next-prev options). Uses colorboc plugin
                window.quickView = function (custom) {
                    custom = custom || window.useCustomQuickView;
                    if(window.onImagePreviewenter)
                        window.onImagePreviewenter();
                    setTimeout(function(){
                        clearUIDNDData();
                    }, 10);
                    var _html = [];
                    var _itemHTML = "<p><a href=\"HREF\" fileName=\"FILENAME\" startPlay=\"STARTPLAY\" rel=\"QUICKVIEW\" title=\"TITLE\">TITLE</a></p>"; // Basic html used in colorbox mode
                    var _fileName = false;
                    var basket = false;
                    var elem = currentContext();
                    var checkedFiles = [];
                    if (elem) {
                        var $curElem = $(elem);
                        _fileName = unescape($curElem.find("a:first").attr("rel")); //filename will be available if initiated using context menu, and will be shown as initial image in quick preview
                        basket = $curElem.hasClass("contextMenuItem");
                    }
                    else
                    {
                        if (currentView() == "Thumbnail") {
                            checkedFiles = $("#filesContainerDiv").find("li.fileBoxSelected:visible");
                        } else {
                            checkedFiles = $("#filesListing").find("input.chkBox:visible:checked").closest('tr');
                        }
                    }
                    var files = new Array();
                    var allItems = basket ? $(document).data(o.BasketDataKey) : l;
                    if(!allItems) allItems = [];
                    if(checkedFiles.length>0)
                    {
                        allItems = [];
                        checkedFiles.each(function(index, el) {
                            var elem = $(this);
                            var dataRow = elem.data("dataRow");
                            if(dataRow && dataRow.name)
                            {
                                allItems.push({
                                    name : dataRow.name,
                                    href_path : unescape(elem.find("a:first").attr("rel")),
                                    privs : dataRow.privs,
                                    preview : dataRow.preview
                                });
                            }
                        });
                    }
                    if(allItems.length==0)return false;
                    //Loop through items in current directory and build html for items which have preview
                    for (var item = 0; item < allItems.length; item++) {
                        var curItem = allItems[item];
                        if (curItem.name) {
                            var inValidImg = (curItem.privs.search(/slideshow/i) == -1 || (curItem.preview == 0 && !window.useOriginalImageAsFallbackForQuickview));
                            if(curItem.preview != 0 && custom && window.useOriginalImageAsFallbackForQuickview)
                                inValidImg = false;
                            var useRealImage = curItem.preview == 0 && window.useOriginalImageAsFallbackForQuickview;
                            var isMediaItem = false;
                            var _name = curItem['name'];
                            var ext = getFileExtension(_name);
                            var isPlayableFile = false;
                            if(window.mediaFileExtensions.has(ext))
                            {
                                inValidImg = false;
                                isMediaItem = true;
                                isPlayableFile = true;
                            }
                            if (!inValidImg) {
                                var row = new Object();
                                row['enabled'] = true;
                                if(basket)
                                {
                                    if(isMediaItem)
                                    {
                                        if (o.availableFileExtensionImages.has(ext)) {
                                           row['imageSrc'] = o.FileExtensionImageFilePath + ext + "_512.png";
                                        } else {
                                            row['imageSrc'] = o.FileExtensionImageFilePath + "file_512.png";
                                        }
                                    }
                                    else{
                                        if(useRealImage){
                                            row['imageSrc'] = o.ajaxCallURL + "?command=download&mimeType=image%2F"+ext+"&path="+crushFTPTools.encodeURILocal(curItem.href_path)+"&c2f="+crushFTPTools.getCrushAuth()+"";
                                        }
                                        else{
                                            row['imageSrc'] = o.ajaxCallURL + '?command=getPreview&size=3&path=' + curItem['file'] + '&random='+Math.random()+'&frame=1'+"&c2f="+crushFTPTools.getCrushAuth();
                                        }
                                    }
                                    row["fileName"] = curItem['file'];
                                    row["name"] = curItem['name'];
                                }
                                else
                                {
                                    if(isMediaItem)
                                    {
                                        if (o.availableFileExtensionImages.has(ext)) {
                                           row['imageSrc'] = o.FileExtensionImageFilePath + ext + "_512.png";
                                        } else {
                                            row['imageSrc'] = o.FileExtensionImageFilePath + "file_512.png";
                                        }
                                    }
                                    else{
                                        if(useRealImage){
                                            row['imageSrc'] = o.ajaxCallURL + "?command=download&mimeType=image%2F"+ext+"&path="+crushFTPTools.encodeURILocal(curItem.href_path)+"&c2f="+crushFTPTools.getCrushAuth()+"";
                                        }
                                        else{
                                            row['imageSrc'] = o.ajaxCallURL + '?command=getPreview&size=3&path=' + curItem['href_path'] + '&random='+Math.random()+'&frame=1'+"&c2f="+crushFTPTools.getCrushAuth();
                                        }
                                    }
                                    row["fileName"] = curItem['href_path'];
                                    row["name"] = curItem['name'];
                                }
                                row["isMediaItem"] = isMediaItem;
                                files.push(row);
                                if((!isPlayableFile && curItem.preview && curItem.preview>1) || ext == "h264" || ext == window.useExtensionForAltMoviewPreview)
                                {
                                    row.name = row.name;
                                    for (var i = 1; i < curItem.preview; i++) {
                                        var newRow = $.extend({}, row, true);
                                        var curInd = i+1;
                                        newRow.imageSrc = newRow.imageSrc.replace("frame=1", "frame="+curInd);
                                        newRow.name = newRow.name + " ("+curInd+"/"+curItem.preview+")";
                                        files.push(newRow);
                                    }
                                }
                            }
                        }
                    }
                    if(files.length==0){
                        $.growlUI(getLocalizationKey("QuickViewNothingToShowGrowlText"), getLocalizationKey("QuickViewNoItemsAvailableGrowlText"), o.GrowlTimeout, "");
                        return false;
                    }
                    var curFileIndex;
                    if(files.length>1){
                        if(!Array.prototype.move)
                        {
                            Array.prototype.move = function(from,to){
                              this.splice(to,0,this.splice(from,1)[0]);
                              return this;
                            };
                        }
                        files = files.move(files.length-1, 0);
                    }
                    for (var item = 0; item < files.length; item++) {
                        var curItem = files[item];
                        var _generatedHTML = _itemHTML
                        _generatedHTML = _generatedHTML.replace(/HREF/g, (curItem.imageSrc));
                        _generatedHTML = _generatedHTML.replace(/TITLE/g, crushFTPTools.xssEncode(curItem.name));
                        _generatedHTML = _generatedHTML.replace(/FILENAME/g, escape(curItem.fileName));
                        _generatedHTML = _generatedHTML.replace(/STARTPLAY/g, curItem.isMediaItem);
                        _html.push(_generatedHTML);
                        if(_fileName == unescape(curItem.fileName) && !curFileIndex){
                            curFileIndex = item;
                        }
                    }
                    $("#quickViewItems").remove();
                    var quickViewItems = $("<div id='quickViewItems'></div>");
                    quickViewItems.empty().append(_html.join(""));
                    if (typeof curFileIndex != "undefined") {
                        var curPic = $("a", quickViewItems).eq(curFileIndex).parent();
                        quickViewItems.prepend(curPic.nextAll());
                        quickViewItems.prepend(curPic);
                    }
                    else if(_fileName)
                    {
                        growl("Preview not available", "Preview for selected item is not availeble", true, 3500);
                        return false;
                    }
                    if (_html.length > 0) {
                        $("body").append(quickViewItems);
                        quickViewItems.hide();
                        var cboxContent = $("#cboxContent");
                        var cboxLoadedContent = $("#cboxLoadedContent");
                        //Intiate colorbox
                        $("a[rel='QUICKVIEW']", quickViewItems).colorbox({
                            maxWidth: window.quickviewMaxWidth || '98%',
                            maxHeight: window.quickviewMaxHeight || '98%',
                            onClosed: function () {
                                $("#quickViewItems").remove();
                                $("#exifPanel").remove();
                                if(window.onImagePreviewExit)
                                    window.onImagePreviewExit();
                                try{
                                    if(window.afterPreviewComplete){
                                        window.afterPreviewComplete();
                                        delete window.afterPreviewComplete;
                                    }
                                }catch(ex){}
                            },
                            onLoad : function() {
                                if(typeof window.TooltipExifInfoKeys != "undefined")
                                {
                                    if($("#exifPanel").show().length==0)
                                    {
                                        $("body").append("<div id='exifPanel' class='exifInfoPanel'><div class='exifContent'><span class='exifClose'>x</span><div style='text-align:center;margin-bottom:10px;cursor:move;' class='moveHandle'><strong>: EXIF information :</strong></div><div class='exifInformationList'><table style='width:99%;border:0px;' cellpadding='0' cellspacing='0'></table></div></div><div class='showExifLink'>Show EXIF</div></div>");
                                        $("#exifPanel").draggable();
                                    }
                                    $("#exifPanel").find("table").html("<tr><td>N/A</td></tr>");
                                }
                            },
                            onError : function(img, settings){
                                setTimeout(function () {
                                    var ext = getFileExtension(settings.title);
                                    if (o.availableFileExtensionImages.has(ext)) {
                                       img[0].src = o.FileExtensionImageFilePath + ext + "_512.png";
                                    } else {
                                        img[0].src = o.FileExtensionImageFilePath + "file_512.png";
                                    }
                                    img.unbind("error");
                                    img.attr("noPreview", true);
                                }, 1);
                            },
                            onComplete : function(){
                                try{
                                    if(window.afterPreviewComplete){
                                        window.afterPreviewComplete();
                                        delete window.afterPreviewComplete;
                                    }
                                }catch(ex){}
                                var elem = $(this);
                                window.colorboxKeyDisabled = false;
                                var contextElem = $(this);
                                if(typeof window.TooltipExifInfoKeys != "undefined")
                                {
                                    getExifInfo(contextElem, function(exif){
                                        if(exif)
                                        {
                                            showExifInfo(exif, cboxContent, contextElem.attr("filename"));
                                            if(window.onImagePreviewExifFetch)
                                            {
                                                window.onImagePreviewExifFetch(exif);
                                            }
                                        }
                                        else
                                            $("#exifPanel").find("table").html("<tr><td>N/A</td></tr>");
                                    });
                                }
                                var icons = $("<div class='footer-icons'></div>");
                                if(($.browser.msie && $.browser.version <= 8) || window.hideRotateIconsInPreview)
                                {
                                    icons.find(".rotateImgCounterClockwise, .rotateImgClockwise").remove();
                                }
                                else
                                {
                                    icons.append("<span class='rotateImgCounterClockwise' title='"+getLocalizationKey("QuickViewRotateCounterClockwiseTooltipText")+"'></span><span class='rotateImgClockwise' title='"+getLocalizationKey("QuickViewRotateClockwiseTooltipText") +"'></span>");
                                    $(".rotateImgClockwise, .rotateImgCounterClockwise", icons).unbind().click(function(){
                                        rotateImage($("#cboxPhoto"), $(this).is(".rotateImgCounterClockwise"));
                                        $(this).blur();
                                        return false;
                                    });
                                }
                                var _fileName = unescape(contextElem.attr("filename"));
                                if(window.showAddToBasketButtonInQuickPreview)
                                {
                                    icons.prepend("<span class='addToBasket' title='Add to basket'></span>");
                                    $(".addToBasket", icons).unbind().click(function(){
                                        $(this).blur();
                                        var refElem = $("[rel='"+escape(_fileName)+"']:visible", "#filesListing");
                                        if (currentView() != "Thumbnail") {
                                            addToBasket(refElem.closest("td"), true);
                                        }
                                        else{
                                            addToBasket(refElem.closest(".fileThumb"), true);
                                        }
                                        return false;
                                    });
                                }
                                if(window.showDownloadButtonInQuickPreview)
                                {
                                    icons.prepend("<span class='quickview-download' title='"+getLocalizationKey("ShareWindowDownloadLabelText")+"'></span>");
                                    $(".quickview-download", icons).unbind().click(function(){
                                        $(this).blur();
                                        downloadItems(false, false, _fileName);
                                        return false;
                                    });
                                }
                                cboxContent.find("#cboxClose").before(icons);
                                var ext = getFileExtension(_fileName);
                                if(ext.length>0)
                                {
                                    if(window.mediaFileExtensions.has(ext))
                                    {
                                        var contentPnl = $("#cboxLoadedContent");
                                        var playBtn = $("<div class='playBtn'></div>");
                                        contentPnl.append(playBtn);
                                        playBtn.click(function(event) {
                                            $(this).remove();
                                            cboxContent.find(".rotateImgCounterClockwise, .rotateImgClockwise").hide();
                                            function showPreview()
                                            {
                                                var content = $("<div style='width:720px;height:650px;text-align:center;'></div>");
                                                contentPnl.empty().append(content);
                                                $.colorbox.resize({width:740, height:670});
                                                content.append(getLocalizationKey("loadingIndicatorText"));
                                                var autoplay = window.autoStartMediaPlaybackInPreview ? true : 0;
                                                setTimeout(function(){
                                                    var mimeType = mimeTypes[ext] || mimeTypes["*"];
                                                    var path = o.downloadURL + "?command=download&random="+Math.random()+"&mimeType="+crushFTPTools.encodeURILocal(mimeType) + "&path="+crushFTPTools.encodeURILocal(_fileName).replace(/\&/g, "%26")+"&c2f="+crushFTPTools.getCrushAuth();
                                                    /*var _file  = navigator.userAgent.toLowerCase().indexOf('firefox') > -1 || navigator.appName.indexOf("Explorer") > -1 || navigator.userAgent.toLowerCase().indexOf("trident") > -1  ? path : _fileName;*/
                                                    var _file = path;
                                                    if(ext == "flv")
                                                    {
                                                        setTimeout(function(){
                                                            content.height(550);
                                                            $.colorbox.resize({width:740, height:600});
                                                        }, 100);
                                                        content.empty().append("<a href=\""+path+"\" class=\"media {flashvars: { flv: '"+crushFTPTools.encodeURILocal(path)+"'}, width:700, height:500}\">Preview : \""+ crushFTPTools.textEncode(unescape(_fileName)).replace(/\&/g, "%26") +"\"</a> ");
                                                        content.find("a.media").media({
                                                            params :{
                                                                movie : o.FilePath + 'js/player_flv_maxi.swf',
                                                                autoplay : autoplay,
                                                                autoload : '1',
                                                                showstop : '1',
                                                                showvolume : '1',
                                                                showtime : '2',
                                                                showplayer : 'always',
                                                                showloading : 'always',
                                                                showfullscreen : '1',
                                                                bgColor : "#000"
                                                            }
                                                        });
                                                    }
                                                    else if(ext == "mp3" || ext == "wav")
                                                    {
                                                        setTimeout(function(){
                                                            content.height(140);
                                                            $.colorbox.resize({width:740, height:300});
                                                        }, 100);
                                                        var isBrowserCapable = false;
                                                        if(ext == "mp3")
                                                           isBrowserCapable = !window.dontuseHTML5Player && !!document.createElement('audio').canPlayType && !!document.createElement('audio').canPlayType("audio/mp3");
                                                        else if(ext == "wav")
                                                            isBrowserCapable = !window.dontuseHTML5Player && !!document.createElement('audio').canPlayType && !!document.createElement('audio').canPlayType("audio/wav");
                                                        if(isBrowserCapable)
                                                        {
                                                            var audioElem = $('<div style="text-align:left;width:700px;margin-left:-10px;overflow:hidden;"></div>');
                                                            content.empty().append('<div class="audio-controls"><a href="javascript:void(0);" class="pause">'+getLocalizationKey("AudioPlayerPauseText")+'</a><a href="javascript:void(0);" class="stop">'+getLocalizationKey("AudioPlayerStopText")+'</a><a href="javascript:void(0);" class="unmute">'+getLocalizationKey("AudioPlayerMuteText")+'</a></div><div><h3 style="font-size:13px;font-weight:normal;margin:5px;padding:0px;">'+crushFTPTools.textEncode(unescape(_fileName))+'</h3></div><div style="margin-top:10px;font-size:11px;">Problem with playback? <a class="defaultPlayer" href="javascript:void(0)">Try flash player</a></div>').prepend(audioElem);
                                                            var wavesurfer = Object.create(WaveSurfer);
                                                            wavesurfer.init({
                                                                container: audioElem[0],
                                                                waveColor: '#F5B451',
                                                                progressColor: '#AC7E39'
                                                            });
                                                            wavesurfer.on('ready', function () {
                                                                wavesurfer.play();
                                                                if(window.disableRightClickOnHTML5Player)
                                                                {
                                                                    $("audio").bind("contextmenu",function(){
                                                                        return false;
                                                                    });
                                                                }
                                                            });
                                                            wavesurfer.load(_file);

                                                            window.afterPreviewComplete = function(){
                                                                wavesurfer.destroy();
                                                            };

                                                            var playbtn = content.find(".pause").click(function(){
                                                                if($(this).hasClass('pause'))
                                                                {
                                                                    $(this).removeClass('pause').addClass('resume');
                                                                    wavesurfer.pause();
                                                                    $(this).text(getLocalizationKey("AudioPlayerPlayText"));
                                                                }
                                                                else
                                                                {
                                                                    $(this).removeClass('resume').addClass('pause');
                                                                    wavesurfer.play();
                                                                    $(this).text(getLocalizationKey("AudioPlayerPauseText"));
                                                                }
                                                            });

                                                            content.find(".unmute").click(function(){
                                                                if($(this).hasClass('unmute'))
                                                                {
                                                                    $(this).removeClass('unmute').addClass('mute');
                                                                    $(this).text(getLocalizationKey("AudioPlayerUnmuteText"));
                                                                }
                                                                else
                                                                {
                                                                    $(this).removeClass('mute').addClass('unmute');
                                                                    $(this).text(getLocalizationKey("AudioPlayerMuteText"));
                                                                }
                                                                wavesurfer.toggleMute();
                                                            });

                                                            var stopbtn = content.find(".stop").click(function(){
                                                                wavesurfer.stop();
                                                                playbtn.removeClass('pause').addClass('resume');
                                                                playbtn.text(getLocalizationKey("AudioPlayerPlayText"));
                                                            });
                                                            wavesurfer.on('finish', function () {
                                                                stopbtn.click();
                                                            });
                                                            content.find("a.defaultPlayer").click(function(){
                                                                wavesurfer.destroy();
                                                                setTimeout(function(){
                                                                    content.height(200);
                                                                    $.colorbox.resize({width:740, height:200});
                                                                }, 100);
                                                                var _path = o.downloadURL + "?command=download&random="+Math.random()+"&mimeType="+crushFTPTools.encodeURILocal(mimeType) + "&path="+crushFTPTools.encodeURILocal(_fileName).replace(/\&/g, "%26")+"&c2f="+crushFTPTools.getCrushAuth();
                                                                content.empty().append("<a href=\""+crushFTPTools.encodeURILocal(_path)+"\" class=\"media {flashvars: { mp3: '"+crushFTPTools.encodeURILocal(_path)+"'}, width:700, height:60}\">Preview : \""+ crushFTPTools.textEncode(unescape(_fileName)).replace(/\&/g, "&amp;") +"\"</a> <div style='margin-top:10px;font-size:11px;'><a href='javascript:void(0)' class='html5player'>Switch to HTML5 Player</a></div>");
                                                                content.find("a.media").media({
                                                                    params :{
                                                                        movie : o.FilePath + "js/player_mp3_maxi.swf",
                                                                        autoplay : autoplay,
                                                                        showstop : 1,
                                                                        showinfo : 1,
                                                                        showvolume : 1,
                                                                        bgColor : "#000"
                                                                    }
                                                                });
                                                                content.find("a.html5player").click(function(event) {
                                                                    showPreview();
                                                                });
                                                            });
                                                        }
                                                        else
                                                        {
                                                            content.empty().append("<a href=\""+crushFTPTools.encodeURILocal(path)+"\" class=\"media {flashvars: { mp3: '"+crushFTPTools.encodeURILocal(path)+"'}, width:700, height:60}\">Preview : \""+ crushFTPTools.textEncode(unescape(_fileName)).replace(/\&/g, "&amp;") +"\"</a> ");
                                                            content.find("a.media").media({
                                                                params :{
                                                                    movie : o.FilePath + "js/player_mp3_maxi.swf",
                                                                    autoplay : autoplay,
                                                                    showstop : 1,
                                                                    showinfo : 1,
                                                                    showvolume : 1,
                                                                    bgColor : "#000"
                                                                }
                                                            });
                                                        }
                                                    }
                                                    else if(ext == "swf")
                                                    {
                                                        content.height(550);
                                                        $.colorbox.resize({width:740, height:550});
                                                        content.empty().append("<a href=\""+path+"\" class=\"media {width:700, height:500, type:'swf'}\">Preview : \""+ crushFTPTools.textEncode(unescape(_fileName)) +"\"</a> ");
                                                        content.find("a.media").media();
                                                    }
                                                    else
                                                    {
                                                        if(ext == "mkv" || ext == "h264"){
                                                            ext = "mp4";
                                                        }
                                                        var isAltFilePlaying = false;
                                                        if(window.useExtensionForAltMoviewPreview && ext != window.useExtensionForAltMoviewPreview && isAltPreviewPresentForMovie(_fileName)){
                                                            var name = _fileName;
                                                            mimeType = "video/mp4";
                                                            isAltFilePlaying = true;
                                                            name = name.substr(0,name.lastIndexOf(".")) + "." + window.useExtensionForAltMoviewPreview;
                                                            _file = o.downloadURL + "?command=download&random="+Math.random()+"&mimeType="+crushFTPTools.encodeURILocal(mimeType) + "&path="+crushFTPTools.encodeURILocal(name).replace(/\&/g, "%26")+"&c2f="+crushFTPTools.getCrushAuth();
                                                            path = _file;
                                                            ext = "mp4";
                                                        }
                                                        if(!window.dontuseHTML5Player && (!!document.createElement('video').canPlayType && (!!document.createElement('video').canPlayType("video/"+ext+"")) || ext == "mkv" || ext == "mts" || ext == "m4v" || ext == "h264" || ext == window.useExtensionForAltMoviewPreview) && (ext == "mp4" || ext == window.useExtensionForAltMoviewPreview || ext == "webm" || ext == "ogg" || ext == "m4v" || ext == "mov" || ext == "mts") || (!window.dontuseHTML5Player && ext == "mov"))
                                                        {
                                                            var id = generateRandomPassword(4);
                                                            var videoElem = '<video id="preview_video_'+id+'" class="video-js vjs-default-skin vjs-big-play-centered" controls preload="auto" width="700" height="500" data-setup=\'{"example_option":true}\'>';
                                                                videoElem += '<source src="'+_file+'" type="video/mp4" />';
                                                                if(!isAltFilePlaying)
                                                                {
                                                                    videoElem += '<source src="'+_file+'" type="video/webm" />';
                                                                    videoElem += '<source src="'+_file+'" type="video/ogg" />';
                                                                }
                                                                videoElem += '<p class="vjs-no-js">To view this video please enable JavaScript, and consider upgrading to a web browser that <a href="http://videojs.com/html5-video-support/" target="_blank">supports HTML5 video</a></p>';
                                                                videoElem += '</video>';
                                                            content.empty().append('<div>'+videoElem+'<h3 style="font-size:13px;font-weight:normal;margin:5px;padding:0px;">'+crushFTPTools.textEncode(unescape(_fileName))+'</h3></div><div style="margin-top:10px;font-size:11px;">Problem with playback? <a class="defaultPlayer" href="javascript:void(0)">Try browser player</a></div>');

                                                            var previewPlayer;
                                                            videojs(content.find("video:first").attr("id"), {autoplay:window.autoStartMediaPlaybackInPreview},
                                                            function(){
                                                              previewPlayer = this;
                                                              previewPlayer.on("error",function(){
                                                                if(!isAltFilePlaying)
                                                                {
                                                                    var err = previewPlayer.error();
                                                                    if(err && err.code && err.code == 4)
                                                                    {
                                                                        content.find("a.defaultPlayer").click();
                                                                    }
                                                                }
                                                              });
                                                            });
                                                            if(window.disableRightClickOnHTML5Player)
                                                            {
                                                                $("video").bind("contextmenu",function(){
                                                                    return false;
                                                                });
                                                            }
                                                            content.find("a.defaultPlayer").click(function(){
                                                                setTimeout(function(){
                                                                    content.height(600);
                                                                    $.colorbox.resize({width:740, height:650});
                                                                }, 100);
                                                                content.empty().append("<a href=\""+crushFTPTools.textEncode(unescape(path))+"\" class=\"media {width:700, height:500}\">Preview : \""+ crushFTPTools.textEncode(crushFTPTools.textEncode(unescape(_fileName))) +"\"</a> <div style='margin-top:10px;font-size:11px;'><a href='javascript:void(0)' class='html5player'>Switch to HTML5 Player</a></div>");
                                                                content.find("a.media").media({
                                                                    params :{
                                                                        autoplay : autoplay,
                                                                        showcontrols : '1',
                                                                        showpositioncontrols : '1',
                                                                        showaudiocontrols : '2',
                                                                        showstatusbar : '1',
                                                                        showfullscreen : '1',
                                                                        autosize : '1',
                                                                        uiMode : 'full',
                                                                        scale : 'aspect',
                                                                        kioskmode : 'true',
                                                                        bgColor : "#000"
                                                                    }
                                                                });
                                                                content.find("a.html5player").click(function(event) {
                                                                    showPreview();
                                                                });
                                                            });
                                                        }
                                                        else
                                                        {
                                                            if(ext == "ogg")
                                                            {
                                                                $.unblockUI();
                                                                growl("Preview not supported", "Your browser does not support previewing this file", true, 3500);
                                                            }
                                                            else
                                                            {
                                                                setTimeout(function(){
                                                                    content.height(600);
                                                                    $.colorbox.resize({width:740, height:650});
                                                                }, 100);
                                                                content.empty().append("<a href=\""+crushFTPTools.textEncode(unescape(path))+"\" class=\"media {width:700, height:500}\">Preview : \""+ crushFTPTools.textEncode(crushFTPTools.textEncode(unescape(_fileName))) +"\"</a> ");
                                                                content.find("a.media").media({
                                                                    params :{
                                                                        autoplay : autoplay,
                                                                        showcontrols : '1',
                                                                        showpositioncontrols : '1',
                                                                        showaudiocontrols : '2',
                                                                        showstatusbar : '1',
                                                                        showfullscreen : '1',
                                                                        autosize : '1',
                                                                        uiMode : 'full',
                                                                        scale : 'aspect',
                                                                        kioskmode : 'true',
                                                                        bgColor : "#000"
                                                                    }
                                                                });
                                                            }
                                                        }
                                                    }
                                                }, 1000);
                                            }
                                            showPreview();
                                        });
                                        //if(contentPnl.find("#cboxPhoto").attr("noPreview") || elem.attr('startPlay') == "true")
                                        {
                                            playBtn.trigger('click');
                                        }
                                    }
                                }
                            },
                            scrolling : false,
                            photo: true,
                            open: true,
                            minHeight : 150,
                            minWidth : 700,
                            current: getLocalizationKey("QuickViewCurrentImagePositionText")
                        });
                    } else {
                        $.growlUI(getLocalizationKey("QuickViewNothingToShowGrowlText"), getLocalizationKey("QuickViewNoItemsAvailableGrowlText"), o.GrowlTimeout, "");
                    }
                }

                function showExifInfo(exif, parentElem, path)
                {
                    if(!parentElem || !exif)
                        return;
                    var items = window.TooltipExifInfoKeys.split(",");
                    if(window.TooltipExifInfoKeys == "*")
                    {
                        items = [];
                        for(var info in exif)
                        {
                            items.push(info);
                        }
                        items = items.sort();
                    }
                    var editableItems =  typeof window.EditeableExifInfoKeys != "undefined" ? window.EditeableExifInfoKeys.split(",") : [];
                    if(window.EditeableExifInfoKeys == "*")
                    {
                        editableItems = items;
                    }
                    var exifPanel = $("#exifPanel");
                    if(items && items.length>0)
                    {
                        var exifInfo = "";
                        for(var i=0;i<items.length;i++)
                        {
                            var info = typeof exif[$.trim(items[i])] != "undefined" ? exif[$.trim(items[i])] : "N/A";
                            var editLink = "<span class='editExif'></span>";
                            if(!editableItems.has(items[i]))
                            {
                                editLink = "&nbsp;";
                            }
                            exifInfo += "<tr class='exifInfoRow' path='"+path+"' key='"+items[i]+"'' val='"+info+"'><td class='key'><span class='wordwrap'>"+items[i]+" :</span> </td><td class='val wordwrap'>"+info+"</td><td class='edit'>"+editLink+"</td></tr>";
                        }
                        var tbl = exifPanel.find("table").html(exifInfo);

                        tbl.find('tr').hover(function() {
                            $(this).addClass('hover');
                        }, function() {
                            $(this).removeClass('hover');
                        });

                        exifPanel.find(".exifClose").click(function(evt){
                            exifPanel.addClass("exifInfoPanelCollapsed");
                            evt.stopPropagation();
                            return false;
                        });
                        exifPanel.click(function(evt){
                            if(exifPanel.hasClass("exifInfoPanelCollapsed"))
                                exifPanel.removeClass("exifInfoPanelCollapsed")
                            evt.stopPropagation();
                            return false;
                        });

                        exifPanel.find(".editExif").click(function(){
                            var parentElem = $(this).closest("tr");
                            var key = parentElem.attr("key");
                            var val = parentElem.attr("val");
                            $("#exifEditPanel").remove();
                            if ($("#exifEditPanel").length == 0) {
                                $("body").append("<div id='exifEditPanel'></div>");
                                $("#exifEditPanel").append("<div class='exifEditPanel'>"+key+" :<br> <textarea style='margin:10px 0px;' cols='70' rows='8' class='valueField'>"+val+"</textarea></div>");
                            }
                            var $exifBox = $('#exifEditPanel');
                            $exifBox.dialog({
                                title : "Update EXIF information : ",
                                autoOpen: false,
                                closeOnEscape: true,
                                draggable: false,
                                width: 400,
                                modal: true,
                                buttons: { "Save": function() {
                                    var _value = $exifBox.find("textarea.valueField").val();
                                    $exifBox.append("<span class='waitP'>"+getLocalizationKey("loadingIndicatorText")+"</span>");
                                    $exifBox.find("span.error").remove();
                                    setExifInfo(parentElem.attr("path"), key, _value, function(msg){
                                        $exifBox.find("span.waitP").remove();
                                        if(msg && msg.response.toLowerCase() == "success")
                                        {
                                            $exifBox.dialog("close");
                                            parentElem.attr("val", _value);
                                            parentElem.find("td.val").text(_value);
                                        }
                                        else
                                            $exifBox.append("<span class='error'>Not saved, please try again.</span>");
                                    })
                                }, "Cancel": function() { $(this).dialog("close"); }},
                                resizable: false,
                                position: [false, 250],
                                zIndex : 10000,
                                open: function() {
                                    $('body').css('overflow','hidden');
                                    window.colorboxKeyDisabled = true;
                                },
                                close: function() {
                                    $('body').css('overflow','auto');
                                    window.colorboxKeyDisabled = false;
                                }
                            });
                            $exifBox.dialog("open");
                            $exifBox.find(".valueField").focus();
                        });
                    }
                    else
                    {
                        exifPanel.find("table").html("<tr><td>N/A</td></tr>");
                    }
                }

                function getExifInfo(elem, callback, path)
                {
                    if(!path)
                    {
                        path = elem.attr("filename");
                        if(typeof window.exifInfoItems == "undefined")
                            window.exifInfoItems = {};
                        if(window.exifInfoItems[path])
                        {
                            callback(window.exifInfoItems[path]);
                            return;
                        }
                    }
                    var obj = {
                        command : "getPreview",
                        object_type : "exif",
                        path : crushFTPTools.encodeURILocal(unescape(path))
                    };
                    obj.c2f = crushFTPTools.getCrushAuth();
                    $.ajax({
                        type: "POST",
                        url: o.ajaxCallURL,
                        data: obj,
                        error: function (XMLHttpRequest, textStatus, errorThrown) {
                            errorThrown = errorThrown || "Error while getting EXIF info";
                            callback(false);
                        },
                        success: function (data) {
                            var exif = $.xml2json(data);
                            window.exifInfoItems = window.exifInfoItems || {};
                            window.exifInfoItems[path] = exif;
                            callback(exif);
                        }
                    });
                }

                function setExifInfo(path, key, val, callback, params)
                {
                    var obj = {
                        command : "setPreview",
                        object_type : "exif",
                        exif_key : key,
                        exif_val : val,
                        path : crushFTPTools.encodeURILocal(unescape(path))
                    };
                    obj = $.extend(obj, params);
                    obj.c2f = crushFTPTools.getCrushAuth();
                    $.ajax({
                        type: "POST",
                        url: o.ajaxCallURL,
                        data: obj,
                        async: false,
                        error: function (XMLHttpRequest, textStatus, errorThrown) {
                            errorThrown = errorThrown || "Error while getting EXIF info";
                            callback(false);
                        },
                        success: function (data) {
                            var s = getActionResponseText(data);
                            var exif = $.xml2json(data);
                            if(window.exifInfoItems)
                                window.exifInfoItems[path] = false;
                            if (s.toUpperCase().indexOf("FAILURE") >= 0)
                            {
                                $.growlUI(""+s, "&nbsp;", o.GrowlTimeout, "growlError");
                                callback(false);
                            }
                            else
                                callback(exif);
                        }
                    });
                }

                var metaInfoDialog = $('#metaInfoDialog');
                var metaInfoDialogTemplate = metaInfoDialog.html();
                metaInfoDialog.dialog({
                    autoOpen: false,
                    draggable: true,
                    width: 700,
                    minHeight : 0,
                    title : "",
                    closeOnEscape : false,
                    modal: true,
                    buttons: [
                        {
                            text : "Save",
                            click : function(event){
                                var itemsToUpdate = metaInfoDialog.data("itemsToUpdate");
                                event.stopPropagation();
                                event.preventDefault();
                                var formClone = metaInfoDialog.find("form");
                                if (!validateForm("", formClone)) {
                                    return;
                                }
                                var formData = serializeForm(formClone[0]);
                                var result = formData.split("&").reduce(function(a,b) {
                                     var pair = b.split("=");
                                     a[pair[0].replace("meta_","")] = pair[1] || '';
                                     return a;
                                },{});
                                metaInfoDialog.find(".key-val-field:visible").each(function(){
                                    var key = $(this).find("input.key").val();
                                    var val = $(this).find("textarea.value").val();
                                    if(key){
                                        result[key] = val;
                                    }
                                });
                                var items = [];
                                var form_id = "";
                                for(var key in result)
                                {
                                    var val = result[key];
                                    if(key == "form_name")
                                        form_id = val;
                                    items.push({key : key, value : val});
                                }
                                var curCount = 0;
                                var hasError = false;
                                function saveExif(){
                                    loading.show(true);
                                    if(curCount<items.length)
                                    {
                                        if(items[curCount].key != "form_name")
                                        {
                                            setExifInfo(itemsToUpdate, items[curCount].key, items[curCount].value, function(pass){
                                                if(!pass)
                                                    hasError = true;
                                                curCount++;
                                                saveExif();
                                            }, {
                                                form_id : form_id
                                            });
                                        }
                                        else
                                        {
                                            curCount++;
                                            saveExif();
                                        }
                                    }
                                    else
                                    {
                                        if(!hasError){
                                            metaInfoDialog.dialog("close");
                                            $(".refreshButton").click();
                                        }
                                        loading.hide(true);
                                    }
                                }
                                saveExif();
                            }
                        }
                    ],
                    resizable: true,
                    open: function() {
                        metaInfoDialog.css("max-height", "350").css("overflow-x", "hidden").css("overflow-y", "auto");
                        metaInfoDialog.find("input").unbind("keydown").keydown(function (evt) {
                            var evt = (evt) ? evt : ((event) ? event : null);
                            if (evt.keyCode == 13) {
                                evt.preventDefault();
                                evt.stopPropagation();
                                metaInfoDialog.parent().find("button.ui-button").click();
                                return false;
                            }
                        });
                    },
                    close: function() {
                        metaInfoDialog.removeData("itemsToUpdate");
                    }
                });

                function keysrt(key) {
                  return function(a,b){
                   if (a[key] > b[key]) return 1;
                   if (a[key] < b[key]) return -1;
                   return 0;
                  }
                }

                window.setMetaInfo = function(params){
                    var _fileName = "";
                    var elem = false;
                    var basket = false;
                    elem = currentContext();
                    if (elem) {
                        var $curElem = $(elem);
                        _fileName = $curElem.find("a:first").attr("rel");
                        basket = $curElem.hasClass("contextMenuItem");
                    }
                    var checkedFiles = [];
                    if(basket)
                    {
                        if (currentView(basket) == "Thumbnail") {
                            checkedFiles = $("#FileBasketList").find("li.fileBoxSelected:visible");
                        } else {
                            checkedFiles = $("#FileBasketList").find("input.chkBox:visible:checked");
                        }
                    }
                    else
                    {
                        if (currentView() == "Thumbnail") {
                            checkedFiles = $("#filesContainerDiv").find("li.fileBoxSelected:visible");
                        } else {
                            checkedFiles = $("#filesListing").find("input.chkBox:visible:checked");
                        }
                    }
                    if (checkedFiles.length == 0 && !elem) {
                        $.growlUI(getLocalizationKey("NothingSelectedGrowlText"), "&nbsp;", o.GrowlTimeout, "growlError");
                        metaInfoDialog.removeData("itemsToUpdate");
                        return;
                    }
                    var stringToCopy = _fileName;
                    if (window.listingInfo.selectedEverything) {
                        var listItems = window.curTreeItems;
                        if (window.listingInfo.filtered) {
                            listItems = window.matchedItems;
                        }
                        for (var i = 0; i < listItems.length; i++) {
                            var curItem = listItems[i];
                            if (stringToCopy.length > 0) {
                                stringToCopy += ";";
                            }
                            stringToCopy += unescape(curItem.root_dir) + unescape(curItem.name) + "/";
                        }
                        var curDir = "/";
                        if (hashListener.getHash() && hashListener.getHash().toString() != "") {
                            curDir = unescape(hashListener.getHash().toString().replace("#", ""));
                        }
                    } else {
                        var notDisplayed = 0;
                        checkedFiles.each(function () {
                            var parentElem = $(this);
                            if (currentView(basket) != "Thumbnail") {
                                parentElem = $(this).closest("tr");
                            }
                            var filePath = unescape(parentElem.find("a").attr("rel"));
                            filePath = unescape(filePath.replace("//", "/"));
                            if (unescape(_fileName) != filePath) {
                                if (stringToCopy.length > 0) {
                                    stringToCopy += ";";
                                }
                                stringToCopy += (filePath);
                            }
                        });
                    }
                    var existingData = [];
                    metaInfoDialog.data("itemsToUpdate", stringToCopy);
                    params = params || {};
                    var _fpath = stringToCopy.split(";")[0];
                    loading.show(true);
                    getExifInfo(false, function(exifData){
                       loading.hide();
                        if(params.customFormToUse)
                        {
                            loading.show(true);
                            getCustomForm(params.customFormToUse, function (data, hasForm, formName) {
                               loading.hide();
                                if (hasForm) {
                                    var metaForm = $("<div></div>");
                                    metaForm.html("<form id='frmMetaInfo'>" + data + "</form>").find("table").css("text-align", "left");
                                    setCustomFormFieldAttributes(metaForm);
                                    attachCalendarPopup(metaForm);
                                    metaForm.find("button").remove();
                                    metaInfoDialog.empty().append(metaForm);
                                }
                                if(!params.noKeyValPairFields || params.noKeyValPairFields.toLowerCase() != "true")
                                {
                                    var customForm = metaInfoDialog.find(".customForm")
                                    for(var key in exifData)
                                    {
                                        if(customForm.find("[name='meta_"+key+"']").length==0)
                                        {
                                            existingData.push({
                                                key : key,
                                                value : exifData[key]
                                            });
                                        }
                                        else
                                        {
                                            customForm.find("[name='meta_"+key+"']").val(exifData[key]);
                                        }
                                    }

                                    if(params.formBeforeKeyValPair)
                                        metaInfoDialog.append(metaInfoDialogTemplate);
                                    else
                                        metaInfoDialog.prepend(metaInfoDialogTemplate);
                                    existingData.sort(keysrt('key'));
                                    metaInfoDialog.find(".key-val-field").EnableMultiField({
                                        confirmOnRemove: true,
                                        data: existingData,
                                        linkText : "",
                                        linkClass : "_addItem",
                                        removeLinkText : "",
                                        removeLinkClass : "_removeItem",
                                        addEventCallback : function(newElem, clonnedFrom){
                                            newElem.addClass("added-item").find("input:first").focus();
                                            newElem.find("input,textarea").each(function(index, el) {
                                                $(this).removeAttr('id');
                                            });
                                            newElem.find("input:visible:first").focus();
                                            newElem.find("input").unbind("keydown").keydown(function (evt) {
                                                var evt = (evt) ? evt : ((event) ? event : null);
                                                if (evt.keyCode == 13) {
                                                    evt.preventDefault();
                                                    evt.stopPropagation();
                                                    metaInfoDialog.parent().find("button.ui-button").click();
                                                    return false;
                                                }
                                            });
                                        },
                                        removeEventCallback : function(prev, self, uid){
                                        }
                                    });
                                }
                                var customForm = metaInfoDialog.find(".customForm");
                                for(var key in exifData)
                                {
                                    var input = customForm.find("[name='meta_"+key+"']");
                                    if(input.length>0){
                                        if(input.attr("type") == "checkbox" || input.attr("type") == "radio")
                                        {
                                            var keys = exifData[key].split(",");
                                            for (var i = 0; i < keys.length; i++) {
                                                var curKey = keys[i];
                                                customForm.find("[name='meta_"+key+"'][value='"+curKey+"']").attr("checked", "checked");
                                            }
                                        }
                                        else if(input.is("select")){
                                            if(input.hasClass('chosen'))
                                            {
                                                var keys = exifData[key].split(",");
                                                for (var i = 0; i < keys.length; i++) {
                                                    var curKey = keys[i];
                                                    input.find("option").filter(function() {
                                                        return this.text == curKey;
                                                    }).attr("selected", "selected");
                                                }
                                            }
                                            else
                                            {
                                                var opt = input.find("option").filter(function() {
                                                    return this.text == exifData[key];
                                                });
                                                if(opt.length>0)
                                                    opt.attr("selected", "selected");
                                                else
                                                {
                                                    input.after("<span class='metainfo_sub'>("+exifData[key]+")</span>");
                                                }
                                            }
                                        }
                                        else
                                        {
                                            input.val(exifData[key]);
                                        }
                                    }
                                }
                                metaInfoDialog.dialog("open");
                            });
                        }
                        else if(!params.noKeyValPairFields || params.noKeyValPairFields.toLowerCase() != "true")
                        {
                            for(var key in exifData)
                            {
                                existingData.push({
                                    key : key,
                                    value : exifData[key]
                                });
                            }
                            existingData.sort(keysrt('key'));
                            metaInfoDialog.empty().append(metaInfoDialogTemplate);
                            metaInfoDialog.find(".key-val-field").EnableMultiField({
                                confirmOnRemove: true,
                                data: existingData,
                                linkText : "",
                                linkClass : "_addItem",
                                removeLinkText : "",
                                removeLinkClass : "_removeItem",
                                addEventCallback : function(newElem, clonnedFrom){
                                    newElem.addClass("added-item").find("input:first").focus();
                                    newElem.find("input,textarea").each(function(index, el) {
                                        $(this).removeAttr('id');
                                    });
                                    newElem.find("input:visible:first").focus();
                                },
                                removeEventCallback : function(prev, self, uid){
                                }
                            });
                            metaInfoDialog.dialog("open");
                        }
                        metaInfoDialog.parent().find(".ui-dialog-title").html("<span style='width: 600px;overflow: hidden;display: block;text-overflow: ellipsis;white-space: nowrap;'>"+unescape(stringToCopy) + "</span>")
                        // metaInfoDialog.dialog('option','title',);
                    }, _fpath);
                }

                window.getHistory = function() {
                    var _fileName = "";
                    var elem = false;
                    var basket = false;
                    elem = currentContext();
                    if (elem) {
                        var $curElem = $(elem);
                        _fileName = $curElem.find("a:first").attr("rel");
                        basket = $curElem.hasClass("contextMenuItem");
                    }
                    var checkedFiles = [];
                    if(basket)
                    {
                        if (currentView(basket) == "Thumbnail") {
                            checkedFiles = $("#FileBasketList").find("li.fileBoxSelected:visible");
                        } else {
                            checkedFiles = $("#FileBasketList").find("input.chkBox:visible:checked");
                        }
                    }
                    else
                    {
                        if (currentView() == "Thumbnail") {
                            checkedFiles = $("#filesContainerDiv").find("li.fileBoxSelected:visible");
                        } else {
                            checkedFiles = $("#filesListing").find("input.chkBox:visible:checked");
                        }
                    }
                    if (checkedFiles.length == 0 && !elem) {
                        $.growlUI(getLocalizationKey("NothingSelectedGrowlText"), "&nbsp;", o.GrowlTimeout, "growlError");
                        metaInfoDialog.removeData("itemsToUpdate");
                        return;
                    }
                    var stringToCopy = _fileName;
                    if (window.listingInfo.selectedEverything) {
                        var listItems = window.curTreeItems;
                        if (window.listingInfo.filtered) {
                            listItems = window.matchedItems;
                        }
                        for (var i = 0; i < listItems.length; i++) {
                            var curItem = listItems[i];
                            if (stringToCopy.length > 0) {
                                stringToCopy += ";";
                            }
                            stringToCopy += unescape(curItem.root_dir) + unescape(curItem.name) + "/";
                        }
                        var curDir = "/";
                        if (hashListener.getHash() && hashListener.getHash().toString() != "") {
                            curDir = unescape(hashListener.getHash().toString().replace("#", ""));
                        }
                    } else {
                        var notDisplayed = 0;
                        if(checkedFiles.length>1)
                            checkedFiles.splice(1);
                        checkedFiles.each(function () {
                            var parentElem = $(this);
                            if (currentView(basket) != "Thumbnail") {
                                parentElem = $(this).closest("tr");
                            }
                            var filePath = unescape(parentElem.find("a").attr("rel"));
                            filePath = unescape(filePath.replace("//", "/"));
                            if (unescape(_fileName) != filePath) {
                                if (stringToCopy.length > 0) {
                                    stringToCopy += ";";
                                }
                                stringToCopy += (filePath);
                            }
                        });
                    }
                    var h = window.innerHeight ? window.innerHeight : $(window).height();
                    h = h * 0.92;
                    var lang = window.languageLoaded ? "lang=" + window.languageLoaded : "lang=en";
                    var revisionsDialog = $("#revisionsDialog").removeClass("resized").dialog({
                        autoOpen: false,
                        closeOnEscape: false,
                        dialogClass : "manageShareWindow",
                        title : localizations.RevisionsWindowHeaderText,
                        draggable: true,
                        width: "70%",
                        maxHeight: h,
                        height : 650,
                        minWidth : 800,
                        modal: true,
                        buttons: {},
                        resizable: true,
                        position: { my: "center", at: "center", of: window },
                        zIndex : 2100,
                        open : function()
                        {
                            var closeButton = revisionsDialog.parent().find(".ui-dialog-titlebar-close");
                            if(closeButton.parent().find("a.openInNewTab").length==0)
                            {
                                var _openLink = localizations.popupOpenInSeparateWindowText|| "Open in a separate window";
                                closeButton.after('<a title="'+_openLink+'" target="_blank" href="/WebInterface/jQuery/revisions/index.html?'+lang+'&path='+stringToCopy+'" role="button" style="float: right;margin-right: 30px;margin-top: -16px;font-size: 12px;font-weight: normal;display: inline-block;width: auto;" class="openInNewTab ui-corner-all"><span style="float:left;margin-top:0px" class="ui-icon ui-icon-newwin"></span>'+_openLink+'</a>');
                                var newTabLink = closeButton.parent().find("a.openInNewTab").click(function(){
                                    revisionsDialog.dialog("close");
                                });
                            }

                            var closeButton = revisionsDialog.parent().find(".ui-dialog-titlebar-close").show().unbind("hover");
                            if(closeButton.parent().find("a.fullScreen").length==0)
                            {
                                closeButton.after('<a title="Maximize" href="#" role="button" style="float: right;margin-right: 13px;margin-top: 0px;" class="fullScreen ui-corner-all"><span class="ui-icon ui-icon-arrow-4-diag">Fullscreen</span></a>');
                                var fullScreenLink = closeButton.parent().find("a.fullScreen").click(function(){
                                    var isFullS = revisionsDialog.attr("maximized");
                                    if(!isFullS)
                                    {
                                        $(this).find("span").addClass("ui-icon-arrow-1-sw").removeClass("ui-icon-arrow-4-diag");
                                        $(this).attr("title", "Resize to original size");
                                        var h = window.innerHeight ? window.innerHeight : $(window).height();
                                        var w = $(window).width() - 10;
                                        h -= 5;
                                        revisionsDialog.parent().css("position", "fixed").css("zIndex", "2100")
                                        $("body").css("overflow", "hidden");
                                        revisionsDialog.dialog("widget").animate({
                                            width: w+'px',
                                            height:h+'px'
                                          }, {
                                          duration: 100,
                                          step: function() {
                                            revisionsDialog.dialog('option', 'position', { my: "center", at: "center", of: window });
                                          }
                                        });
                                        revisionsDialog.dialog('option', 'resizable', false);
                                        revisionsDialog.dialog('option', 'draggable', false);
                                        revisionsDialog.height(h + "px");
                                        h -= 30;
                                        revisionsDialog.find("iframe").height(h + "px");
                                        revisionsDialog.find("iframe").width(w + "px");
                                        revisionsDialog.attr("maximized", "true");
                                    }
                                    else
                                    {
                                        $(this).attr("title", "Maximize");
                                        $(this).find("span").addClass("ui-icon-arrow-4-diag").removeClass("ui-icon-arrow-1-sw");
                                        revisionsDialog.parent().css("position", "absolute");
                                        revisionsDialog.dialog("widget").animate({
                                            width: '80%',
                                            height:'650px'
                                          }, {
                                          duration: 100,
                                          step: function() {
                                            revisionsDialog.dialog('option', 'position', { my: "center", at: "center", of: window });
                                          }
                                        });
                                        revisionsDialog.dialog('option', 'resizable', true);
                                        revisionsDialog.dialog('option', 'draggable', true);
                                        revisionsDialog.find("iframe").height("600px").width("100%");
                                        revisionsDialog.removeAttr("maximized");
                                    }
                                    return false;
                                });
                            }
                            else
                            {
                                if(revisionsDialog.attr("maximized"))
                                {
                                    revisionsDialog.removeAttr("maximized");
                                }
                                else
                                {
                                    revisionsDialog.attr("maximized", "true");
                                }
                                closeButton.parent().find("a.fullScreen").trigger("click");
                            }
                        },
                        create: function(event, ui) {
                            $(event.target).parent().css('position', 'fixed');
                        },
                        close : function(){
                            $(this).dialog('destroy');
                            $("body").css("overflow", "auto");
                        },
                        resizeStop: function(event, ui) {
                            revisionsDialog.width("100%");
                            if(ui.size.height > 650)
                                revisionsDialog.find("iframe").height(ui.size.height - 50);
                            else
                                revisionsDialog.find("iframe").height(600);
                        }
                    });
                    revisionsDialog.empty().append('<iframe frameborder="0" scrolling="auto" style="width: 100%;background-color: #fff;margin:0px;padding:0px;height:600px;" name="cftp_iframeRevisionsPanel" id="cftp_iframeRevisionsPanel" src="/WebInterface/jQuery/revisions/index.html?popup=true&'+lang+'&path='+stringToCopy+'" hspace="0" allowtransparency="false"></iframe>');
                    revisionsDialog.dialog("open");
                    /*
                    var loadingIndicator = $("#loadingIndicator");
                    loading.show(true);
                    getHistoryData(stringToCopy, function(historyData){
                        loading.init();
                        loadingIndicator.dialog("option", "modal", false);
                       loading.hide();
                        console.log(historyData);
                    });*/
                }

                //Method to expand all dirs in current listing to the first level
                window.expandDirsFirstLevel = function (expandItemsQueue) {
                    var curPath = crushFTPTools.encodeURILocal(unescape(hashListener.getHash().toString().replace("#", "")));
                    curPath = curPath || "/";
                    var expandItems = $("table#filesContainer").find("tr[rootdir='" + crushFTPTools.decodeURILocal(curPath) + "']:visible");
                    expandItemsQueue = expandItemsQueue || [];
                    // Loop through items, find out which are not expanded. Make an array of such items and pass it to expandDir method
                    expandItems.each(function () {
                        var expandBtn = $(this).find("td.directory");
                        if (!expandItemsQueue.has(escape(unescape(expandBtn.find("a").attr("rel")))) && expandBtn && !expandBtn.hasClass("expanded") && expandBtn.find("a").length > 0 && expandBtn.find("a").attr("rel")) {
                            expandItemsQueue.push(escape(unescape(expandBtn.find("a").attr("rel"))));
                        }
                    });
                    expandDir(expandItemsQueue); //Expand each items supplied as an array
                }

                //Expands directory passed as an array in parameter
                function expandDir(expandQueue) {
                    if (expandQueue.length > 0) {
                        var curDir = expandQueue.shift();
                        curDir = $("table#filesContainer").find("span.expandButton[rel='" + curDir + "']");
                        if (curDir.length > 0) {
                            //Finds out relevant list item in listing and triggers expand event, once expand of current item completes it will recall expandDirsFirstLevel with same array passed to this method. Which will not have items that are expanded now in next call.
                            curDir.trigger(o.folderEvent, function () {
                                expandDirsFirstLevel(expandQueue);
                            });
                        } else {
                            expandDirsFirstLevel(expandQueue);
                        }
                    } else {
                        return;
                    }
                }

                //performAction method is generally used in all context menu and main menu item's command
                window.performAction = function (elem, context) {
                    var onBlockFn = function(){
                        stickyRelocate();
                    };
                    var onUnblockFn = function(){
                        stickyRelocate();
                    };
                    if (elem == "expandFirstLevel") {
                        //Expand first level of each dirs on list, treeview only
                        if (currentView() == "Thumbnail") {
                            $.growlUI(getLocalizationKey("TreeviewSpecificActionMsgTitleText"), getLocalizationKey("TreeviewSpecificActionMsgDescText"), o.GrowlTimeout, "growlError", o.GrowlWithCloseButton);
                        } else {
                            window.expandDirsFirstLevel(context);
                        }
                        return;
                    } else if (elem == "upload") {
                        //Open browser uploader window
                        if(window.useOldUploader)
                        {
                            window.browserUploader(context);
                            if($("div#filesBasket").dialog("isOpen"))
                                $(".blockMsg, .popupWindow").css("z-index", "1003");
                        }
                        else{
                            window.showUploadPanel(true);
                        }
                        return;
                    } else if (elem == "quickView") {
                        //Open quick view popup
                        quickView(context);
                        return;
                    } else if(elem == "downloadLowRes")
                    {
                        //Download low res folder
                        downloadLowRes(context);
                        return;
                    } else if(elem == "downloadKeywords")
                    {
                        //Download low res folder
                        downloadKeywords(context);
                        return;
                    } else if (elem == "delete") {
                        //Remove selected item
                        window.delete_items(context);
                        return;
                    } else if (elem == "rename") {
                        //Rename selected item
                        performRenameAction(context);
                        return;
                    } else if (elem == "cut") {
                        //Cut selected item
                        doCopy(context, true);
                        return;
                    } else if (elem == "copy") {
                        //Copy selected item
                        doCopy(context);
                        return;
                    } else if (elem == "paste") {
                        //Paste copied/cut items
                        doPaste(context);
                        return;
                    } else if (elem == "zip") {
                        //Zip selected items and download
                        downloadAsZip(context);
                        return;
                    } else if (elem == "unzip") {
                        //unzip selected items on server
                        unzip(context);
                        return;
                    } else if (elem == "zipItems") {
                        //zip selected items on server
                        zipItems(context);
                        return;
                    } else if (elem == "exploreZip") {
                        //explore selected zip
                        exploreZip(context);
                        return;
                    } else if (elem == "download" || elem == "downloadAll") {
                        //Download selected items
                        downloadItems(context, false, false, elem == "downloadAll");
                        return;
                    } else if (elem == "share") {
                        //Open share window with selected items
                        shareFile(context);
                        return;
                    } else if (elem == "quickShare") {
                        //Share items quickly, no popup
                        quickShareFile(context);
                    }else if (elem == "addToBasket") {
                        //Add selected items to download basket
                        addToBasket(context);
                        return
                    } else if (elem == "quickAdvancedDownload") {
                        //Quickly download selected items using advanced download applet
                        quickAdvancedDownload(context);
                        return
                    } else if (elem == "showBasket") {
                        //Show download basket
                        showDownloadBasket(context);
                        return;
                    } else if (elem == "copyDirectLink") {
                        //Copy link of selected item, opens popup with link
                        copypath(context);
                        return;
                    } else if (elem == "updateKeywords") {
                        //Open popup to update keywords of selected items
                        updateKeywords(context);
                        return;
                    } else if (elem == "batchComplete") {
                        //Complete batch
                        batchComplete(context);
                        return;
                    } else if (elem == "logout") {
                        //Logout
                        doLogout(context);
                        return;
                    } else if (elem == "search") {
                        //Open search window
                        var $elem = $("#searchDiv");
                        $.blockUI({
                            message: $elem,
                            css: {
                                width: '700px',
                                padding: '15px',
                                'margin-left': '-350px',
                                left: '50%',
                                position: 'absolute',
                                top: '27%',
                                '-webkit-border-radius': '10px',
                                '-moz-border-radius': '10px',
                                opacity: 1,
                                'background-color': getPopupColor(true),
                                'border': "1px solid " + getPopupColor()
                            },
                            onBlock: onBlockFn,
                            onUnblock : onUnblockFn
                        });
                    } else if (elem == "shareOptionDiv") {
                        //Open share option
                        var $elem = $("#shareOptionDiv");
                        var divWidth = window.shareWindowWidth || 640;
                        var margin = window.shareWindowWidth ? window.shareWindowWidth/2 : 300;
                        $.blockUI({
                            message: $elem,
                            css: {
                                width: divWidth + 'px',
                                padding: '15px',
                                'margin-left': '-'+margin+'px',
                                left: '50%',
                                position: 'absolute',
                                top: '55px',
                                '-webkit-border-radius': '10px',
                                '-moz-border-radius': '10px',
                                opacity: 1,
                                'background-color': getPopupColor(true),
                                'border': "1px solid " + getPopupColor()
                            },
                            onBlock: function () {
                                try {
                                    if($("input#emailFrom", "#shareOptionDiv").val()=="")
                                    {
                                        $("input#emailFrom", "#shareOptionDiv")[0].focus();
                                        $("input#emailFrom", "#shareOptionDiv")[0].select();
                                    }
                                    else
                                    {
                                        $("input#emailTo", "#shareOptionDiv")[0].focus();
                                        $("input#emailTo", "#shareOptionDiv")[0].select();
                                    }
                                    $elem.parent().draggable({
                                        handle: "h2"
                                    });
                                    window.scrollToElement($elem);
                                    stickyRelocate();
                                } catch (ex) {}
                            },
                            onUnblock : onUnblockFn
                        });
                    } else if (elem == "slideshow") {
                        //Open on page slideshow
                        var basket = false;
                        var el = $();
                        if (context) {
                            el = currentContext();
                            if (el) {
                                basket = el.hasClass("contextMenuItem");
                            }
                        }
                        var $elem = $("#slideshowDiv");
                        var viewportHeight = window.innerHeight ? window.innerHeight : $(window).height();
                        var viewportWidth = $(window).width();
                        viewportHeight = viewportHeight - (viewportHeight * 0.2);
                        viewportWidth = viewportWidth - (viewportWidth * 0.1);
                        $elem.find(".content").append($('div.slideshow'));
                        $.blockUI({
                            message: $elem,
                            css: {
                                width: viewportWidth + 'px',
                                padding: '15px',
                                'margin-left': '-' + (viewportWidth / 2) - 15 + 'px',
                                left: '50%',
                                position: 'absolute',
                                top: '5px',
                                '-webkit-border-radius': '10px',
                                '-moz-border-radius': '10px',
                                opacity: 1,
                                'background-color': getPopupColor(false, false, false, true),
                                'border': "1px solid " + getPopupColor()
                            },
                            onBlock: function () {
                                var h = window.innerHeight ? window.innerHeight : $(window).height();
                                h = h * 0.92;
                                $("div.blockUI").css({
                                    "background-color": getPopupColor(false, false, false, true),
                                    "color": "white"
                                });
                                var destinationPath = unescape(hashListener.getHash().toString());
                                if(basket)
                                {
                                    if (currentView(basket) == "Thumbnail") {
                                        destinationPath = "#" + el.data("dataRow").path;
                                    }
                                    else{
                                        destinationPath = "#" + el.closest("tr").attr("rel");
                                    }
                                }
                                var _filePath;
                                if(el.length>0)
                                {
                                    if (el) {
                                        var parentElem = $(el);
                                        if (currentView(basket) != "Thumbnail") {
                                            parentElem = parentElem.closest("tr");
                                        }
                                        _filePath = parentElem.find("a").text();
                                        _filePath = unescape(_filePath.replace("//", "/"));
                                    }
                                }
                                if(_filePath)
                                {
                                    if(destinationPath)
                                        destinationPath +="^^^" + _filePath;
                                    else
                                        destinationPath ="#^^^" + _filePath;
                                }
                                var lang = window.languageLoaded;
                                if(lang)
                                    lang = "&lang=" + lang;
                                else
                                    lang = "";
                                var iframe = $('<iframe frameborder="0" scrolling="auto" style="width: 100%; height:' + h + 'px;background-color: #000000;" name="cftp_iframeSS" id="cftp_iframeSS" src="about:blank;" hspace="0" allowtransparency="false"></iframe>');
                                $elem.find("div.content").empty().append(iframe);
                                destinationPath = crushFTPTools.sanitize(destinationPath);
                                iframe.attr("src", "/WebInterface/jQuery/slideshowView.html?fromBasket=" + basket + lang + "" + destinationPath + "");
                                $(window).bind("resize", function () {
                                    resetSlideShowDimensions();
                                });
                                stickyRelocate();
                            },
                            onUnblock: function () {
                                $elem.find("div.content").empty();
                                stickyRelocate();
                            }
                        });
                        if($("div#filesBasket").dialog("isOpen"))
                            $(".blockMsg").css("z-index", 1002);
                    } else if (elem == "manageShares") {
                        window.popupManageShares();
                    } else if (elem == "keywordsDiv") {
                        //Show keywords
                        var $elem = $("#keywordsDiv");
                        $.blockUI({
                            message: $elem,
                            css: {
                                width: '600px',
                                padding: '15px',
                                'margin-left': '-310px',
                                left: '50%',
                                position: 'absolute',
                                top: '15%',
                                '-webkit-border-radius': '10px',
                                '-moz-border-radius': '10px',
                                opacity: 1,
                                'background-color': getPopupColor(true),
                                'border': "1px solid " + getPopupColor()
                            },
                            onBlock: function () {
                                $elem.parent().draggable({
                                    handle: "h2"
                                });
                                stickyRelocate();
                            },
                            onUnblock : onUnblockFn
                        });
                    } else if (elem == "changeIcon") {
                        //Open icon change window
                        changeIcon(context);
                    } else if(elem == "Preview") {
                        quickView(context);
                    }
                    else if (elem == "downloadSyncApp") {
                        if(typeof context === "string")
                            downloadSyncApp(context);
                        else
                            downloadSyncApp();
                        return;
                    }
                    else if (elem == "downloadCrushFTPDrive") {
                        if(typeof context === "string")
                            downloadCrushFTPDrive(context);
                        else
                            downloadCrushFTPDrive();
                        return;
                    }
                    else if (elem == "downloadAttachmentRedirector") {
                        if(typeof context === "string")
                            downloadAttachmentRedirector(context);
                        else
                            downloadAttachmentRedirector();
                        return;
                    }
                    else if (elem == "parentLocation") {
                        //Go to parent location
                        if (context) {
                            var el = currentContext();
                            if(el)
                            {
                                var rootdir = el.attr('root_dir');
                                if(rootdir)
                                {
                                    var filePath = unescape(hashListener.getHash().toString().replace("#", ""));
                                    blockFileListingUI(true);
                                    setHashLocation(rootdir);
                                    $(".cluetip-default").remove();
                                    if(filePath == unescape(rootdir))
                                    {
                                        $(".refreshButton").click();
                                    }
                                }
                            }
                        }
                        return;
                    } else if (elem == "edit") {
                        editFile(context);
                        return;
                    }
                    else {
                        $elem = $("#" + elem);
                        $elem.removeData("contextElem");
                        if (context) {
                            var el = currentContext();
                            $elem.data("contextElem", el);
                        }
                        if($elem && $elem.length>0)
                        {
                            var width = '350px';
                            var margin = '-175px';
                            if($elem.attr("popupWidth"))
                            {
                                width = $elem.attr("popupWidth");
                                margin = "-" + parseInt(width)/2 + "px";
                                width = width + "px";
                            }
                            if(elem == "copyDirectLinkDiv")
                            {
                                width = "auto";
                                var val = ($elem.find("textarea:first").width()/2 - 30);
                                margin = "-" + val + "px";
                            }
                            $.blockUI({
                                message: $elem,
                                css: {
                                    width: width,
                                    padding: '15px',
                                    'margin-left': margin,
                                    left: '50%',
                                    position: 'absolute',
                                    top: '25%',
                                    '-webkit-border-radius': '10px',
                                    '-moz-border-radius': '10px',
                                    opacity: 1,
                                    'background-color': getPopupColor(true),
                                    'border': "1px solid " + getPopupColor()
                                },
                                onBlock: onBlockFn,
                                onUnblock : onUnblockFn
                            });
                            if($("div#filesBasket").dialog("isOpen"))
                            {
                                $(".blockOverlay").css("z-index", "1002");
                                $(".blockMsg").css("z-index", "1003");
                            }
                            if(elem == 'delayedUpload')
                            {
                                if(window.delayedUploadSet)
                                {
                                    $("#delayedUploadWarning").show();
                                }
                                else
                                {
                                    $("#delayedUploadWarning").hide();
                                }
                            }
                            else if(elem == 'userOptions')
                            {
                                $elem.find("div.tabs").tabs();
                            }
                        }
                    }
                    if(elem != 'delayedUpload')
                    {
                        try {
                            $(".blockUI ").find("input[type='text']")[0].focus();
                            $(".blockUI ").find("input[type='text']")[0].select();
                        } catch (ex) {}
                    }
                }

                //Scroll position of window to target element
                window.scrollToElement = function ($target) {
                    if ($target.length) {
                        var targetOffset = $target.offset().top;
                        $('html,body').animate({
                            scrollTop: targetOffset
                        }, 500, false);
                        return false;
                    }
                }

                //Reset slideshow dimensions
                window.resetSlideShowDimensions = function (_height) {
                    if (_height) {
                        $("div.slideshow").find("iframe").css("height", _height + "px");
                    } else {
                        var viewportHeight = window.innerHeight ? window.innerHeight : $(window).height();
                        var viewportWidth = $(window).width();
                        viewportHeight = viewportHeight - (viewportHeight * 0.2);
                        viewportWidth = viewportWidth - (viewportWidth * 0.1);

                        //Set the width and margin of popup to keep it in center if window resizes based on new viewport dimension
                        $("div.blockUI.blockPage").css({
                            width: viewportWidth + 'px',
                            'margin-left': '-' + (viewportWidth / 2) - 15 + 'px',
                            left: '50%'
                        });
                    }
                }

                window.saveUserOptions = function(cancel){
                    if(!cancel)
                    {
                        var varHideItemsStartingWithDot = $.cookie(o.CookieHideItemStartingWithDot);
                        varHideItemsStartingWithDot = varHideItemsStartingWithDot == "true";
                        var refresh = varHideItemsStartingWithDot != $("#hideItemsStartingWithDot").is(':checked');

                        hideItemsStartingWithDot($("#hideItemsStartingWithDot").is(':checked'), true);
                        hideCheckBoxColumn($("#hideCheckBoxColumn").is(':checked'), true);
                        hideFilter($("#hideFilter").is(':checked'), true);
                        autoUploadFlagSet($("#autoUploadFlag").is(':checked'), true);
                        autoAppletFlagSet($("#autoAppletFlag").is(':checked'), true);
                        noCompressionFlagSet($("#noCompressionFlag").is(':checked'), true);
                        if(refresh){
                            refreshView();
                            $(".refreshButton").click();
                        }
                        else
                            refreshView();
                    }
                    else
                    {
                        var varHideItemsStartingWithDot = $.cookie(o.CookieHideItemStartingWithDot);
                        varHideItemsStartingWithDot = varHideItemsStartingWithDot == "true";
                        if (varHideItemsStartingWithDot) {
                            $("#hideItemsStartingWithDot").attr("checked", "checked");
                        } else {
                            $("#hideItemsStartingWithDot").removeAttr("checked");
                        }
                        var varHideCheckBoxColumn = $.cookie(o.CookieHideCheckBoxColumn);
                        varHideCheckBoxColumn = varHideCheckBoxColumn == "true";
                        if (varHideCheckBoxColumn) {
                            $("#hideCheckBoxColumn").attr("checked", "checked");
                        } else {
                            $("#hideCheckBoxColumn").removeAttr("checked");
                        }
                        var varHideFilter = $.cookie(o.CookieHideFilter);
                        varHideFilter = varHideFilter == "true";
                        if (varHideFilter) {
                            $("#hideFilter").attr("checked", "checked");
                        } else {
                            $("#hideFilter").removeAttr("checked");
                        }
                        if ($.cookie(o.CookieAutoUploadFlag) + "" == "true") {
                            $("#autoUploadFlag").attr("checked", "checked");
                        } else {
                            $("#autoUploadFlag").removeAttr("checked");
                        }
                        if ($.cookie(o.CookieAutoAppletFlag) + "" == "true") {
                            $("#autoAppletFlag").attr("checked", "checked");
                        } else {
                            $("#autoAppletFlag").removeAttr("checked");
                        }
                        if ($.cookie(o.CookieNoCompressionFlag) + "" == "true") {
                            $("#noCompressionFlag").attr("checked", "checked");
                        } else {
                            $("#noCompressionFlag").removeAttr("checked");
                        }
                    }
                    $.unblockUI();
                }

                //Close slideshow popup
                window.closeSlideshow = function () {
                    $('#slideshowDiv').find('div.content').empty();
                    $(window).unbind('resize');
                    $.unblockUI();
                }

                //Set cookie to show/hide items start with a dot. Refresh view
                window.hideItemsStartingWithDot = function (flag, norefresh) {
                    var options = {
                        path: '/',
                        expires: 365
                    };
                    $.cookie(o.CookieHideItemStartingWithDot, flag, options);
                    if(!norefresh)
                       $(".refreshButton").click();
                }

                //Set cookie to show/hide checkbox columns. Refresh view
                window.hideCheckBoxColumn = function (flag, norefresh) {
                    if(typeof flag=="undefined")
                        return;
                    var options = {
                        path: '/',
                        expires: 365
                    };
                    $.cookie(o.CookieHideCheckBoxColumn, flag, options);
                    if(!norefresh)
                       refreshView();
                }

                //Set cookie to show/hide filter box. Refresh view
                window.hideFilter = function (flag, norefresh) {
                    if(typeof flag=="undefined")
                        return;
                    var options = {
                        path: '/',
                        expires: 365
                    };
                    $.cookie(o.CookieHideFilter, flag, options);
                    if(!norefresh)
                       refreshView();
                }

                //Set cookie to auto upload items as selection completes flag
                window.autoUploadFlagSet = function (flag) {
                    var options = {
                        path: '/',
                        expires: 365
                    };
                    $.cookie(o.CookieAutoUploadFlag, flag, options);
                    if(flag)
                        $("#autoUploadFlag").attr("checked", "checked");
                    else
                        $("#autoUploadFlag").removeAttr("checked");
                }

                //Set cookie to auto load applet as page completes loading
                window.autoAppletFlagSet = function (flag) {
                    var options = {
                        path: '/',
                        expires: 365
                    };
                    $.cookie(o.CookieAutoAppletFlag, flag, options);
                }

                //Set cookie to use compression in upload/download flag
                window.noCompressionFlagSet = function (flag) {
                    var options = {
                        path: '/',
                        expires: 365
                    };
                    $.cookie(o.CookieNoCompressionFlag, flag, options);
                }

                //Command to start tunnel in applet to boost speed
                window.startTunnel = function () {
                    crushFTPTools.getCrushAuthToken(function(token){
                        o.uploadURL = "http://127.0.0.1:55555/WebInterface/function/?CrushAuth=" + token;
                        o.downloadURL = "http://127.0.0.1:55555/WebInterface/function/?CrushAuth=" + token;
                        if (!$(document).data("appletLoadedU")) $(document).data("appletLoadedU", false);
                        if (!$(document).data("appletLoadedU")) {
                            loadApplet(false, function () {
                                runAppletCommand(false, "COMMAND=TUNNEL:::ACTION=START:::URL=" + unescape(window.location.toString().split("#")[0]), false);
                            });
                        } else {
                            runAppletCommand(false, "COMMAND=TUNNEL:::ACTION=START:::URL=" + unescape(window.location.toString().split("#")[0]), false);
                        }
                    });
                }

                //Command to stop tunnel in applet
                window.stopTunnel = function () {
                    o.uploadURL = "/WebInterface/function/";
                    o.downloadURL = "/WebInterface/function/";
                    if ($(document).data("appletLoadedU")) {
                        runAppletCommand(false, "COMMAND=TUNNEL:::ACTION=STOP", false);
                    }
                }

                function showLoggedOutPopup(){
                    if($('#alertAutoLogoutMsg').is(":visible"))return;
                    if ($("#alertAutoLogoutMsg").length == 0) {
                        var alertLogoutHTML = "<div class='logoutConfirmDialog'><h2>" + getLocalizationKeyExternal("AutoLogOutConfirmationTitle") + "</h2><div class='attention' style='height:25px;margin-top:20px;'>" + getLocalizationKeyExternal("AutoLogOutMsg") + "</div><div style='width: 80px;border: 1px solid #eee;padding: 3px 6px 3px 20px;background-position: 5px;margin: 14px 0px 0px 0px;text-decoration: none;position: relative;left: 50%;margin-left: -60px;clear: both;' class='saveButton'>" + getLocalizationKeyExternal("AutoLogOutLoginButtonText") + "</div><div style='clear:both;'></div></div>";
                        $("body").append("<div id='alertAutoLogoutMsg'>" + alertLogoutHTML + "</div>");
                        $("#alertAutoLogoutMsg").hide();
                    }
                    var _top = $(document).height() * 0.25;
                    var $alertBox = $('#alertAutoLogoutMsg');
                    $.blockUI({
                        message: $alertBox,
                        css: {
                            padding: '10px 10px 20px 30px',
                            'background-color': getPopupColorExternal(true),
                            'border': "1px solid " + getPopupColorExternal(),
                            '-webkit-border-radius': '10px',
                            '-moz-border-radius': '10px',
                            color: '#000',
                            opacity: 0.9,
                            top: _top + "px",
                            left: '40%',
                            width: '305px'
                        }
                    });
                    $alertBox.find(".saveButton").unbind().click(
                        function () {
                            $.unblockUI();
                            $("#alertLogoutConfirmation").remove();
                            document.location = "/WebInterface/login.html";
                    });
                }

                //Logout user
                window.doLogout = function (inactivityTimeout) {
                    if($('#alertAutoLogoutMsg').is(":visible"))return;
                    window.logoutInitiated = true;
                    var obj = {
                        command: "logout",
                        random: Math.random()
                    };
                    obj.c2f = crushFTPTools.getCrushAuth();
                    var loginPage = "/WebInterface/login.html";
                    if(window.LogoutCustomRedirectPath)
                        loginPage = window.LogoutCustomRedirectPath;
                    $.ajax({
                        type: "POST",
                        url: o.ajaxCallURL,
                        data: obj,
                        error: function (XMLHttpRequest, textStatus, errorThrown) {
                            if(inactivityTimeout && window.noRedirectToLoginAfterAutoLogout)
                            {
                                showLoggedOutPopup();
                            }
                            else
                                document.location = loginPage;
                        },
                        success: function (msg) {
                            if(inactivityTimeout && window.noRedirectToLoginAfterAutoLogout)
                            {
                                showLoggedOutPopup();
                            }
                            else
                                document.location = loginPage;
                        }
                    });
                }

                //Batch complete method
                window.batchComplete = function (elem) {
                    var obj = {command: "batchComplete"};
                    obj.c2f = crushFTPTools.getCrushAuth();
                    $.ajax({
                        type: "POST",
                        url: "/WebInterface/function/",
                        data: obj,
                        success: function (response) {
                            var s = getActionResponseText(response);
                            if (s.toUpperCase().indexOf("SUCCESS") >= 0) {
                                $.growlUI(getLocalizationKey("BatchCompleteText"), getLocalizationKey("BatchComplete"), o.GrowlTimeout, "", o.GrowlWithCloseButton);
                            } else $.growlUI(getLocalizationKey("BatchCompleteText"), s, o.GrowlTimeout, "", o.GrowlWithCloseButton);
                        }
                    });
                }

                function processChangePasswordStatus(s){
                    if (s.toUpperCase().indexOf("PASSWORD CHANGED") >= 0) {
                        var dlg = $("<div title='Alert'>"+getLocalizationKey("PasswordChangedMsgText")+"</div>").dialog({
                            modal: true,
                            buttons: [
                            {
                                text : "OK",
                                click : function(){
                                    $(this).dialog("close");
                                    doLogout();
                                }
                            }],
                            open : function(event, ui){
                                $(event.target).closest(".ui-dialog").css("zIndex", 9999).next().css("zIndex", 9998);
                            }
                        });
                    } else {
                        var msg = s;
                        msg = msg.replace("You did not enter the correct current password.", getLocalizationKey("ChangePasswordCurrentPasswordNotCorrectWarningText"));

                        if(typeof window.localizations.passwordRequirementsMessages != "undefined")
                            msg = msg.replace("Not Allowed", window.localizations.passwordRequirementsMessages.notAllowedErrorMsg);

                        if(typeof window.localizations.passwordChangePreviousPasswordErrorMessage != "undefined")
                            msg = msg.replace("Password cannot be one of your recent passwords", window.localizations.passwordChangePreviousPasswordErrorMessage);

                        if(msg.indexOf("ERROR: ")==0 && typeof window.localizations.passwordRequirementsMessages != "undefined")
                        {
                            var msgToShow = [];
                            msg = msg.replace("ERROR: ", "");
                            var msgs = msg.split(".");
                            for (var i = 0; i < msgs.length; i++) {
                                var curmsg = $.trim(msgs[i]);
                                if(curmsg.length>0)
                                {
                                    if(curmsg.match(/\d+/))
                                    {
                                        var no = curmsg.match(/\d+/)[0];
                                        if(curmsg.indexOf("Password must be at least")>=0)
                                        {
                                            msgToShow.push(localizations.passwordRequirementsMessages.chars.replace("$$", no));
                                        }
                                        else if(curmsg.indexOf("number characters")>=0)
                                        {
                                            msgToShow.push(localizations.passwordRequirementsMessages.numericChars.replace("$$", no));
                                        }
                                        else if(curmsg.indexOf("lower case")>=0)
                                        {
                                            msgToShow.push(localizations.passwordRequirementsMessages.lowerCase.replace("$$", no));
                                        }
                                        else if(curmsg.indexOf("upper case")>=0)
                                        {
                                            msgToShow.push(localizations.passwordRequirementsMessages.upperCase.replace("$$", no));
                                        }
                                        else if(curmsg.indexOf("special characters")>=0)
                                        {
                                            msgToShow.push(localizations.passwordRequirementsMessages.specialCase.replace("$$", no));
                                        }
                                        else
                                        {
                                            msgToShow.push(curmsg);
                                        }
                                    }
                                    else
                                    {
                                        msgToShow.push(curmsg);
                                    }
                                }
                            }
                            if(msgToShow.length>0){
                                msgToShow = localizations.passwordRequirementsMessages.errorTitle +  msgToShow.join(localizations.passwordRequirementsMessages.msgSeparator);
                                alert(msgToShow);
                            }
                            else
                            {
                                alert(msg);
                            }
                        }
                        else
                            alert(msg);
                    };
                }

                //Change password method
                window.changePassword = function (elem) {
                    if ($("#new_password1")[0].value != $("#new_password2")[0].value) {
                        alert(getLocalizationKey("PasswordNotMatchingMsgText"));
                    }
                    else {
                        var obj = {
                            command: "changePassword",
                            current_password: crushFTPTools.encodeURILocal($("#current_password")[0].value),
                            new_password1: crushFTPTools.encodeURILocal($("#new_password1")[0].value),
                            new_password2: crushFTPTools.encodeURILocal($("#new_password2")[0].value)
                        };
                        obj.c2f = crushFTPTools.getCrushAuth();
                        $.ajax({
                            type: "POST",
                            url: "/WebInterface/function/",
                            data: obj,
                            error: function(XMLHttpRequest, textStatus, errorThrown) {
                                if(XMLHttpRequest.responseText){
                                    processChangePasswordStatus($(XMLHttpRequest.responseText).find("response").text());
                                }
                                else{
                                    processChangePasswordStatus("There was some problem with the server request");
                                }
                            },
                            success: function (response) {
                                processChangePasswordStatus($(response).find("response").text());
                            }
                        });
                    }
                    return false;
                }

                window.pollSearchStatus = function(){
                    $.ajax({
                        type: "POST",
                        url: o.ajaxCallURL,
                        data: "command=getSearchStatus&c2f=" + crushFTPTools.getCrushAuth(),
                        success: function (response) {
                            var info = $(response).find("response").text();
                            info = info.split("/");
                            var min = info[0] || 0;
                            var max = info[1] || 1;
                            min = parseInt(min);
                            max = parseInt(max);
                            var perc = Math.round((100 * min)/max);
                            if(min ==0)perc = 0;
                            var searchDiv = $("#searchDiv");
                            if(searchDiv.find(".blockMsg").find(".info").length==0)
                                searchDiv.find(".blockMsg").append("<div class='info' style='margin:5px 0px;'></div>");
                            searchDiv.find(".blockMsg").find(".info").progressbar({
                              value: perc
                            });
                            if(window.isSearchInProgress)
                                window.pollSearchStatus();
                        }
                    });
                };

                //Perform search in directory, make ajax call based on options selected and show result on screen
                window.startSearch = function (word) {
                    var searchDiv = $("#searchDiv");
                    var filterSearch = false;
                    if(searchDiv.is(":visible"))
                    {
                        searchDiv.block({
                            message:  getLocalizationKey("SearchProcessNotificationText") + ' <a id="cancelAjax" href="#" style="color:#FFF;font-size:10px;">'+ getLocalizationKey("SearchProcessCancelText") +'</a>',
                            css: {
                                border: 'none',
                                padding: '15px',
                                backgroundColor: '#000',
                                '-webkit-border-radius': '10px',
                                '-moz-border-radius': '10px',
                                color: '#fff',
                                top: '40%'
                            }
                        });
                    }
                    else
                    {
                        filterSearch = true;
                        var loadingIndicator = $("#loadingIndicator");
                        if($("#cancelAjaxFilter").is(":visible"))
                            $("#cancelAjaxFilter").click();
                        if(!word || word.length==0)
                        {
                            if($("#searchResultNotification[search]").find("a").length>0)
                                $("#searchResultNotification[search]").find("a").click();
                            loading.hide();
                            $("#cancelAjaxFilter").remove();
                            $("#filter").focus();
                            return false;
                        }
                        loading.show();
                        loadingIndicator.after('<a id="cancelAjaxFilter" href="#" style="color: #000;font-size: 11px;text-align: center;display: block;margin-bottom: 10px;">'+ getLocalizationKey("SearchProcessCancelText") +'</a>');
                        $("#filter").focus();
                    }
                    var destinationPath = crushFTPTools.encodeURILocal(hashListener.getHash().toString().replace("#", ""));
                    destinationPath = window.useStaticPathToSearch || destinationPath || "/"; //Path to perform search on
                    window.isSearchInProgress = true;
                    if(!filterSearch)
                        window.pollSearchStatus();
                    var depth = (filterSearch && window.searchDepth) ? "&depth=" + window.searchDepth : "";
                    var searchForm = $("#searchForm");
                    var data = "path=" + destinationPath + "&" + searchForm.serialize().toString().replace(/=on/g, '=true') + "&c2f=" + crushFTPTools.getCrushAuth()+depth;
                    if(searchForm.find("#date1").is(":checked") && !searchForm.find("#date1_value").val()){
                        data = data.replace("date1=true", "date1=false");
                    }
                    if(searchForm.find("#date2").is(":checked") && !searchForm.find("#date2_value").val()){
                        data = data.replace("date2=true", "date2=false");
                    }
                    if(searchForm.find("#size1").is(":checked") && !searchForm.find("#size1_value").val()){
                        data = data.replace("size1=true", "size1=false");
                    }
                    if(searchForm.find("#size2").is(":checked") && !searchForm.find("#size2_value").val()){
                        data = data.replace("size2=true", "size2=false");
                    }
                    if(filterSearch)
                    {
                        if(data.indexOf("all_keywords=")>=0)
                            data = data.replace("all_keywords=false", "all_keywords=true");
                        else
                            data = data + "&all_keywords=true";

                        if(data.indexOf("include_type=")>=0)
                            data = data.replace("include_type=or", "include_type=and");
                        else
                            data = data + "&include_type=and";
                    }

                    var $_Request = $.ajax({
                        type: "POST",
                        url: o.ajaxCallURL,
                        dataType: "json",
                        beforeSend: function(x) {
                            if(x && x.overrideMimeType) {
                                x.overrideMimeType("application/j-son;charset=UTF-8");
                            }
                        },
                        data: data,
                        success: function (data) {
                            window.isSearchInProgress = false;
                            var response = data.listing;
                            window.l = response;
                            window.curTreeItems = response;
                            $(document).data("searchData", response);
                            if(filterSearch)
                            {
                                loading.hide();
                                $("#cancelAjaxFilter").remove();
                            }
                            searchDiv.unblock();
                            if (currentView() == "Thumbnail") {
                                renderListing($("#filesContainerDiv"), false, false, data, true);
                            } else {
                                renderListing($("#filesContainer"), false, false, data, true);
                            }
                            if(filterSearch)
                            {
                                $("#filter").val(word).focus();
                            }
                            $.unblockUI();
                        },
                        error: function (XMLHttpRequest, textStatus, errorThrown) {
                            window.isSearchInProgress = false;
                            //errorThrown = errorThrown || "searching failed";
                            //$.growlUI("Error : " + errorThrown, errorThrown, o.GrowlTimeout, "");
                        }
                    });

                    $("#cancelAjax, #cancelAjaxFilter").unbind().click(
                        function () {
                            if(filterSearch)
                            {
                                loading.hide();
                                $("#cancelAjaxFilter").remove();
                            }
                            else
                                searchDiv.unblock();
                            window.isSearchInProgress = false;
                            $_Request.abort();
                            return false;
                        }
                    );
                    return false;
                }

                window.browserUploader = function(context)
                {
                    if($.CrushFTP && $.CrushFTP.uploadBarHidden)
                    {
                        $("#fileRepo").show().trigger("visibilityChange");
                    }
                    else
                    {
                        if(!window.disableUploadBarAttentionAnimation)
                        {
                            $("#fileQueueInfo").effect("highlight", { color : "red" }, 1500);
                            $.growlUI(getLocalizationKey("uploadBarAttentionTitle"), getLocalizationKey("uploadBarAttentionText"), 5000, "growlWarning");
                        }
                        else
                        {
                            $("#fileQueueInfo").show();
                        }
                    }
                }

                //Get upload form from  if exist, execute callback
                window.getUploadForm = function(callback, callback2) {
                    if(typeof $(document).data("uploadFormHTML") != "undefined")
                    {
                        callback($(document).data("uploadFormHTML"));
                        return;
                    }
                    var unique_upload_id = $(document).data("unique_upload_id") || generateRandomPassword(4);
                    function getCommonUploadForm(cb){
                        var $_Request = $.ajax({
                            type: "POST",
                            url: o.ajaxCallURL,
                            data: "command=getCustomForm&form=commonUploadForm&c2f=" + crushFTPTools.getCrushAuth(),
                            error: function (XMLHttpRequest, textStatus, errorThrown) {
                                cb();
                            },
                            success: function (response) {
                                var items = $.xml2json(response, true);
                                var html = '';
                                if (items.entries) {
                                    $("div.customtabs", "#browserFileUpload").find("a#uploadDetailsTabAnchor").show();
                                    var fields = items.entries[0].entries_subitem;
                                    html = '<table class="customForm" cellpadding="0" cellspacing="0">';
                                    html += '<tr style="display:none;"><td colspan="2"><input type="hidden" id="meta_UploadFormId" name="meta_UploadFormId" value="' + XMLValue(items.id[0]) + '"/><input type="text" id="meta_unique_upload_id" class="unique_upload_id" name="meta_unique_upload_id" value="'+unique_upload_id+'"/><input type="hidden" id="meta_UploadFormName" name="meta_UploadFormName" value="' + XMLValue(items.name[0]) + '"/><input type="hidden" id="meta_form_name" name="meta_form_name" value="' + XMLValue(items.name[0]) + '" /></td></tr><tr><td width="35%" class="nowrap"></td><td width="65%"></td></tr>';
                                    for (var item in fields) {
                                        html += generateFormField(fields[item]);
                                    }
                                    html += '</table>';
                                }
                                $(document).data("commonUploadFormHTML", html);
                                cb(html);
                            }
                        });
                    }
                    getCommonUploadForm(function(){
                        var $_Request = $.ajax({
                            type: "POST",
                            url: o.ajaxCallURL,
                            data: "command=getCustomForm&form=uploadForm&c2f=" + crushFTPTools.getCrushAuth(),
                            error: function (XMLHttpRequest, textStatus, errorThrown) {
                                $("#uploadDetailsTabAnchor").hide().next().click();
                            },
                            success: function (response) {
                                var items = $.xml2json(response, true);
                                var html = '';
                                if (items.entries) {
                                    $("div.customtabs", "#browserFileUpload").find("a#uploadDetailsTabAnchor").show();
                                    var fields = items.entries[0].entries_subitem;
                                    html = '<table class="customForm" cellpadding="0" cellspacing="0">';
                                    html += '<tr style="display:none;"><td colspan="2"><input type="hidden" id="meta_UploadFormId" name="meta_UploadFormId" value="' + XMLValue(items.id[0]) + '"/><input type="text" id="meta_unique_upload_id" class="unique_upload_id" name="meta_unique_upload_id" value="'+unique_upload_id+'"/><input type="hidden" id="meta_UploadFormName" name="meta_UploadFormName" value="' + XMLValue(items.name[0]) + '"/><input type="hidden" id="meta_form_name" name="meta_form_name" value="' + XMLValue(items.name[0]) + '" /></td></tr><tr><td width="35%" class="nowrap"></td><td width="65%"></td></tr>';
                                    for (var item in fields) {
                                        html += generateFormField(fields[item]);
                                    }
                                    html += '</table>';
                                } else {
                                    if(callback2)
                                        callback2();
                                    else
                                        $("div.customtabs", "#browserFileUpload").find("a#uploadDetailsTabAnchor").hide().next().click();
                                }
                                $(document).data("uploadFormHTML", html);
                                callback(html);
                            }
                        });
                    })
                    return false;
                }

                //Get custom form from server, execute callback
                function getCustomForm(type, callback, typeName, welcomeFormShown) {
                    var obj = {
                        type: "POST",
                        url: o.ajaxCallURL,
                        data: "command=getCustomForm&form=" + type + "&c2f=" + crushFTPTools.getCrushAuth(),
                        success: function (response) {
                            var items = $.xml2json(response, true);
                            var html = '';
                            var alwaysFlag = false;
                            if (items.always && items.always[0] && items.always[0].text) {
                                alwaysFlag = items.always[0].text == "true";
                            }
                            var formName = "";
                            if (items.name && items.name[0] && items.name[0].text) {
                                formName = items.name[0].text;
                            }
                            if (items.entries) {
                                var fields = items.entries[0].entries_subitem;
                                html = '<input type="hidden" id="meta_form_name" name="meta_form_name" value="' + formName + '" /><table class="customForm" cellpadding="0" cellspacing="0">';
                                for (var item in fields) {
                                    html += generateFormField(fields[item]);
                                }
                                html += '<tr><td colspan="2" style="text-align:right;padding-right:10px;border:0px;">';
                                if (type != "messageForm") {
                                    html += '<button value="Reset" id="resetPasteForm">Reset</button>&nbsp;&nbsp';
                                }
                                html += '<button class="submitForm" value="' + typeName + '" id="submit' + typeName + 'Form">' + typeName + '</button> </td>' + '<tr>';
                                html += '</table>';
                                callback(html, true, formName, alwaysFlag);
                            } else {
                                callback(html, false, formName, alwaysFlag);
                            }
                        }
                    };
                    if(welcomeFormShown)
                    {
                        obj.welcomeFormShown = welcomeFormShown;
                    }
                    obj.c2f = crushFTPTools.getCrushAuth();
                    var $_Request = $.ajax(obj);
                    return false;
                }

                //Validate custom forms
                window.validateForm = function (target, form) {
                    form = form || $("table.customForm", "#divUploadPanel");
                    var validated = true;
                    //Loop through required items first
                    form.find(".required_true:visible, .validateEmail, .validatePasswords, .validateSameValue").each(
                    function () {
                        var ignoreRdOnly = $(this).hasClass("futureDateField") || $(this).hasClass("dateField");
                        if(!ignoreRdOnly)
                           if($(this).is(":disabled") || $(this).attr("readonly")) return;
                        if ($(this).hasClass("chkbox")) { //If it is checkbox
                            if (!$(this).is(":checked") && $(this).closest("td").find("input:checked").length == 0) {
                                $(this).parent().addClass("validationFail")
                                if (validated) {
                                    $(this).parent().focus();
                                }
                                validated = false;
                            } else {
                                $(this).parent().removeClass("validationFail");
                            }
                        } else { //If another input type
                            $(this).val($.trim($(this).val()));
                            if ($(this).val().length == 0 && $(this).hasClass("required_true")) {
                                $(this).addClass("validationFail");
                                if (validated) {
                                    $(this).focus();
                                }
                                validated = false;
                            } else {
                                if($(this).hasClass("validateEmail"))
                                {
                                    if ($(this).val().length > 0 && !validateEmail($(this).val(), true)) {
                                        $(this).addClass("validationFail emailFail");
                                        if (validated) {
                                            $(this).focus();
                                        }
                                        validated = false;
                                    }
                                    else if($(this).hasClass("emailFail"))
                                    {
                                        $(this).removeClass("validationFail emailFail");
                                    }
                                }
                                else if($(this).hasClass("validatePasswords"))
                                {
                                    var nextPass = form.find("input[name='"+$(this).attr("name")+"2']");
                                    if(nextPass.length>0)
                                    {
                                        if ($.trim($(this).val()) != $.trim($(nextPass).val())) {
                                            $(this).addClass("validationFail passMatchFail");
                                            nextPass.addClass("validationFail passMatchFail");
                                            $(this).parent().find(".passwordDsntMatch").remove();
                                            $(this).after("<span class='requiredField passwordDsntMatch' style='float:none;'> "+getLocalizationKey("customFormPasswordMatchValidationFailedText")+"</span>");
                                            if (validated) {
                                                $(this).focus();
                                            }
                                            validated = false;
                                        }
                                        else if($(this).hasClass("emailFail") || $(this).hasClass("passMatchFail") || $(this).hasClass("matchFail"))
                                        {
                                            $(this).removeClass("validationFail passMatchFail");
                                            nextPass.removeClass("validationFail passMatchFail");
                                            form.find(".passwordDsntMatch").remove();
                                        }
                                        else if($(this).hasClass("required_true") && $(this).val().length>0)
                                        {
                                            $(this).removeClass("validationFail");
                                        }
                                    }
                                }
                                else
                                {
                                    $(this).removeClass("validationFail");
                                }
                                if($(this).hasClass("validateSameValue"))
                                {
                                    var compareWith = form.find("input[name='"+$(this).attr("compareWith")+"']");
                                    if(compareWith.length>0)
                                    {
                                        if ($.trim($(this).val()) != $.trim($(compareWith).val())) {
                                            $(this).addClass("validationFail matchFail");
                                            compareWith.addClass("validationFail matchFail");
                                            $(this).parent().find(".valueDsntMatch").remove();
                                            $(this).after("<span class='requiredField valueDsntMatch' style='float:none;'> "+getLocalizationKey("customFormCompareValueMatchValidationFailedText")+"</span>");
                                            if (validated) {
                                                $(this).focus();
                                            }
                                            validated = false;
                                        }
                                        else if($(this).hasClass("matchFail"))
                                        {
                                            $(this).removeClass("validationFail matchFail");
                                            compareWith.removeClass("validationFail matchFail");
                                            form.find(".valueDsntMatch").remove();
                                        }
                                        else if($(this).hasClass("required_true") && $(this).val().length>0)
                                        {
                                            $(this).removeClass("validationFail");
                                        }
                                    }
                                }
                            }
                        }
                    });
                    //Remove attention message, if exists already
                    if (form.prev().hasClass("attention")) {
                        form.prev().remove();
                    }

                    if (validated) {//If validated, allow click on submit
                        $(target).removeClass("disabledClick");
                        form.find(".passwordDsntMatch").remove();
                    } else {
                        //Else show proper message, disable submit
                        $(target).addClass("disabledClick");
                        form.before("<div class='attention'>" + getLocalizationKey("FormValidationFailText") + "</div>");
                        if(form.find(".emailFail").length>0)
                        {
                            form.prev().append("<div>" + getLocalizationKey("FormEmailValidationFailText") + "</div>");
                        }
                        form.prev().css("float", "none");
                    }
                    return validated; //Return result
                }

                //Highlight paste button if files are copied
                function highlightPasteButton() {
                    if (($(document).data(o.CookieCopiedFiles) && $(document).data(o.CookieCopiedFiles).length > 0)) {
                        $("div.mainNavigation").find("a:contains('Paste')").addClass("starredMenu");
                    } else {
                        $("div.mainNavigation").find("a:contains('Paste')").removeClass("starredMenu");
                    }
                    if ($("#browserFileUpload").find("h2").hasClass("spinner")) {
                        $("ul.topnav").find("a[href='javascript:browserUploader();'], a[href='javascript:performAction(\'upload\');']").addClass("bouncing_loader");
                    }
                }

                //Copy selected items
                window.doCopy = function (context, flag) {
                    var action = "Copy";
                    if (flag) action = "Cut";
                    var _fileName = "";
                    var elem = false;
                    var basket = false;
                    var hasDirSelected = false;
                    if (context) {
                        elem = currentContext();
                        if (elem) {
                            var $curElem = $(elem);
                            if(window.cutCopyOnlyFiles)
                            {
                                if(!$curElem.hasClass('directory') && !$curElem.hasClass('directoryThumb'))
                                {
                                    _fileName = $curElem.find("a:first").attr("rel");
                                }
                                else
                                    hasDirSelected = true;
                            }
                            else
                            {
                                _fileName = $curElem.find("a:first").attr("rel");
                            }
                            basket = $curElem.hasClass("contextMenuItem");
                        }
                    }
                    var checkedFiles = {};
                    if(basket)
                    {
                        if (currentView(basket) == "Thumbnail") {
                            if(window.cutCopyOnlyFiles)
                            {
                                checkedFiles = $("#FileBasketList").find("li.fileBoxSelected.fileThumb:visible");
                                if(checkedFiles.length != $("#FileBasketList").find("li.fileBoxSelected:visible").length)
                                    hasDirSelected = true;
                            }
                            else
                                checkedFiles = $("#FileBasketList").find("li.fileBoxSelected:visible");
                        } else {
                            if(window.cutCopyOnlyFiles)
                            {
                                checkedFiles = $("#FileBasketList").find("td.fileTR").parent().find("input.chkBox:visible:checked");
                                if(checkedFiles.length != $("#FileBasketList").find("input.chkBox:visible:checked").length)
                                    hasDirSelected = true;
                            }
                            else
                                checkedFiles = $("#FileBasketList").find("input.chkBox:visible:checked");
                        }
                    }
                    else
                    {
                        if (currentView() == "Thumbnail") {
                            if(window.cutCopyOnlyFiles)
                            {
                                checkedFiles = $("#filesContainerDiv").find("li.fileBoxSelected.fileThumb:visible");
                                if(checkedFiles.length != $("#filesContainerDiv").find("li.fileBoxSelected:visible").length)
                                    hasDirSelected = true;
                            }
                            else
                                checkedFiles = $("#filesContainerDiv").find("li.fileBoxSelected:visible");
                        } else {
                            if(window.cutCopyOnlyFiles)
                            {
                                checkedFiles = $("#filesListing").find("td.fileTR").parent().find("input.chkBox:visible:checked");
                                if(checkedFiles.length != $("#filesListing").find("input.chkBox:visible:checked").length)
                                    hasDirSelected = true;
                            }
                            else
                                checkedFiles = $("#filesListing").find("input.chkBox:visible:checked");
                        }
                    }
                    if(window.cutCopyOnlyFiles && hasDirSelected)
                    {
                        growl(action, getLocalizationKey("CopyOnlyFilesMessage"), true, 3500);
                    }
                    if (checkedFiles.length == 0 && !elem) {
                        if (flag) {
                            $.growlUI(getLocalizationKey("NothingSelectedGrowlText"), getLocalizationKey("CutNoFilesSelectedMessage"), o.GrowlTimeout, "growlError");
                        } else {
                            $.growlUI(getLocalizationKey("NothingSelectedGrowlText"), getLocalizationKey("CopyNoFilesSelectedMessage"), o.GrowlTimeout, "growlError");
                        }
                        return;
                    }
                    var filesCopied = 0;
                    var directoriesCopied = 0;
                    var stringToCopy = action.toLowerCase();
                    stringToCopy += "\r\n" + _fileName;
                    if (window.listingInfo.selectedEverything) {
                        var listItems = window.curTreeItems;
                        if (window.listingInfo.filtered) {
                            listItems = window.matchedItems;
                        }
                        for (var i = 0; i < listItems.length; i++) {
                            var curItem = listItems[i];
                            var isdir = false;
                            if (curItem.type.toLowerCase() == "dir") {
                                isdir = true;
                                directoriesCopied += 1;
                            } else {
                                filesCopied += 1;
                            }
                            if(window.cutCopyOnlyFiles)
                            {
                                if(!isdir)
                                {
                                    if (stringToCopy.length > 0) {
                                        stringToCopy += "\r\n";
                                    }
                                    stringToCopy += unescape(curItem.root_dir) + unescape(curItem.name) + "/";
                                }
                            }
                            else
                            {
                                if (stringToCopy.length > 0) {
                                    stringToCopy += "\r\n";
                                }
                                stringToCopy += unescape(curItem.root_dir) + unescape(curItem.name) + "/";
                            }
                        }
                    } else {
                        if (elem) {
                            var $curElem = $(elem);
                            if ($curElem.hasClass("fileTR") || $curElem.hasClass("fileThumb")) {
                                filesCopied += 1;
                            } else {
                                if(!window.cutCopyOnlyFiles)
                                    directoriesCopied += 1;
                            }
                        }
                        checkedFiles.each(function () {
                            var parentElem = $(this);
                            if (currentView(basket) != "Thumbnail") {
                                parentElem = $(this).closest("tr");
                            }
                            var filePath = parentElem.find("a").attr("rel");
                            filePath = filePath.replace("//", "/");
                            if (_fileName != filePath) {
                                stringToCopy += "\r\n" + filePath;
                                if (currentView(basket) == "Thumbnail") {
                                    if (parentElem.hasClass("directoryThumb")) {
                                        directoriesCopied += 1;
                                    } else {
                                        filesCopied += 1;
                                    }
                                } else {
                                    if (parentElem.find(".directory").length > 0) {
                                        directoriesCopied += 1;
                                    } else {
                                        filesCopied += 1;
                                    }
                                }
                            }
                        });
                    }
                    var options = {
                        path: '/',
                        expires: 365
                    };
                    $(document).data(o.CookieCopiedFiles, stringToCopy);
                    var msgToShow = getLocalizationKey("CopyActionGrowlText");
                    if (flag) {
                        msgToShow = getLocalizationKey("CutActionGrowlText");
                    }
                    msgToShow = msgToShow.replace("{0}", directoriesCopied);
                    msgToShow = msgToShow.replace("{1}", filesCopied);

                    var title = action;
                    if(action.toLowerCase() == "copy")
                    {
                        title = getLocalizationKey("CopyActionGrowlTitleText")
                    }
                    else{
                        title = getLocalizationKey("CutActionGrowlTitleText")
                    }
                    $.growlUI(title, msgToShow);

                    highlightPasteButton();
                    selectDeselectAllItems(false, false, basket);
                }

                window.fileselectionUpdated = function(basket){
                    if(!window.isUIDNDReady)return;
                    delay(function () {
                        updateLinksOnSelectionChange(basket);
                    }, 500);
                }

                window.updateLinksOnSelectionChange = function(basket){
                    var checkedFiles = {};
                    if(basket)
                    {
                        if (currentView(basket) == "Thumbnail") {
                            checkedFiles = $("#FileBasketList").find("li.fileBoxSelected:visible");
                        } else {
                            checkedFiles = $("#FileBasketList").find("input.chkBox:visible:checked");
                        }
                    }
                    else
                    {
                        if (currentView() == "Thumbnail") {
                            checkedFiles = $("#filesContainerDiv").find("li.fileBoxSelected:visible");
                        } else {
                            checkedFiles = $("#filesListing").find("input.chkBox:visible:checked");
                        }
                    }
                    var pathsSelected = [];
                    if (window.listingInfo.selectedEverything) {
                        var listItems = window.curTreeItems;
                        if (window.listingInfo.filtered) {
                            listItems = window.matchedItems;
                            for (var i = 0; i < listItems.length; i++) {
                                var curItem = listItems[i];
                                if(!pathsSelected.has(curItem.href_path))
                                    pathsSelected.push(curItem.href_path);
                            }
                        }
                        else
                        {
                            pathsSelected = [unescape(hashListener.getHash().toString().replace("#", ""))];
                        }
                    }
                    else
                    {
                        if (currentView(basket) != "Thumbnail") {
                            checkedFiles.each(function () {
                                var parentElem = $(this).closest("tr");
                                var filePath = unescape(parentElem.find("a").attr("rel"));
                                if(!pathsSelected.has(filePath))
                                    pathsSelected.push(filePath);
                            });
                        } else {
                            checkedFiles.each(function () {
                                var parentElem = $(this);
                                var filePath = unescape(parentElem.find("a").attr("rel"));
                                if(!pathsSelected.has(filePath))
                                    pathsSelected.push(filePath);
                            });
                        }
                    }
                    var parentElem;
                    if(basket)
                        parentElem = $("#filesBasket");
                    else
                        parentElem = $("#filesListing");
                    if(pathsSelected.length>0)
                    {
                        var linkURL = unescape(window.location.href.split('#')[0]);
                        var downloadURL = "application/octet-stream:"+window.archiveFileName+":" +linkURL+"?command=downloadAsZip&zipName="+window.archiveFileName+"&path="+crushFTPTools.htmlEncode(pathsSelected.join(":"), false, true) + "[@1]&paths="+crushFTPTools.htmlEncode(pathsSelected.join(":")+"[@2]", false, true)+"&c2f="+crushFTPTools.getCrushAuth();
                        parentElem.find("[data-downloadurl]").each(function() {
                            var oldPath = $(this).attr("data-downloadurl2") || $(this).attr("data-downloadurl");
                            var filePath = crushFTPTools.htmlEncode(unescape($(this).find("a:first").attr("rel")));
                            var url;
                            if(downloadURL.indexOf(filePath)<0)
                                url = downloadURL.replace("[@1]", ":" + filePath).replace("[@2]", ":" + filePath);
                            else
                                url = downloadURL.replace("[@1]", "").replace("[@2]", "");
                            $(this).attr("data-downloadurl", url).attr("data-downloadurl2", oldPath);
                        });
                    }
                    else
                    {
                        parentElem.find("[data-downloadurl]").each(function() {
                            var oldPath = $(this).attr("data-downloadurl2");
                            $(this).attr("data-downloadurl", oldPath).removeAttr("data-downloadurl2");
                        });
                    }
                }


                window.dragAndMove = function(path, draggingInfo, callback)
                {
                    var draggedItems = draggingInfo.items;
                    var draggingNames = draggingInfo.names;
                    var draggingPaths = draggingInfo.paths;
                    var _path = ""
                    try{
                        _path = crushFTPTools.decodeURILocal(path);
                        _path = crushFTPTools.encodeURILocal(unescape(unescape(path)));
                    }
                    catch(ex)
                    {
                        _path = crushFTPTools.encodeURILocal(path);
                    }

                    if(draggedItems[0]=="cut")
                        draggedItems.remove(0);
                    var removedIndexes = [];
                    for (var i = 0; i < draggingPaths.length; i++) {
                        if(draggingPaths[i] == path)
                        {
                            removedIndexes.push(i);
                        }
                    };
                    var fd =[], fn=[], fp=[];
                    if(removedIndexes.length>0)
                    {
                        for (var i = 0; i < draggedItems.length; i++) {
                            if(!removedIndexes.has(i))
                            {
                                fd.push(draggedItems[i]);
                                fn.push(draggingNames[i]);
                                fp.push(draggingPaths[i]);
                            }
                        };
                        draggedItems = fd;
                        draggingNames = fn;
                        draggingPaths = fp;
                    }
                    if(draggedItems.length>0 && draggingNames.length>0)
                    {
                        var obj = {
                            command: "getXMLListing",
                            format: "JSONOBJ",
                            path: _path,
                            random: Math.random()
                        };
                        loading.show(true);
                        obj.c2f = crushFTPTools.getCrushAuth();
                        $.ajax({
                            type: "POST",
                            url: o.ajaxCallURL,
                            data: obj,
                            async: true,
                            dataType: "json",
                            beforeSend: function(x) {
                                if(x && x.overrideMimeType) {
                                    x.overrideMimeType("application/j-son;charset=UTF-8");
                                }
                            },
                            success: function (data) {
                                loading.hide();
                                var filesExist = [];
                                var fileItems = data.listing;
                                for (var i = 0; i < fileItems.length; i++) {
                                    if(draggingNames.has(fileItems[i].name))
                                        filesExist.push(fileItems[i].name);
                                };
                                if(filesExist.length>0)
                                {
                                    var fileExistConfirm = $("#fileExistConfirm");
                                    var list = "";
                                    if(filesExist.length>10)
                                    {
                                        for (var i = 0; i < 10; i++) {
                                            var name = filesExist[i];
                                            list += "<li class='ui-widget ui-corner-all'>" + name + "</li>";
                                        };
                                        var count = filesExist.length - 10;
                                        list += "<li class='ui-priority-primary'>And "+ count + " more...</li>";
                                    }
                                    else
                                    {
                                        for (var i = 0; i < filesExist.length; i++) {
                                            var name = filesExist[i];
                                            list += "<li class='ui-widget ui-corner-all'>" + name + "</li>";
                                        };
                                    }
                                    fileExistConfirm.find("ul").empty().append(list);
                                    fileExistConfirm.dialog({
                                        autoOpen: true,
                                        draggable: true,
                                        width: 500,
                                        dialogClass : "confirmClass",
                                        title : "Confirm :",
                                        modal: true,
                                        buttons: [
                                        {
                                            text : "Stop",
                                            click : function(){
                                                $(this).dialog("close");
                                            }
                                        },
                                        {
                                            text : "Replace",
                                            click : function(){
                                                if(draggedItems[0]!="cut")
                                                    draggedItems.unshift("cut");
                                                window.doPaste(false, path, draggedItems, function(){
                                                    if(callback)
                                                        callback(draggedItems);
                                                });
                                                $(this).dialog("close");
                                            }
                                        },
                                        {
                                            text : "Skip",
                                            click : function(){
                                                var skipIndexes = [];
                                                for (var i = 0; i < filesExist.length; i++) {
                                                    var index = draggingNames.indexOf(filesExist[i]);
                                                    if(index >=0)
                                                        skipIndexes.push(index);
                                                };
                                                var filteredItems = [];
                                                if(skipIndexes.length>0)
                                                {
                                                    for (var i = 0; i < draggedItems.length; i++) {
                                                        if(!skipIndexes.has(i))
                                                            filteredItems.push(draggedItems[i]);
                                                    };
                                                }
                                                draggingInfo.filteredItems = filteredItems;
                                                if(filteredItems[0]!="cut")
                                                    filteredItems.unshift("cut");
                                                if(filteredItems.length>1)
                                                    window.doPaste(false, path, filteredItems, function(){
                                                        if(callback)
                                                            callback(filteredItems);
                                                    });
                                                else
                                                {
                                                    growl("Error :", "Nothing to move.", true, 3500);
                                                }
                                                $(this).dialog("close");
                                            }
                                        }
                                        ],
                                        resizable: false,
                                        open: function() {
                                            $('body').css('overflow','hidden');
                                        },
                                        close: function() {
                                            $('body').css('overflow','auto');
                                        }
                                    });
                                }
                                else
                                {
                                    var arr = draggedItems;
                                    if(arr.length>0 && path)
                                    {
                                        if(arr[0]=="cut")
                                            arr.splice(0,1);
                                        var text = "Moving "+arr.length+" Items To : " + path;
                                        if(arr.length==1)
                                            text = "Moving 1 Item To :" + path;
                                        var list = $("<ul id='dropActionIndication' class='ui-corner-all ui-state-highlight'><li class='ui-priority-primary'>"+text+"</li></ul>");
                                        if(arr.length>8)
                                        {
                                            for (var i = 0; i < 8; i++) {
                                                list.append("<li>"+crushFTPTools.textEncode(arr[i])+"</li>");
                                            };
                                            var count = arr.length - 8;
                                            list.append("<li><strong>And "+ count + " more...</strong></li>");
                                        }
                                        else
                                        {
                                            for (var i = 0; i < arr.length; i++) {
                                                list.append("<li>"+crushFTPTools.textEncode(arr[i])+"</li>");
                                            };
                                        }
                                        list.append("<li style='text-align:right;'><small>Click to dismiss...</small></li>")
                                        $("body").prepend(list);
                                        if(draggedItems[0]!="cut")
                                            draggedItems.unshift("cut");
                                        list.click(function(){
                                            list.slideUp("fast", function(){
                                                list.remove();
                                            });
                                        });
                                        window.doPaste(false, path, draggedItems, function(){
                                            list.slideUp('fast', function() {
                                                list.remove();
                                            });
                                            if(callback)
                                                callback(draggedItems);
                                        });
                                    }
                                }
                            }
                        });
                    }
                    else
                    {
                        growl("Error :", "Nothing to move.", true, 3500);
                    }
                }


                //Paste copied items to target folder
                window.doPaste = function (context, target, draggedItems, callback) {
                    var isDragDrop = false;
                    if(target && draggedItems)
                        isDragDrop = true;
                    var $elem = $("div#pasteFormPanel");
                    var elem = false;
                    var basket = false;
                    if(!isDragDrop)
                    {
                        if (context) {
                            elem = currentContext();
                            if (elem) {
                                var $curElem = $(elem);
                                basket = $curElem.hasClass("contextMenuItem");
                            }
                        }
                        else
                        {
                            var checkedFiles;
                            if (currentView() == "Thumbnail")
                                checkedFiles = $("#filesContainerDiv").find("li.fileBoxSelected:visible");
                            else
                                checkedFiles = $("#filesListing").find("input.chkBox:visible:checked").closest("tr").find("td.columnName");
                            if(checkedFiles.length == 1)
                            {
                                if(checkedFiles.hasClass("directoryThumb") || checkedFiles.hasClass("directory"))
                                    elem = checkedFiles;
                                else
                                {
                                    $.growlUI(getLocalizationKey("PasteFormPasteButtonText"), getLocalizationKey("PasteSelectDirectoryWarning"), o.GrowlTimeout, "growlError");
                                    return false;
                                }
                            }
                            else
                            {
                                if(checkedFiles.length!=0)
                                {
                                    if(checkedFiles.filter(".directory, .directoryThumb").length>1)
                                        $.growlUI(getLocalizationKey("PasteFormPasteButtonText"), getLocalizationKey("PasteSelectSingleDirectoryWarning"), o.GrowlTimeout, "growlError");
                                    else
                                        $.growlUI(getLocalizationKey("PasteFormPasteButtonText"), getLocalizationKey("PasteSelectDirectoryWarning"), o.GrowlTimeout, "growlError");
                                    return false;
                                }
                            }
                        }
                        if (!$(document).data(o.CookieCopiedFiles)) { //If nothing copied
                            $.growlUI(getLocalizationKey("PasteFormPasteButtonText"), getLocalizationKey("PasteFormErrorNothingToPasteText"), o.GrowlTimeout, "growlError");
                            return false;
                        }
                    }

                    //Paste items selected, show form if there's form to show on paste
                    function pasteFiles(hasForm) {
                        if (!validateForm(elem, $("div.pasteForm", "#pasteFormPanel"))) {
                            return false;
                        }
                        $("#pasteFormPanel").find(".closeButton").click();
                        var action = "Paste";
                        var destinationPath = undefined;
                        if(!isDragDrop)
                        {
                            if (elem && !$(elem).hasClass("fileItem") && !$(elem).hasClass("fileThumb")) {
                                if (currentView(basket) != "Thumbnail") {
                                    destinationPath = crushFTPTools.encodeURILocal(unescape($(elem).find("a:first").attr("rel")));
                                } else {
                                    destinationPath = $(elem).find("a:first").attr("rel");
                                }
                            } else if ($(elem).hasClass("directoryThumb") || $(elem).hasClass("directory")) {
                                destinationPath = crushFTPTools.encodeURILocal(unescape(hashListener.getHash().toString().replace("#", "")));
                                destinationPath = destinationPath || "/";
                                destinationPath += $(elem).find("a").text();
                            } else if ($(elem).hasClass("fileItem")) {
                                destinationPath = crushFTPTools.encodeURILocal(unescape($(elem).closest("tr").attr("rootdir")));
                                destinationPath = destinationPath || "/";
                            } else {
                                destinationPath = crushFTPTools.encodeURILocal(unescape(hashListener.getHash().toString().replace("#", "")));
                                if(target)
                                    destinationPath = crushFTPTools.encodeURILocal(target);
                                destinationPath = destinationPath || "/";
                            }
                        }
                        else
                            destinationPath = crushFTPTools.encodeURILocal(target);
                        if(elem && elem.is("#filesListing"))
                        {
                            destinationPath = crushFTPTools.encodeURILocal(unescape(hashListener.getHash().toString().replace("#", "")));
                            destinationPath = destinationPath || "/";
                        }
                        if (destinationPath) { //Target exists in context
                            var loadingIndicator = $("#loadingIndicator");
                            function pasteCallback(response){
                                $('#pasteActionProgress').remove();
                                loadingIndicator.dialog({modal : false, "width" : "150px"});
                                loading.hide();
                                if(isDragDrop)
                                {
                                    loading.init();
                                    loadingIndicator.dialog("option", "modal", false);
                                    loading.hide();
                                    try{
                                        window.disableVtip = false;
                                        if($('.ui-draggable-dragging').length>0)
                                            $('.ui-draggable-dragging').draggable('option', 'revert', true).trigger('mouseup');
                                        $(".uiDragHover").removeClass('uiDragHover');
                                    }catch(e){}
                                }
                                else
                                  $(".mainProcessIndicator").hide();
                                if (response.length > 0) {
                                    if (response.toString().toLowerCase() == "ok") {
                                        if (curAction == "cut") {
                                            if(!isDragDrop)
                                               $(document).removeData(o.CookieCopiedFiles);
                                        }
                                        highlightPasteButton();
                                        var curDestinationPath = crushFTPTools.encodeURILocal(unescape(hashListener.getHash().toString().replace("#", "")));
                                        curDestinationPath = curDestinationPath || "/";
                                        if (curDestinationPath != destinationPath) {
                                            if(!isDragDrop){
                                                var path = escape(unescape(decodeURI(destinationPath)));
                                                setHashLocation(path);
                                            }
                                            else
                                            {
                                                if(callback)
                                                {
                                                    callback();
                                                }
                                            }
                                        } else {
                                            if(!isDragDrop)
                                               $(".refreshButton").click();
                                            else
                                            {
                                                if(callback)
                                                {
                                                    callback();
                                                }
                                            }
                                        }
                                    } else {
                                        if(callback)
                                        {
                                            callback();
                                        }
                                        $.growlUI(getLocalizationKey("PasteFormErrorHeaderText"), getLocalizationKey("PasteFormErrorDetailsText").replace("{0}", response), o.GrowlTimeout, "growlError", o.GrowlWithCloseButton);
                                        $(".refreshButton").click();
                                    }
                                } else {
                                    if (curAction == "cut") {
                                        if(!isDragDrop)
                                            $(document).removeData(o.CookieCopiedFiles);
                                    }
                                    highlightPasteButton();
                                    if(elem && elem.length>0)
                                    {
                                        if($(elem).hasClass("directoryThumb"))
                                            elem.trigger('dblclick');
                                        else
                                            elem.trigger('click');
                                    }
                                    else if(!isDragDrop)
                                        $(".refreshButton").click();
                                }
                                if (currentView(basket) != "Thumbnail") {
                                    $("#filesListing").find("table").removeClass("wait");
                                } else {
                                    $("#filesListing").find("ul").removeClass("wait");
                                }
                            }

                            var pasteStatusTextElem;
                            function startPastePolling(response){
                                var responseText = getActionResponseText(response);
                                if (responseText.length > 0) {
                                    window.isPasteInProgress = true;
                                    function checkPasteStatus(){
                                        $.ajax({
                                            type: "POST",
                                            url: o.ajaxCallURL,
                                            data: "command=paste_status&id="+responseText+"&c2f=" + crushFTPTools.getCrushAuth(),
                                            success: function (response) {
                                                if(window.isPasteInProgress){
                                                    var info = $(response).find("response").text();
                                                    pasteStatusTextElem.text(info);
                                                    if(info.toLowerCase().indexOf("complete")>=0){
                                                        window.isPasteInProgress = false;
                                                        pasteCallback("ok");
                                                    }
                                                    else if(info.toLowerCase().indexOf("error")>=0){
                                                        window.isPasteInProgress = false;
                                                        pasteCallback(info);
                                                    }
                                                    setTimeout(checkPasteStatus, 1000);
                                                }
                                            },
                                            error: function(errResponse, err){
                                                var info = $(errResponse.responseText).find("response").text();
                                                if(info.toLowerCase().indexOf("error")>=0){
                                                    window.isPasteInProgress = false;
                                                    pasteCallback(info);
                                                }
                                                else{
                                                    pasteStatusTextElem.text(info);
                                                    setTimeout(checkPasteStatus, 1000);
                                                }
                                            }
                                        });
                                    }
                                    loading.init();
                                    loadingIndicator.dialog("option", "width", "500px");
                                    loading.show();
                                    loadingIndicator.after('<div id="pasteActionProgress"><span id="pasteStatusText"></span><a id="cancelPasteAction" href="#" style="color: #000;font-size: 11px;text-align: center;display: block;margin-bottom: 10px;">'+ getLocalizationKey("SearchProcessCancelText") +'</a></div>');
                                    pasteStatusTextElem = $("#pasteStatusText");
                                    checkPasteStatus();
                                    $("#cancelPasteAction").unbind().click(
                                        function () {
                                            pasteCallback("cancelled");
                                            window.isPasteInProgress = false;
                                            $.ajax({
                                                type: "POST",
                                                url: o.ajaxCallURL,
                                                data: "command=paste_cancel&id="+responseText+"&c2f=" + crushFTPTools.getCrushAuth(),
                                                success: function (response) {
                                                }
                                            });
                                            return false;
                                        }
                                    );
                                } else {
                                    if(callback)
                                    {
                                        callback();
                                    }
                                    $.growlUI(getLocalizationKey("PasteFormErrorHeaderText"), getLocalizationKey("PasteFormErrorDetailsText").replace("{0}", responseText), o.GrowlTimeout, "growlError", o.GrowlWithCloseButton);
                                    $(".refreshButton").click();
                                }
                            }

                            var copiedItems = $(document).data(o.CookieCopiedFiles); //Items copied
                            var items;
                            if(isDragDrop)
                                items = copiedItems = draggedItems;
                            else
                                items = copiedItems.split("\r\n");
                            if (copiedItems) {
                                var curAction = items[0].toLowerCase();
                                action = items[0].toLowerCase() + "_paste";
                                var fileNames = "";
                                for (var i = 1; i < items.length; i++) {
                                    if (fileNames.length > 0) {
                                        fileNames += "\r\n";
                                    }
                                    fileNames += crushFTPTools.encodeURILocal(unescape(items[i]));
                                }
                                //Build an object to submit to server
                                var obj = {
                                    command: action,
                                    names: fileNames,
                                    destPath: destinationPath,
                                    random: Math.random()
                                };
                                //If has form attach form info
                                if (hasForm) {
                                    var pasteForm = $("div.pasteForm", "#pasteFormPanel");
                                    var formClone = pasteForm.find("form");
                                    pasteForm = serializeForm(formClone[0]);
                                    pasteForm += "&command=" + action + "&names=" + fileNames + "&destPath=" + destinationPath + "&random=" + Math.random()+"&c2f="+crushFTPTools.getCrushAuth();
                                    obj = pasteForm;
                                }
                                if (currentView(basket) != "Thumbnail") {
                                    $("#filesListing").find("table").addClass("wait");
                                } else {
                                    $("#filesListing").find("ul").addClass("wait");
                                }
                                if(isDragDrop)
                                {
                                    loading.show(true);
                                }
                                else
                                    $(".mainProcessIndicator").show();
                                obj.c2f = crushFTPTools.getCrushAuth();
                                $.ajax({
                                    type: "POST",
                                    url: o.ajaxCallURL,
                                    data: obj,
                                    timeout : 10000000,
                                    error: function (XMLHttpRequest, textStatus, errorThrown) {
                                        errorThrown = errorThrown || action + " failed";
                                        $.growlUI("Error : " + errorThrown, errorThrown, o.GrowlTimeout, "", o.GrowlWithCloseButton);
                                    },
                                    success: function (response) {
                                        startPastePolling(response);
                                    },
                                    error: function () {
                                        $(".mainProcessIndicator").hide();
                                        $.growlUI(getLocalizationKey("PasteFormErrorHeaderText"), getLocalizationKey("PasteFormErrorDetailsText").replace("{0}", "Probelm while executing paste command on server"), o.GrowlTimeout, "growlError", o.GrowlWithCloseButton);
                                        $(".refreshButton").click();
                                        if (currentView(basket) != "Thumbnail") {
                                            $("#filesListing").find("table").removeClass("wait");
                                        } else {
                                            $("#filesListing").find("ul").removeClass("wait");
                                        }
                                        if(callback)
                                        {
                                            callback();
                                        }
                                    }
                                });
                            } else {
                                $.growlUI(getLocalizationKey("PasteFormPasteButtonText"), getLocalizationKey("PasteFormErrorNothingToPasteText"), o.GrowlTimeout, "growlError");
                            }
                            return false;
                        }
                    }

                    if ($("#pasteFormPanel").length > 0) {
                        //Get paste from from server, build and show in popup if exists
                        getCustomForm("pasteForm", function (data, hasForm, formName) {
                            if (hasForm) {
                                var pasteForm = $("div.pasteForm", "#pasteFormPanel");
                                pasteForm.html("<form id='frmPasteForm'>" + data + "</form>").find("table").css("text-align", "left");
                                setCustomFormFieldAttributes(pasteForm);
                                attachCalendarPopup(pasteForm);
                                $("button#resetPasteForm", pasteForm).unbind().click(function (event) {
                                    pasteForm.clearForm();
                                    event.stopPropagation();
                                    event.preventDefault();
                                }).val(getLocalizationKey("PasteFormResetButtonText")).text(getLocalizationKey("PasteFormResetButtonText"));
                                $("button.submitForm", pasteForm).unbind().click(function (event) {
                                    event.stopPropagation();
                                    event.preventDefault();
                                    pasteFiles(true);
                                    return false;
                                });
                                pasteForm.find("input").keydown(function (evt) {
                                    var evt = (evt) ? evt : ((event) ? event : null);
                                    if (evt.keyCode == 13) {
                                        $("button.submitForm", pasteForm).click();
                                        return false;
                                    } else if (evt.keyCode == 27) {
                                        $("button#resetPasteForm", pasteForm).click();
                                        return false;
                                    }
                                });
                                $.blockUI({
                                    message: $elem,
                                    css: {
                                        border: 'none',
                                        width: '650px',
                                        padding: '15px',
                                        'border': '1px solid ' + getPopupColor(),
                                        'background-color': getPopupColor(true),
                                        'margin-left': '-320px',
                                        left: '50%',
                                        position: 'absolute',
                                        top: '10%',
                                        '-webkit-border-radius': '10px',
                                        '-moz-border-radius': '10px',
                                        opacity: 1
                                    }
                                });
                            } else {
                                pasteFiles();
                            }
                        }, getLocalizationKey("PasteFormPasteButtonText"));
                    }
                    else {
                        pasteFiles();
                    }
                }

                window.convertVars = function(paths, callback)
                {
                    var obj = {
                        command: "convert_vars",
                        paths: crushFTPTools.encodeURILocal(paths),
                        random: Math.random()
                    };
                    obj.c2f = crushFTPTools.getCrushAuth();
                    $.ajax({
                        type: "POST",
                        url: o.ajaxCallURL,
                        data: obj,
                        success: function (response) {
                            callback(response);
                        }
                    });
                }

                //Download selected items as a zip
                window.downloadAsZip = function (context, isFolder, isBasket, all) {
                    var action = "Zip";
                    var _fileName = "";
                    var elem = {};
                    var checkedFiles = {};
                    var stringToCopy = "";
                    var ItemsToDownload = [];
                    var basket = isBasket || false;
                    if (window.listingInfo.selectedEverything || all) {
                        //If not all items selected, loop through items selected and make a list
                        var listItems = window.curTreeItems;
                        if (window.listingInfo.filtered) {
                            listItems = window.matchedItems;
                        }
                        for (var i = 0; i < listItems.length; i++) {
                            var curItem = listItems[i];
                            /*if (stringToCopy.length > 0) {
                                stringToCopy += "\r\n";
                            }*/
                            var filePath = unescape(curItem.root_dir) + unescape(curItem.name);
                            filePath = filePath.replace("//", "/");
                            if (!ItemsToDownload.has(filePath)) {
                                ItemsToDownload.push(filePath);
                                stringToCopy += ":" + filePath;
                            }
                        }
                    }
                    else {
                        if (!isFolder) {
                            if (context) {
                                elem = currentContext();
                                if(isBasket) elem = context;
                                if (elem) {
                                    var $curElem = $(elem);
                                    _fileName = $curElem.find("a:first").attr("rel");
                                    basket = $curElem.hasClass("contextMenuItem");
                                }
                            }
                            if (currentView(basket) == "Thumbnail") {
                                if(basket)
                                {
                                    checkedFiles = $("#FileBasketList").find("li.fileBoxSelected:visible");
                                }
                                else
                                {
                                    checkedFiles = $("#filesContainerDiv").find("li.fileBoxSelected:visible");
                                }
                            } else {
                                if(basket)
                                {
                                    checkedFiles = $("#FileBasketList").find("input.chkBox:visible:checked");
                                }
                                else
                                {
                                    checkedFiles = $("#filesListing").find("input.chkBox:visible:checked");
                                }
                            }
                            if (_fileName.length > 0) {
                                checkedFiles.push($(elem));
                            }
                        } else {
                            checkedFiles = context;
                        }
                        checkedFiles.each(function () {
                            if (currentView(basket) != "Thumbnail") {
                                var parentElem = $(this).closest("tr");
                                var filePath = unescape(parentElem.find("a").attr("rel"));
                                var dirContext = parentElem.attr("rel");
                                var dirPath = parentElem.parent().find("a[rel='" + dirContext + "']");
                                if (dirPath) {
                                    dirPath = dirPath.closest("tr");
                                    if (dirPath && dirPath.find("input.chkBox").is(":checked")) {
                                        return;
                                    }
                                }
                                filePath = filePath.toString();
                                filePath = filePath.replace("//", "/");
                                filePath = filePath.toString();
                                if (!ItemsToDownload.has(filePath)) {
                                    ItemsToDownload.push(filePath);
                                    stringToCopy += ":" + filePath;
                                }
                            } else {
                                var parentElem = $(this);
                                var filePath = parentElem.find("a").attr("rel");
                                filePath = filePath.toString();
                                var dirContext = parentElem.attr("rel");
                                var dirPath = parentElem.parent().find("a[rel='" + dirContext + "']");
                                if (dirPath) {
                                    if (dirPath && dirPath.hasClass("fileBoxSelected")) {
                                        return;
                                    }
                                }
                                filePath = filePath.replace("//", "/");
                                filePath = filePath.toString();
                                if (!ItemsToDownload.has(filePath)) {
                                    ItemsToDownload.push(filePath);
                                    stringToCopy += ":" + filePath;
                                }
                            }
                        });
                    }
                    if (stringToCopy.length == 0) {//If nothing selected
                        $.growlUI(action, getLocalizationKey("NothingSelectedGrowlText"), o.GrowlTimeout, "growlError");
                    } else {
                        if(window.promptZipNameWhileDownloading)
                        {
                            $("#zipNamePanel").remove();
                            var imgPath = window.defaultImagePath || "/WebInterface/jQuery/images/";
                            var promptTemplate = '<img class="closeButton" alt="close" src="'+imgPath+'cancel.png" onclick="$.unblockUI();"/><h2 class="popupHeader" id="ZipNameWindowHeaderText">' + getLocalizationKey("ZipNameWindowHeaderText") + '</h2><div class="buttonPanel"><div style="width:100%;"><input type="text" placeHolder="'+window.archiveFileName+'" class="zipName" style="width:98%;" /></div><br /><br /><div style="text-align: right; margin-top: 10px;"><button class="cancel-btn" style="margin-left:10px;float:right;">' + getLocalizationKey("ZipNamePanelCancelLinkText") + '</button><button class="ok-btn" style="float:right;">' + getLocalizationKey("ZipNamePanelSaveLinkText") + '</button></div></div>';
                            $("body").append("<div id='zipNamePanel' style='margin:5px 5px 0px -20px;'>" + promptTemplate + "</div>");
                            var $zipNameBox = $("#zipNamePanel").hide();
                            $.blockUI({
                                message: $zipNameBox,
                                css: {
                                    padding: '10px 10px 20px 30px',
                                    'background-color': getPopupColor(true),
                                    'border': "1px solid " + getPopupColor(),
                                    '-webkit-border-radius': '10px',
                                    '-moz-border-radius': '10px',
                                    color: '#000',
                                    opacity: 0.9,
                                    top: 100,
                                    left: '40%',
                                    width: '305px'
                                },
                                onBlock : function()
                                {
                                    $zipNameBox.parent().css("top","200px");
                                    if($("div#filesBasket").dialog("isOpen"))
                                    {
                                        $(".blockOverlay").css("z-index", "1002");
                                        $(".blockMsg").css("z-index", "1003");
                                        $("div#filesBasket").parent().css("z-index", "1001");
                                    }
                                    stickyRelocate();
                                },
                                onUnblock : function()
                                {
                                    if($("div#filesBasket").dialog("isOpen"))
                                    {
                                        $("div#filesBasket").parent().css("z-index", "1003");
                                    }
                                    stickyRelocate();
                                }
                            });
                            var fileName = window.archiveFileName + "";
                            if(window.useParentFolderNamesAsZipName){
                                var curDir = unescape(hashListener.getHash().toString().replace("#", "")).split("/").clean("");
                                if(curDir && curDir.length>0)
                                {
                                    var name = curDir.length>1 ? curDir[curDir.length-2] + "_" + curDir[curDir.length-1] : curDir[0];
                                    name = name.replace(/ /g, '_');
                                    if(name){
                                        fileName = name+".zip";
                                    }
                                }
                                else
                                {
                                    var path = ItemsToDownload[0];
                                    var _path = path.split("/");
                                    _path = _path[_path.length-1];
                                    if(_path.indexOf(".")>0){
                                        _path = _path.split('.');
                                        _path.pop();
                                        fileName = _path.join(".");
                                        fileName = fileName;
                                    }
                                    else
                                    {
                                        fileName = _path;
                                    }
                                    if(fileName.length>22)
                                        fileName = fileName.substring(0, 22);

                                    fileName = fileName + ".zip";
                                }
                            }
                            $zipNameBox.find(".zipName").val(fileName).focus();
                            $zipNameBox.find(".cancel-btn").unbind().click(
                               function () {
                                    $.unblockUI();
                                    $("#syncAppNamePanel").remove();
                                    if($("div#filesBasket").dialog("isOpen"))
                                    {
                                        $("div#filesBasket").parent().css("z-index", "1003");
                                    }
                            });
                            $zipNameBox.find(".ok-btn").unbind().click(
                            function () {
                                var newName = $zipNameBox.find(".zipName").val();
                                if(!newName.toLowerCase().endsWith(".zip"))
                                    newName = newName + ".zip";
                                submitAction({
                                    '#command': "downloadAsZip",
                                    '#zipName' : newName,
                                    '#path': crushFTPTools.encodeURILocal("/"),
                                    '#paths': crushFTPTools.encodeURILocal(unescape(stringToCopy)),
                                    '#random': Math.random()
                                });
                                selectDeselectAllItems(false, false, basket);
                                $.growlUI(getLocalizationKey("DownloadStartedAlertTitleText"), '&nbsp;', o.GrowlTimeout);
                                if($("div#filesBasket").dialog("isOpen"))
                                {
                                    $("div#filesBasket").parent().css("z-index", "1003");
                                }
                            });
                            $zipNameBox.find(".zipName").unbind().keyup(
                            function (evt) {
                                var evt = (evt) ? evt : ((event) ? event : null);
                                if (evt.keyCode == 13) {
                                    $zipNameBox.find(".saveButton").click();
                                    return false;
                                } else if (evt.keyCode == 27) {
                                    $zipNameBox.find(".cancelButton").click();
                                    return false;
                                }
                            });
                        }
                        else
                        {
                            /*window.convertVars(unescape(stringToCopy), function(){
                                //Submit action
                            });*/
                            var params = {
                                '#command': "downloadAsZip",
                                '#path': crushFTPTools.encodeURILocal("/"),
                                '#paths': crushFTPTools.encodeURILocal(unescape(stringToCopy)),
                                '#random': Math.random()
                            };
                            if(window.useParentFolderNamesAsZipName){
                                var curDir = unescape(hashListener.getHash().toString().replace("#", "")).split("/").clean("");
                                if(curDir && curDir.length>0)
                                {
                                    var name = curDir.length>1 ? curDir[curDir.length-2] + "_" + curDir[curDir.length-1] : curDir[0];
                                    name = name.replace(/ /g, '_');
                                    if(name){
                                        params['#zipName'] = name+".zip";
                                    }
                                }
                                else
                                {
                                    var fileName = "";
                                    var path = ItemsToDownload[0];
                                    var _path = path.split("/");
                                    _path = _path[_path.length-1];
                                    if(_path.indexOf(".")>0){
                                        _path = _path.split('.');
                                        _path.pop();
                                        fileName = _path.join(".");
                                    }
                                    else
                                    {
                                        fileName = _path;
                                    }
                                    if(fileName.length>22)
                                        fileName = fileName.substring(0, 22);

                                    params['#zipName'] = fileName+".zip";
                                }
                            }
                            else{
                                var fileName = window.archiveFileName + "";
                                if(fileName.length>22)
                                    fileName = fileName.substring(0, 22);
                                params['#zipName'] = fileName;
                            }
                            submitAction(params);
                            selectDeselectAllItems(false, false, basket);
                            $.growlUI(getLocalizationKey("DownloadStartedAlertTitleText"), '&nbsp;', o.GrowlTimeout);
                        }
                    }
                }

                //Zip selected items on server
                window.zipItems = function(context)
                {
                    window.unzip(context, true);
                }

                window.exploreZip = function(context)
                {
                    var _fileName = "";
                    var elem = false;
                    var basket = false;
                    if (context) {
                        elem = currentContext();
                        if (elem) {
                            var $curElem = $(elem);
                            _fileName = $curElem.find("a:first").attr("rel");
                            basket = $curElem.hasClass("contextMenuItem");
                        }
                    }
                    var checkedFiles = [];
                    if(basket)
                    {
                        if (currentView(basket) == "Thumbnail") {
                            checkedFiles = $("#FileBasketList").find("li.fileBoxSelected:visible");
                        } else {
                            checkedFiles = $("#FileBasketList").find("input.chkBox:visible:checked");
                        }
                    }
                    else
                    {
                        if (currentView() == "Thumbnail") {
                            checkedFiles = $("#filesContainerDiv").find("li.fileBoxSelected:visible");
                        } else {
                            checkedFiles = $("#filesListing").find("input.chkBox:visible:checked");
                        }
                    }
                    var zipFilePath;
                    checkedFiles.each(function () {
                        if(!zipFilePath)
                        {
                            var parentElem = $(this);
                            if (currentView(basket) != "Thumbnail") {
                                parentElem = $(this).closest("tr");
                            }
                            var filePath = unescape(parentElem.find("a").attr("rel"));
                            filePath = unescape(filePath.replace("//", "/"));
                            var ext = getFileExtension(filePath);
                            if(ext == "zip")
                            {
                                zipFilePath = filePath;
                            }
                        }
                    });
                    if(checkedFiles.length==0 || !zipFilePath)
                    {
                        var ext = getFileExtension(_fileName);
                        if(ext == "zip")
                        {
                            zipFilePath = _fileName;
                        }
                    }
                    if((checkedFiles.length == 0 && !elem) || !zipFilePath) {
                        $.growlUI(getLocalizationKey("NothingSelectedGrowlText"), getLocalizationKey("ZipExploreNoFilesSelectedMessage"), o.GrowlTimeout, "growlError");
                        return;
                    }
                    else
                    {
                        if(!zipFilePath.endsWith("/"))
                            zipFilePath = zipFilePath + "/";
                        setHashLocation(zipFilePath);
                    }
                }

                //Unzip selected items on server
                window.unzip = function (context, isZip) {
                    var action = "unzip";
                    var _fileName = "";
                    var elem = false;
                    var basket = false;
                    if (context) {
                        elem = currentContext();
                        if (elem) {
                            var $curElem = $(elem);
                            _fileName = $curElem.find("a:first").attr("rel");
                            basket = $curElem.hasClass("contextMenuItem");
                        }
                    }
                    var checkedFiles = {};
                    if(basket)
                    {
                        if (currentView(basket) == "Thumbnail") {
                            checkedFiles = $("#FileBasketList").find("li.fileBoxSelected:visible");
                        } else {
                            checkedFiles = $("#FileBasketList").find("input.chkBox:visible:checked");
                        }
                    }
                    else
                    {
                        if (currentView() == "Thumbnail") {
                            checkedFiles = $("#filesContainerDiv").find("li.fileBoxSelected:visible");
                        } else {
                            checkedFiles = $("#filesListing").find("input.chkBox:visible:checked");
                        }
                    }
                    if (checkedFiles.length == 0 && !elem) {
                        $.growlUI(getLocalizationKey("NothingSelectedGrowlText"), getLocalizationKey("UnzipNoFilesSelectedMessage"), o.GrowlTimeout, "growlError");
                        return;
                    }
                    var filesCopied = 0;
                    var directoriesCopied = 0;
                    var stringToCopy = _fileName;
                    var _strMsg = stringToCopy;
                    var msgToShow = getLocalizationKey("DeleteConfirmationMessageText");
                    if (window.listingInfo.selectedEverything) {
                        var listItems = window.curTreeItems;
                        if (window.listingInfo.filtered) {
                            listItems = window.matchedItems;
                        }
                        for (var i = 0; i < listItems.length; i++) {
                            var curItem = listItems[i];
                            if (stringToCopy.length > 0) {
                                stringToCopy += "\r\n";
                            }
                            stringToCopy += unescape(curItem.root_dir) + unescape(curItem.name) + "/";
                        }
                        var curDir = "/";
                        if (hashListener.getHash() && hashListener.getHash().toString() != "") {
                            curDir = unescape(hashListener.getHash().toString().replace("#", ""));
                        }
                    } else {
                        if (elem) {
                            var $curElem = $(elem);
                            if ($curElem.hasClass("fileTR") || $curElem.hasClass("fileThumb") || $curElem.hasClass("fileThumb")) {
                                filesCopied += 1;
                            } else {
                                directoriesCopied += 1;
                            }
                        }
                        var notDisplayed = 0;
                        checkedFiles.each(function () {
                            var parentElem = $(this);
                            if (currentView(basket) != "Thumbnail") {
                                parentElem = $(this).closest("tr");
                            }
                            var filePath = unescape(parentElem.find("a").attr("rel"));
                            filePath = unescape(filePath.replace("//", "/"));
                            if (_fileName != filePath) {
                                if (stringToCopy.length > 0) {
                                    stringToCopy += "\r\n";
                                }
                                stringToCopy += (filePath);
                                if (directoriesCopied + filesCopied < 5) {
                                    if (_strMsg.length > 0) {
                                        _strMsg += "\r\n";
                                    }
                                    _strMsg += filePath;
                                } else {
                                    notDisplayed += 1;
                                }
                                if (currentView(basket) != "Thumbnail") {
                                    if (parentElem.find(".directory").length > 0) {
                                        directoriesCopied += 1;
                                    } else {
                                        filesCopied += 1;
                                    }
                                } else {
                                    if (parentElem.hasClass("directoryThumb")) {
                                        directoriesCopied += 1;
                                    } else {
                                        filesCopied += 1;
                                    }
                                }
                            }
                        });
                    }
                    var fileName = stringToCopy;
                    var obj = {
                        command: "unzip",
                        names: crushFTPTools.encodeURILocal(unescape(fileName)),
                        random: Math.random()
                    };
                    if(isZip)
                    {
                        var destinationPath = hashListener.getHash().toString().replace("#", "");
                        destinationPath = destinationPath || "/";
                        obj.command = "zip";
                        obj.path = destinationPath;
                        $.growlUI(getLocalizationKey("ZipStartedAlertTitleText"), getLocalizationKey("ZipStartedAlertDescText"), o.GrowlTimeout);
                    }
                    else
                       $.growlUI(getLocalizationKey("UnzipStartedAlertTitleText"), getLocalizationKey("UnzipStartedAlertDescText"), o.GrowlTimeout);
                    obj.c2f = crushFTPTools.getCrushAuth();
                    $.ajax({
                        type: "POST",
                        url: o.ajaxCallURL,
                        timeout : 10000000,
                        data: obj,
                        success: function (response) {
                            var responseText = getActionResponseText(response);
                            if (responseText.length > 0) {
                                if(isZip)
                                {
                                    $.growlUI("Zip Selected Items : ", responseText, o.GrowlTimeout, false);
                                }
                                else
                                {
                                    $.growlUI(getLocalizationKey("ProblemWhileUnzipGrowlText"), getLocalizationKey("ProblemWhileUnzipDescGrowlText") + responseText, o.GrowlTimeout, "growlError", o.GrowlWithCloseButton);
                                }
                                if(!basket)
                                    $(".refreshButton").click();
                            } else {
                                if(isZip)
                                    $.growlUI(getLocalizationKey("ZipCompletedAlertTitleText"), getLocalizationKey("ZipCompletedAlertDescText"), o.GrowlTimeout);
                                else
                                    $.growlUI(getLocalizationKey("UnzipCompletedAlertTitleText"), getLocalizationKey("UnzipCompletedAlertDescText"), o.GrowlTimeout);

                                $("#filesContainer").find("input.chkBoxAll").removeAttr("checked");
                                if(!basket)
                                    $(".refreshButton").click();
                            }
                        },
                        error: function () {
                            if(isZip)
                            {
                                $.growlUI(getLocalizationKey("ProblemWhileZipGrowlText"), getLocalizationKey("ProblemWhileZipDescGrowlText") + responseText, o.GrowlTimeout, "growlError", o.GrowlWithCloseButton);
                            }
                            else
                            {
                                $.growlUI(getLocalizationKey("ProblemWhileUnzipGrowlText"), getLocalizationKey("ProblemWhileUnzipDescGrowlText") + responseText, o.GrowlTimeout, "growlError", o.GrowlWithCloseButton);
                            }
                            if(!basket)
                                $(".refreshButton").click();
                        }
                    });
                    selectDeselectAllItems(false);
                }

                //Delete selected items
                window.delete_items = function (context) {
                    var action = "delete";
                    var _fileName = "";
                    var elem = false;
                    var basket = false;
                    if (context) {
                        elem = currentContext();
                        if (elem) {
                            var $curElem = $(elem);
                            _fileName = $curElem.find("a:first").attr("rel");
                            basket = $curElem.hasClass("contextMenuItem");
                        }
                    }
                    var checkedFiles = {};
                    if(basket)
                    {
                        if (currentView(basket) == "Thumbnail") {
                            checkedFiles = $("#FileBasketList").find("li.fileBoxSelected:visible");
                        } else {
                            checkedFiles = $("#FileBasketList").find("input.chkBox:visible:checked");
                        }
                    }
                    else
                    {
                        if (currentView() == "Thumbnail") {
                            checkedFiles = $("#filesContainerDiv").find("li.fileBoxSelected:visible");
                        } else {
                            checkedFiles = $("#filesListing").find("input.chkBox:visible:checked");
                        }
                    }

                    if (checkedFiles.length == 0 && !elem) {
                        $.growlUI(getLocalizationKey("NothingSelectedGrowlText"), getLocalizationKey("DeleteNoFilesSelectedMessage"), o.GrowlTimeout, "growlError");
                        return;
                    }
                    var filesCopied = 0;
                    var directoriesCopied = 0;
                    var stringToCopy = _fileName;
                    var _strMsg = stringToCopy;
                    var msgToShow = getLocalizationKey("DeleteConfirmationMessageText");
                    if (window.listingInfo.selectedEverything) {
                        var listItems = window.curTreeItems;
                        if (window.listingInfo.filtered) {
                            listItems = window.matchedItems;
                        }
                        for (var i = 0; i < listItems.length; i++) {
                            var curItem = listItems[i];
                            if (stringToCopy.length > 0) {
                                stringToCopy += "\r\n";
                            }
                            stringToCopy += unescape(curItem.root_dir) + unescape(curItem.name) + "/";
                        }
                        var curDir = "/";
                        if (hashListener.getHash() && hashListener.getHash().toString() != "") {
                            curDir = unescape(hashListener.getHash().toString().replace("#", ""));
                        }
                        msgToShow = getLocalizationKey("DeleteConfirmationMessageRemoveAllItemsInDirText");
                        msgToShow = msgToShow.replace("{folder_name}", curDir);
                        msgToShow = msgToShow.replace("{count}", listItems.length);
                    } else {
                        if (elem) {
                            var $curElem = $(elem);
                            if ($curElem.hasClass("fileTR") || $curElem.hasClass("fileThumb") || $curElem.hasClass("fileThumb")) {
                                filesCopied += 1;
                            } else {
                                directoriesCopied += 1;
                            }
                        }
                        var notDisplayed = 0;
                        checkedFiles.each(function () {
                            var parentElem = $(this);
                            if (currentView(basket) != "Thumbnail") {
                                parentElem = $(this).closest("tr");
                            }
                            var filePath = unescape(parentElem.find("a").attr("rel"));
                            filePath = unescape(filePath.replace("//", "/"));
                            if (unescape(_fileName) != filePath) {
                                if (stringToCopy.length > 0) {
                                    stringToCopy += "\r\n";
                                }
                                stringToCopy += (filePath);
                                if (directoriesCopied + filesCopied < 5) {
                                    if (_strMsg.length > 0) {
                                        _strMsg += "\r\n";
                                    }
                                    _strMsg += filePath;
                                } else {
                                    notDisplayed += 1;
                                }
                                if (currentView(basket) != "Thumbnail") {
                                    if (parentElem.find(".directory").length > 0) {
                                        directoriesCopied += 1;
                                    } else {
                                        filesCopied += 1;
                                    }
                                } else {
                                    if (parentElem.hasClass("directoryThumb")) {
                                        directoriesCopied += 1;
                                    } else {
                                        filesCopied += 1;
                                    }
                                }
                            }
                        });
                        _strMsg = unescape(_strMsg);
                        if (notDisplayed > 0) {
                            _strMsg += "\n\nand " + notDisplayed + " other item(s)";
                        }
                        msgToShow = msgToShow.replace("{0}", directoriesCopied);
                        msgToShow = msgToShow.replace("{1}", filesCopied);
                        msgToShow = msgToShow.replace("{2}", '\n' + _strMsg + '\n\n');
                    }
                    if (confirm(msgToShow)) {
                        var fileName = stringToCopy;
                        var obj = {
                            command: "delete",
                            names: crushFTPTools.encodeURILocal(unescape(fileName)),
                            random: Math.random()
                        };
                        loading.show(true);
                        obj.c2f = crushFTPTools.getCrushAuth();
                        $.ajax({
                            type: "POST",
                            url: o.ajaxCallURL,
                            timeout : 10000000,
                            data: obj,
                            success: function (response) {
                                //_loadingIndicator.dialog({modal : false});
                                loading.hide();
                                var responseText = getActionResponseText(response);
                                if (responseText.length > 0) {
                                    $.growlUI(getLocalizationKey("ProblemWhileDeletingGrowlText"), getLocalizationKey("ProblemWhileDeletingDescGrowlText") + responseText, o.GrowlTimeout, "growlError", o.GrowlWithCloseButton);
                                    $(".refreshButton").click();
                                } else {
                                    $("#filesContainer").find("input.chkBoxAll").removeAttr("checked");
                                    $(".refreshButton").click();
                                    if(basket)
                                    {
                                        if (currentView(basket) != "Thumbnail")
                                        {
                                            checkedFiles.each(function(){
                                                $(this).closest("tr").find(".fileRemoveFromBasketTree").trigger("click");
                                            });
                                        }
                                        else
                                        {
                                            checkedFiles.each(function(){
                                                $(this).find(".fileRemoveFromBasket").trigger("click");
                                            });
                                        }
                                    }
                                }
                            },
                            error: function () {
                                //_loadingIndicator.dialog({modal : false});
                                loading.hide();
                                $.growlUI(getLocalizationKey("ProblemWhileDeletingGrowlText"), getLocalizationKey("ProblemWhileDeletingDescGrowlText"), o.GrowlTimeout, "growlError", o.GrowlWithCloseButton);
                                $(".refreshButton").click();
                            }
                        });
                    }
                    selectDeselectAllItems(false, false, basket);
                }

                window.performDeleteAction = function(path, callback){
                    if(!path)return;
                    var obj = {
                        command: "delete",
                        names: crushFTPTools.encodeURILocal(unescape(path)),
                        random: Math.random()
                    };
                    obj.c2f = crushFTPTools.getCrushAuth();
                    $.ajax({
                        type: "POST",
                        url: o.ajaxCallURL,
                        data: obj,
                        timeout : 10000000,
                        success: function (response) {
                            if(callback)
                                callback();
                        },
                        error: function () {
                            callback(true);
                        }
                    });
                }

                //Create directory
                window.makedir = function (fileName, callback) {
                    fileName = fileName || $("#txtNewFolder").val();
                    fileName = $.trim(fileName);
                    if (fileName.toString().length == 0) {
                        return;
                    }
                    fileName = fileName.replace(/\//g, o.folderNameSpecialCharacterSubstitute).replace(/:/g, o.folderNameSpecialCharacterSubstitute);
                    var filePath = unescape(hashListener.getHash().toString().replace("#", ""));
                    if (filePath.length == 0) {
                        filePath = "/";
                    }
                    if ($("#createFolder").data("parameter")) {
                        var param = $("#createFolder").data("parameter");
                        filePath = param.find("a").attr("rel");
                    }

                    if ($("#createFolder").data("contextElem")) {
                        var param = $("#createFolder").data("contextElem");
                        if(param.hasClass('directory'))
                            filePath = param.find("a").attr("rel");
                        else if(param.hasClass('fileTR'))
                            filePath = param.attr("root_dir");
                        else if(param.hasClass('directoryThumb'))
                            filePath = param.find("a").attr("rel");
                        else if(param.hasClass('fileThumb'))
                            filePath = param.attr("root_dir");
                        filePath = unescape(filePath);
                    }
                    var newFolderName = crushFTPTools.encodeURILocal(filePath + fileName + "/");
                    var obj = {
                        command: "makedir",
                        path: newFolderName,
                        random: Math.random()
                    };
                    obj.c2f = crushFTPTools.getCrushAuth();
                    $.ajax({
                        type: "POST",
                        url: o.ajaxCallURL,
                        data: obj,
                        success: function (response) {
                            var responseText = getActionResponseText(response);
                            if (responseText.length > 0) {
                                if (responseText.toString().toLowerCase() == "ok") {
                                    $(".refreshButton").click();
                                    if(callback)
                                        callback(true);
                                } else {
                                    $.growlUI(getLocalizationKey("ProblemWhileCreatingFolderGrowlText"), getLocalizationKey("ProblemWhileCreatingFolderDescGrowlText") + responseText, o.GrowlTimeout, "growlError", o.GrowlWithCloseButton);
                                    if(callback)
                                        callback(false);
                                }
                            } else {
                                if(callback)
                                {
                                    callback(true);
                                    $(".refreshButton").click();
                                }
                                else
                                {
                                    $.unblockUI();
                                    if ($("#chkNavigateAfterMkdir").is(":checked")) {
                                        newFolderName = escape(crushFTPTools.decodeURILocal(newFolderName));
                                        setHashLocation(newFolderName);
                                    } else {
                                        $(".refreshButton").click();
                                    }
                                }
                            }
                        },
                        error: function () {
                            $.growlUI(getLocalizationKey("ProblemWhileCreatingFolderGrowlText"), getLocalizationKey("ProblemWhileCreatingFolderDescGrowlText"), o.GrowlTimeout, "growlError", o.GrowlWithCloseButton);
                        }
                    });
                }

                //General form field based on data passed
                function generateFormField(data) {
                    var html = '';
                    var randomId = "";
                    var possible = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789";
                    for (var i = 0; i < 5; i++)
                    randomId += possible.charAt(Math.floor(Math.random() * possible.length)); //Generate random Id for field
                    var requiredField = (data.required && XMLValue(data.required[0]) == "true") ? "<span class='requiredField'>*</span>" : "";
                    if (!data.type || (data.type[0].text != 'label' && !data.name)) {
                        return "";
                    }
                    var controlName = "";
                    if(data.name)
                    {
                        controlName = XMLValue(data.name[0]);
                    }
                    switch (data.type[0].text) {
                    case "label":
                        //Generate label, with value
                        var labelL = XMLValue(data.label[0]);
                        var labelR = XMLValue(data.value[0]);
                        var labelName = "label_" + randomId;
                        try{
                            if(data.name && data.name.length>0)
                                labelName = XMLValue(data.name[0]);
                        }catch(ex){
                            labelName = "label_" + randomId;
                        }
                        var loadPage = false;
                        var loadLeft = false;
                        if(labelL.indexOf("{get:")>=0)
                        {
                            var _index = labelL.indexOf("{get:");
                            loadPage = labelL.substring(labelL.indexOf("{get:") + 5, labelL.length);
                            loadPage = loadPage.substring(0, loadPage.indexOf("}"));
                            loadLeft = true;
                        }
                        else if(labelR.indexOf("{get:")>=0)
                        {
                            var _index = labelR.indexOf("{get:");
                            loadPage = labelR.substring(labelR.indexOf("{get:") + 5, labelR.length);
                            loadPage = loadPage.substring(0, loadPage.indexOf("}"));
                        }
                        if(loadPage)
                        {
                            if(labelR.length==0)
                                html = '<tr>' + '<td colspan="2" class="formValFull loadPage" page="'+loadPage+'"><label name="meta_'+labelName+'">' + XMLValue(data.label[0]) + '</label></td><tr>';
                            else
                            {
                                if(loadLeft)
                                    html = '<tr>' + '<td class="formLabel loadPage" page="'+loadPage+'">' + labelL + '</td>' + '<td class="formVal"><label name="meta_'+labelName+'">' + labelR + '</label></td> ' + requiredField + '<tr>';
                                else
                                    html = '<tr>' + '<td class="formLabel">' + labelL + ' ' + requiredField + '</td>' + '<td class="formVal loadPage" page="'+loadPage+'"><label name="meta_'+labelName+'">' + labelR + '</label></td>' + '<tr>';
                            }
                        }
                        else
                        {
                            if(labelR.length==0)
                                html = '<tr>' + '<td colspan="2" class="formValFull"><label name="meta_'+labelName+'">' + XMLValue(data.label[0]) + '</label></td><tr>';
                            else
                                html = '<tr>' + '<td class="formLabel">' + labelL + '</td>' + '<td class="formVal"><label name="meta_'+labelName+'">' + labelR + '</label>' + requiredField + '</td>' + '<tr>';
                        }
                        break;
                    case "text":
                        //Generate input text box, with value and applied size
                        var size = XMLValue(data.size[0]);
                        var maxchars = data.max_chars ? XMLValue(data.max_chars[0]) : "";
                        var dateFieldClass = "";
                        var validateEmail = "";
                        var validatePass = "";
                        var inputType = "text";
                        if (controlName.lastIndexOf("_date1") >= 0) {
                            dateFieldClass = "futureDateField";
                        } else if (controlName.lastIndexOf("_date") >= 0) {
                            dateFieldClass = "dateField";
                        }
                        if (controlName.lastIndexOf("_email") >= 0) {
                            validateEmail = " validateEmail";
                        }
                        if (controlName.lastIndexOf("_password") >= 0) {
                            validatePass = " validatePass";
                            inputType = "password";
                        }
                        var maxlength = size ? size.toString().indexOf("%")>0 ? " style='width:"+size.toString()+";' " : " style='width:"+size.toString().split("px")[0]+"px;' " : "";
                        maxchars = maxchars ? " maxlength='"+maxchars+"' " : "";
                        html = '<tr>' + '<td class="formLabel"><label for="' + XMLValue("meta_" + data.name[0]) + '">' + XMLValue(data.label[0]) + '</label></td>' + '<td class="formVal"><input  type="'+inputType+'"  id="' + "meta_" + controlName + randomId + '" name="' + "meta_" + controlName + '" value="' + XMLValue(data.value[0]) + '" ' + maxlength + maxchars + ' class="required_' + XMLValue(data.required[0]) + ' ' + dateFieldClass + validateEmail + validatePass + '" />' + requiredField + '</td>' + '<tr>';
                        break;
                    case "textarea":
                        //Generate textarea, with value, cols provided
                        var cols = parseInt(XMLValue(data.cols[0]));
                        if (cols > 40) cols = 40;
                        html = '<tr>' + '<td class="formLabel"><label for="' + "meta_" + controlName + '">' + XMLValue(data.label[0]) + '</label></td>' + '<td class="formVal"><textarea id="' + "meta_" + controlName + randomId + '" name="' + "meta_" + controlName + '" cols="' + cols + '" rows="' + XMLValue(data.rows[0]) + '" class="required_' + XMLValue(data.required[0]) + '">' + XMLValue(data.value[0]) + '</textarea>' + ' ' + requiredField + '</td>' + '<tr>';
                        break;
                    case "combo":
                        //Generate dropdown list, with options provided, selected option
                        var options = '';
                        var opts = data.options[0].options_subitem;
                        var itemCount = 0;
                        var optgroupOpen = false;
                        for (var item in opts) {
                            if (typeof opts[item] == "object" || typeof opts[item] == "string") {
                                var selected = itemCount == 0 ? "selected" : "";
                                var curValue = typeof opts[item] == "string" ? opts[item] : opts[item].text;
                                var nameValuePair = [curValue, curValue];
                                if (curValue.indexOf(":") >= 0) {
                                    nameValuePair = curValue.split(":");
                                }
                                var val = extractValString(nameValuePair, 1, extractValString(nameValuePair, 0));
                                if(nameValuePair.length==3 && nameValuePair[2].toLowerCase() == val.toLowerCase())
                                {
                                    selected = "selected";
                                }
                                if(curValue.indexOf("---")==0)
                                {
                                    if(optgroupOpen)
                                    {
                                        options += '</optgroup>';
                                    }
                                    options += '<optgroup label="' + curValue.replace("---","") + '">';
                                    optgroupOpen = true;
                                }
                                else
                                    options += '<option ' + selected + ' value="' + extractValString(nameValuePair, 1, extractValString(nameValuePair, 0)) + '">' + nameValuePair[0] + '</option>';
                                itemCount++;
                            }
                        }
                        if(optgroupOpen)
                        {
                            options += '</optgroup>';
                        }
                        html = '<tr>' + '<td class="formLabel"><label for="' + "meta_" + controlName + '">' + XMLValue(data.label[0])+ '</label></td class="formVal">' + '<td><select id="' + "meta_" + controlName + randomId + '" name="' + "meta_" + controlName + '" class=" required_' + XMLValue(data.required[0]) + '">' + options + '</select>' + ' ' + requiredField + '</td>' + '<tr>';
                        break;
                    case "checkbox":
                        //Generate checkboxes, with value and default selection
                        var options = '';
                        var opts = data.options[0].options_subitem;
                        for (var item in opts) {
                            if (typeof (opts[item]) != "function") {
                                var selected = ""; //item == 0 ? "checked" : "";
                                var nameValuePair = " : ";
                                if (opts[item].text) {
                                    nameValuePair = opts[item].text.split(":");
                                }
                                var val = extractValString(nameValuePair, 2, extractValString(nameValuePair, 0)).split(",");
                                if(nameValuePair.length==3 && val.has(extractValString(nameValuePair, 1, extractValString(nameValuePair, 0))))
                                {
                                    selected = "checked";
                                }
                                options += '<span class="chkBoxPanel"><input class="chkbox required_' + XMLValue(data.required[0]) + '" type="checkbox" id="' + "meta_" + controlName + '"  ' + selected + ' name="' + "meta_" + controlName + '"  value="' + extractValString(nameValuePair, 1, extractValString(nameValuePair, 0)) + '">' + nameValuePair[0] + '</input></span>';
                            }
                        }
                        html = '<tr>' + '<td class="formLabel"><label for="' + "meta_" + controlName + randomId + '">' + XMLValue(data.label[0]) + '</label></td>' + '<td class="formVal">' + options + ' ' + requiredField+'</td>' + '<tr>';
                        break;
                    case "tags":
                        //Generate checkboxes, with value and default selection
                        var options = '';
                        var opts = data.options[0].options_subitem;
                        var itemCount = 0;
                        var optgroupOpen = false;
                        for (var item in opts) {
                            if (typeof opts[item] == "object" || typeof opts[item] == "string") {
                                var selected = "";
                                var curValue = typeof opts[item] == "string" ? opts[item] : opts[item].text;
                                var nameValuePair = " : ";
                                if (opts[item].text) {
                                    nameValuePair = opts[item].text.split(":");
                                }
                                var val = extractValString(nameValuePair, 2, extractValString(nameValuePair, 0)).split(",");
                                if(nameValuePair.length==3 && val.has(extractValString(nameValuePair, 1, extractValString(nameValuePair, 0))))
                                {
                                    selected = "selected";
                                }
                                if(curValue.indexOf("---")==0)
                                {
                                    if(optgroupOpen)
                                    {
                                        options += '</optgroup>';
                                    }
                                    options += '<optgroup label="' + curValue.replace("---","") + '">';
                                    optgroupOpen = true;
                                }
                                else
                                    options += '<option ' + selected + ' value="' + extractValString(nameValuePair, 1, extractValString(nameValuePair, 0)) + '">' + nameValuePair[0] + '</option>';
                                itemCount++;
                            }
                        }
                        if(optgroupOpen)
                        {
                            options += '</optgroup>';
                        }
                        html = '<tr>' + '<td class="formLabel"><label for="' + "meta_" + controlName + '">' + XMLValue(data.label[0])+ '</label></td class="formVal">' + '<td><select style="width:250px;" multiple id="' + "meta_" + controlName + randomId + '" name="' + "meta_" + controlName + '" class="chosen required_' + XMLValue(data.required[0]) + '">' + options + '</select>' + ' ' + requiredField + '</td>' + '<tr>';
                        break;
                    case "radio":
                        //Generate radio buttons, with value and default selection
                        var options = '';
                        var opts = data.options[0].options_subitem;
                        var item = 0;
                        for (var item in opts) {
                            if (opts[item].text) {
                                var selected = item == 0 ? "checked" : "";
                                var nameValuePair = opts[item].text.split(":");
                                var val = extractValString(nameValuePair, 2, extractValString(nameValuePair, 0)).split(",");
                                if(nameValuePair.length==3 && val.has(extractValString(nameValuePair, 1, extractValString(nameValuePair, 0))))
                                {
                                    selected = "checked";
                                }
                                options += '<input type="radio" id="' + "meta_" + controlName + randomId + '" ' + selected + ' name="' + "meta_" + controlName + '"  value="' + extractValString(nameValuePair, 1, extractValString(nameValuePair, 0)) + '">' + nameValuePair[0] + '</input>';
                                item++;
                            }
                        }
                        html = '<tr>' + '<td class="formLabel"><label for="' + "meta_" + controlName + '">' + XMLValue(data.label[0]) + '</label></td>' + '<td class="formVal">' + options + ' ' + requiredField+'</td>' + '<tr>';
                        break;
                    default:
                        break;
                    }
                    return html; //Return current field
                }

                //Extract value from XML string
                function extractValString(item, index, rep) {
                    if (item.length >= index && item[index] && item[index].toString() != "undefined") {
                        return item[index];
                    } else {
                        return rep || "";
                    }
                }

                //Get XML text from an element
                function XMLValue(val) {
                    if (val && val.text) {
                        return val.text;
                    } else {
                        return "";
                    }
                }

                //Perform applet command
                function submitApplet(signed, command, destinationPath, progressBar, callback) {
                    crushFTPTools.getCrushAuthToken(function(token){
                        runAppletCommand(signed, "COMMAND=AUTH:::CRUSHAUTH=" + token);
                        runAppletCommand(signed, command);
                        if (progressBar) {
                            appletProgress(progressBar, "", callback); //Update progressbar by applet progress
                        }
                    });
                }

                //Listen progress of applet
                function appletProgress(progressBar, fileName, callback) {
                    var operationType = "UPLOAD";
                    var key = "";
                    if (progressBar.attr("rel")) {
                        operationType = progressBar.attr("rel");
                        if (operationType == "DOWNLOAD") { //If download
                            key = ":::UNIQUE_KEY=" + progressBar.parent().attr("uid");
                        }
                    }
                    var result = runAppletCommand(true, "COMMAND=ACTION:::TYPE=" + operationType + ":::ACTION=STATUS" + key);
                    var o = parseJavaProps(result);
                    if(typeof o.status == "string" && o.status.length == 0)
                    {
                        o.status = " ";
                    }
                    /* added by carlos */
                    if(o.ask == "true")
                    {
                        $('#ask_responseDownload_uid').val(o.uid);
                        $('#ask_responseDownload_uniqueId').val(progressBar.parent().attr("uid"));
                        var timestamp = (parseInt(o.modified) / 1000);
                        var d = new Date(0);
                        d.setSeconds(timestamp);
                        var formatted = d.format("mm/dd/yyyy - hh:nn:ss");
                        var path = o.path;
                        var fullFileName;
                        while( path.indexOf("\\") !== -1 ){
                          path = path.replace("\\", "/");
                        }
                        fullFileName = path.split("/").pop();
                        $('#ask_infoDownload').html('<div style="float: left; font-weight: bold; width: 20%; margin-bottom: 7px">Filename:</div><div style="float: left; font-weight: normal; width: 80%;">'+crushFTPTools.limitText(fullFileName, 50)+'</div><div style="clear: both"></div><div style="float: left; font-weight: bold; width: 20%; margin-bottom: 7px">Path:</div><div style="float: left; font-weight: normal; width: 80%;">'+crushFTPTools.limitText(path.replace(fullFileName, ''), 50)+'</div><div style="clear: both"></div><div style="float: left; font-weight: bold; width: 20%; margin-bottom: 7px">Modified:</div><div style="float: left; font-weight: normal; width: 80%;">'+crushFTPTools.limitText(formatted, 50)+'</div><div style="clear: both"></div><div style="float: left; font-weight: bold; width: 20%; margin-bottom: 7px">Size:</div><div style="float: left; font-weight: normal; width: 80%;">'+$.CrushFTP.formatFileSize(o.size)+'</div><div style="clear: both"></div>');
                        $("#askDialogDownload").dialog({title:'Please confirm your action for the file:'}).dialog('open');
                        //return;
                    }
                    /* end */
                    if (!o || !o.status || o.status.toUpperCase().indexOf("CANCELLED:") == 0)
                    {
                        //If file upload/download is cancelled
                        return;
                    }
                    var transferedItems = parseInt(o.transferedItems);
                    var curItems = transferedItems + 1;
                    var totalItems = parseInt(o.totalItems);
                    if (curItems > totalItems) curItems = totalItems;
                    updateProgressBar(o.transferedBytes * 1, o.totalBytes * 1, progressBar, fileName, callback, appletProgress, o.status); //Update progressbar
                    if ($(progressBar).hasClass("paused") == false) {
                        //If its still under progress ie. not cancelled or paused
                        var $buttons = $(progressBar).parent().find(".appletActionButtons");
                        $buttons.find(".filesProcessed").remove();
                        var statusText = progressBar.attr("type") && progressBar.attr("type") == ("download") ? " " + getLocalizationKey("advancedOperationsDownloadStatus") : " " + getLocalizationKey("advancedOperationsUploadStatus");
                        var uploadingFilesStatusText = getLocalizationKey("BrowserUploaderAdvancedUploadingFilesStatusText");
                        uploadingFilesStatusText = uploadingFilesStatusText.replace("{0}", curItems);
                        uploadingFilesStatusText = uploadingFilesStatusText.replace("{1}", o.totalItems);
                        $buttons.prepend("<div class='filesProcessed'>" + statusText + " " + uploadingFilesStatusText + ".</div>");
                        $(progressBar).after("<div class='status'>" + o.status + "</div>"); //information from the applet, current status
                    }
                }

                //Submit form to the server, This is only for native file uploads
                function submitForm(uploadPopup, forms, i, auto) {
                    if (forms.length > i && $(forms[i]) && $(forms[i]).attr("id")) {
                        var $form = $(forms[i]);
                        var filelist = uploadPopup.find("li[rel='" + $(forms[i]).attr("id") + "']");
                        if (filelist.length > 0 && $form.attr("rel") != "processed") {
                            //Build a progressbar and update list item
                            filelist.find(".uploadCancel,.progressBar,.appletActionButtons").remove();
                            filelist.find("span").replaceWith("<div class='progressBar'></div>");
                            var progressBar = filelist.find("div.progressBar");
                            var destinationPath = unescape(filelist.data("fileDetails").path);
                            $form.find("input[name='uploadPath']").val(destinationPath);
                            progressBar.progressbar({
                                value: 0
                            }).after("<span class='uploadCancel pointer'>" + getLocalizationKey("BrowserUploaderSelectedFileCancelLinkText") + "</span>");
                            progressBar.after("<div class='uploadPath'>" + getLocalizationKey("BrowserUploaderAdvancedUploadingFilesToText") + destinationPath + "</div>");
                            filelist.find(".uploadCancel").unbind().click(function () {
                                $("#" + $form.attr("target")).attr("src", "javascript:false;");
                                reportFileCompleted(progressBar, filelist.find("label").text(), function () {}, true);
                            });
                            $form.prepend($("table.customForm", "#divUploadPanel"));
                            var table = $form.find("table");
                            var disabled = $form.find(":disabled").removeAttr("disabled");
                            $form.submit();
                            disabled.attr("disabled", "disabled");
                            $("#divUploadPanel").append(table);
                            $form.attr("rel", "processed");
                            if (!$(document).data("filesInProgress")) {
                                $(document).data("filesInProgress", 0);
                            }
                            var filesInProgress = $(document).data("filesInProgress");
                            $(document).data("filesInProgress", filesInProgress + 1);
                            $("#browserFileUpload").find("h2").addClass("spinner");
                            if (!$("#browserFileUpload").is(":visible")) {
                                $("ul.topnav").find("a[href='javascript:browserUploader();'], a[href='javascript:performAction(\'upload\');']").addClass("bouncing_loader");
                            }
                            $("div.customtabs").find("a[rel='divUploadPanel']").addClass("disabledClick").addClass("padlock");
                            setTimeout(function () {
                                if (auto) {
                                    checkProgress(filelist.find("div.progressBar"), $form.find("input[type='file']").attr("name"), function () {
                                        startUploading(true);
                                    });
                                } else {
                                    checkProgress(filelist.find("div.progressBar"), $form.find("input[type='file']").attr("name"), function () {
                                        submitForm(uploadPopup, forms, i + 1);
                                    });
                                }
                            }, 500);
                        } else {
                            submitForm(uploadPopup, forms, i + 1); //Next item to upload
                        }
                    } else {
                        try {
                            uploadsComplete();
                        } catch (e) {}
                        $(".refreshButton").click();
                        return false;
                    }
                }

                //Update progressbar based on current file upload/download progress
                function updateProgressBar(part1, part2, progressBar, fileName, callback, nextCheckFunction, status) {
                    var now = new Date().getTime();
                    if (!$(progressBar).data("history")) $(progressBar).data("history", new Array());
                    //calculate speeds using a rolling 10 interval window.  This provides a smoother speed calculation that doesn't bounce around so much to make the user concerned
                    var history = $(progressBar).data("history");//Progressbar data history
                    var currentSpeed = $(progressBar).data("currentSpeed");//Current upload/download speed
                    var speedHistory = $(progressBar).data("speedHistory") || [];
                    /*if (history.length > 30) {
                        while (history.length > 25) history.pop();
                    }*/
                    history.push({
                        now: now,
                        bytes: part1
                    });
                    if (history.length > 1 && $(progressBar).hasClass("paused") == false) {//Calculation and updating progressbar. Calculation of speed, percentages etc.
                        var pivot = 0; //If history is for less than 5 seconds, use data of first second
                        if (history.length > 5) {
                            pivot = history.length - 5; // Set pivot to be of previous five second
                        }
                        var elapsed = now - history[0].now; // Time elapsed
                        var bytes = part1 - history[pivot].bytes; // Bytes transferred in timeframe
                        var lastElapsed = now - history[pivot].now;// Elapsed time for last transfer timeframe
                        var originalBytes = part1 - history[0].bytes; // total bytes transferred
                        var secs = ((((part2 - part1) / (originalBytes / elapsed)) / 1000) + 1) + ""; // total time remaining
                        var remaining = formatTime(secs);//formatted time
                        var percentDone = (part1 / part2) * 100.0;// percentages completed
                        var rElapsed = formatTime((elapsed / 1000) + 1 + "");// elapsed time formatted
                        var speed = "";
                        var currentActualSpeed = 0;
                        if ((originalBytes / elapsed) == 0) {// Still Calculating
                            speed = getLocalizationKey("BrowserUploaderSpeedTimeCalculatingText");
                            remaining = getLocalizationKey("BrowserUploaderSpeedTimeCalculatingText");
                            $(progressBar).data("currentSpeed", speed);
                        } else {
                            currentActualSpeed = (bytes / lastElapsed) * 1024.0;
                            speed = formatBytes(currentActualSpeed) + "/s";// Based on data transferred in last timeframe (5 secs)
                            $(progressBar).data("currentSpeed", speed);
                        }
                        var uploadedSize = formatBytes(part1);
                        var originalSize = formatBytes(part2);
                        $(progressBar).data("originalSize", originalSize);
                        $(progressBar).parent().find(".time,.speed,.status,.uploadStatusLabel").remove();
                        $(progressBar).prepend('<span class="uploadStatusLabel">' + uploadedSize + ' of ' + originalSize + '</span>');
                        var timeStampLabel = getLocalizationKey("BrowserUploaderAdvancedUploadingTimeText");
                        timeStampLabel = timeStampLabel.replace("{0}", rElapsed);
                        timeStampLabel = timeStampLabel.replace("{1}", remaining);
                        $(progressBar).after(timeStampLabel);
                        if(elapsed/1000 >= 20)
                        {
                            speedHistory.push(currentActualSpeed);
                            $(progressBar).data("speedHistory", speedHistory);
                            function getAverageSpeed()
                            {
                                if(speedHistory.length>30)
                                {
                                    while (speedHistory.length > 30) speedHistory.shift();
                                }
                                var avgSpeed = speedHistory.average();
                                if(avgSpeed>0)
                                {
                                    return getLocalizationKey("BrowserUploaderAdvancedUploadingAverageSpeedText") + formatBytes(avgSpeed) + "/s , ";
                                }
                                else
                                    return "";
                            }
                            $(progressBar).after("<div class='speed'>" + getAverageSpeed() + getLocalizationKey("BrowserUploaderAdvancedUploadingSpeedText") + speed + "</div>");
                        }
                        else
                        {
                            $(progressBar).after("<div class='speed'>" + getLocalizationKey("BrowserUploaderAdvancedUploadingSpeedText") + speed + "</div>");
                        }
                        $(progressBar).progressbar("option", "value", percentDone);
                        var type = progressBar.attr("type") || "";
                        if(type != "download")
                        {
                            if($(progressBar).closest("#progressPanel").length == 0)
                            {
                                $("#progressPanel").append($(progressBar).parent());
                            }
                        }
                    }
                    if (status && status.indexOf("ERROR:") >= 0) { //If error in transmitting file
                        reportFileCompleted(progressBar, fileName, callback, false, false, true, getLocalizationKey("BrowserUploaderProblemWhileTransferMsgText") +" : " + status);
                        return false;
                    }
                    if (part1 < part2)
                    {
                        setTimeout(function () {//Call next function after a second
                            nextCheckFunction(progressBar, fileName, callback);
                        }, 1000);
                    }
                    else {
                        if (status && status.indexOf("ERROR") >= 0) {
                            //If error while upload/download
                            reportFileCompleted(progressBar, fileName, callback, false, false, true, getLocalizationKey("BrowserUploaderProblemWhileTransferMsgText") + " : " + status);
                        } else {
                            //If file upload/download completed
                            reportFileCompleted(progressBar, fileName, callback);
                        }
                    }
                }

                //Check progress of current file
                function checkProgress(progressBar, fileName, callback) {
                    if ((progressBar.parent() && progressBar.parent().length == 0) || !progressBar.parent()) {
                        return false;
                    }
                    //Ajax call to get update of current file
                    $.ajax({
                        type: "POST",
                        url: o.ajaxCallURL,
                        data: "command=getUploadStatus&itemName=" + crushFTPTools.encodeURILocal(fileName) + "&c2f=" + crushFTPTools.getCrushAuth(),
                        success: function (response) {
                            var responseData = response;
                            if (responseData == null) responseData = "";
                            responseData = getActionResponseText(responseData);
                            responseData = jQuery.trim(responseData.toString());
                            if (responseData.indexOf("PROGRESS:") >= 0) {
                                part1 = responseData.substring("PROGRESS:".length, responseData.indexOf("/"));
                                part2 = responseData.substring(responseData.indexOf("/") + 1, responseData.indexOf(";"));
                                part1 = part1 * 1;
                                part2 = part2 * 1;
                                updateProgressBar(part1, part2, progressBar, fileName, callback, checkProgress);
                            } else if (responseData.indexOf("DONE:") >= 0) {
                                reportFileCompleted(progressBar, fileName, callback);
                            } else if (responseData == "null" || responseData == "") { //too quick, upload hasn't started up yet.
                                updateProgressBar(0, 1, progressBar, fileName, callback, checkProgress);
                            } else if (responseData.indexOf("ERROR:") >= 0) {
                                reportFileCompleted(progressBar, fileName, callback, false, false, true, responseData);
                            } else {
                                reportFileCompleted(progressBar, fileName, callback, false, false, true, "ERROR:" + responseData);
                            }
                        },
                        complete: function (responseData) {},
                        error: function (XMLHttpRequest, textStatus, errorThrown) {
                            $(progressBar).parent().find(".time,.speed").remove();
                            progressBar.replaceWith("[<span class='error'>"+getLocalizationKey("BrowserUploaderProblemWhileTransferMsgText")+"</span>]");
                            reportFileCompleted(progressBar, fileName, callback, false, true, true);
                        }
                    });
                }

                //Report file completed, update all events and details of current file
                function reportFileCompleted(progressBar, fileName, callback, cancelled, wasInWaiting, error, errorMsg) {
                    var wasNotInWaiting = (!wasInWaiting);
                    if (!$(document).data("filesInProgress")) {
                        $(document).data("filesInProgress", 0);
                    }
                    var filesInProgress = $(document).data("filesInProgress");
                    if (filesInProgress > 0 && wasNotInWaiting) {
                        $(document).data("filesInProgress", filesInProgress - 1);
                    }
                    if (filesInProgress == 1) {
                        $("#browserFileUpload").find("h2").removeClass("spinner");
                        $("ul.topnav").find("a[href='javascript:browserUploader();'], a[href='javascript:performAction(\'upload\');']").removeClass("bouncing_loader");
                        $("div.customtabs").find("a[rel='divUploadPanel']").removeClass("disabledClick").removeClass("padlock");
                    }
                    var originalSize = $(progressBar).data("originalSize");
                    originalSize = originalSize || "";
                    originalSize += " ";
                    var parentElm = $(progressBar).parent();
                    var elapsed = progressBar.parent().find(".elapsed").text();
                    parentElm.find(".uploadPath").each(function () {
                        if (cancelled) { //If upload cancelled
                            $(this).text($(this).text().replace(/Uploading/g, getLocalizationKey("BrowserUploaderCancelledUploadMsgText")));
                            progressBar.parent().find(".time,.speed,.status").remove();
                        } else if (error) { //If an error has occured
                            $(this).text(errorMsg);
                            $.growlUI("Error", errorMsg, o.GrowlTimeout, "growlError", o.GrowlWithCloseButton);
                        } else { //else update details
                            $(this).text($(this).text().replace(/Uploading/g, originalSize + "Uploaded"));
                            elapsed = elapsed || "0 secs";
                            $(this).append(" in " + elapsed);
                        }
                    });
                    parentElm.find(".uploadCancel,.appletActionButtons").remove();
                    if ($(progressBar).attr("rel")) { //Download
                        if (cancelled) { //If download cancelled
                            parentElm.prepend("[Download Cancelled] <span class='uploadCancel completed pointer'>" + getLocalizationKey("BrowserUploaderSelectedFileDismissLinkText") + "</span> ");
                            parentElm.find("span.uploadCancel").wrap("<div class='appletActionButtons'></div>");
                            parentElm.find("span.uploadCancel").before(" <span class='redownload pointer'>" + getLocalizationKey("BrowserUploaderSelectedFileReDownloadLinkText") + "</span> ");
                            parentElm.find(".status").remove();
                            $(progressBar).hide();
                        } else if (error) { //If error has occured
                            parentElm.prepend("Error : " + errorMsg);
                            $(progressBar).hide();
                            $.growlUI("Error", errorMsg, o.GrowlTimeout, "growlError", o.GrowlWithCloseButton);
                        } else { //Else update details
                            $(progressBar).replaceWith(getLocalizationKey("DownloadCompletedText") + " " + originalSize + getLocalizationKey("DownloadCompletedPathText") + " " + $(progressBar).attr("path") + " <span class='uploadCancel completed pointer'>" + getLocalizationKey("BrowserUploaderSelectedFileDismissLinkText") + "</span>");
                            parentElm.find("span.uploadCancel").wrap("<div class='appletActionButtons'></div>").parent();
                            parentElm.find("span.uploadCancel").before(" <span class='redownload pointer'>" + getLocalizationKey("BrowserUploaderSelectedFileReDownloadLinkText") + "</span> ");
                            if (callback) {
                                callback();
                            }
                        }
                        //Upload cancel button event
                        parentElm.find("span.uploadCancel").click(function () {
                            $(this).closest("li").remove();
                        });
                        //re-upload/download link event
                        parentElm.find("span.redownload").click(function () {
                            handleFileSelectToDownload(false, false, parentElm);
                        });
                        parentElm.addClass("uploaded");
                        parentElm.find(".speed,.remained").remove();
                    } else { //Upload
                        if($(progressBar).closest("#progressPanel").length>0)
                        {
                            $("ul.filesSelected").find('li[rel="' + $(progressBar).parent().attr("rel") + '"]').append($(progressBar).parent());
                        }
                        if (cancelled) {//If cancelled
                            $(progressBar).parent().find(".time,.speed,.status").remove();
                            $(progressBar).replaceWith("[Cancelled] <span class='uploadCancel completed pointer'>" + getLocalizationKey("BrowserUploaderSelectedFileDismissLinkText") + "</span>");
                        } else if (error) {//If an error occured
                            $(progressBar).replaceWith("[ERROR] <span class='uploadCancel completed pointer'>" + getLocalizationKey("BrowserUploaderSelectedFileDismissLinkText") + "</span>");
                        } else {//Else update status
                            $(progressBar).parent().find(".status").html("");
                            $(progressBar).replaceWith("[" + getLocalizationKey("BrowserUploaderSelectedFileDoneText") + "] <span class='uploadCancel completed pointer'>" + getLocalizationKey("BrowserUploaderSelectedFileDismissLinkText") + "</span>");
                        }
                        parentElm.find("span.uploadCancel").wrap("<div class='appletActionButtons'></div>").parent().prepend("<span class='reupload pointer'>" + getLocalizationKey("BrowserUploaderSelectedFileReUploadLinkText") + "</span>");
                        //Re-upload link event
                        parentElm.find("span.reupload").click(function () {
                            var listItem = $(this).closest("li");
                            var itemsToReUpload = listItem.data("filesData");
                            if (itemsToReUpload) {
                                startUploading(true, true, itemsToReUpload, listItem); //Start upload again with items to reupload
                            } else {
                                $("#" + listItem.attr("rel")).removeAttr("rel");
                                var dataOfFile = listItem.data("fileDetails");
                                var $parentElem = listItem.parent();
                                listItem.replaceWith('<li rel="' + listItem.attr("rel") + '"><label>' + dataOfFile.filename + '</label> <div class="progressPanel" rel="' + listItem.attr("rel") + '"> | ' + getLocalizationKey("BrowserUploaderSelectedFileWillBeUploadedText") + ' " ' + dataOfFile.path + '" <span>[<span class="error pointer">' + getLocalizationKey("BrowserUploaderSelectedFileRemoveLinkText") + '</span>]</span></div></li>').find("span.error").unbind().click(function () {
                                    $(this).closest("li").remove();
                                    return true;
                                });
                                listItem = $parentElem.find("li[rel='" + listItem.attr("rel") + "']");
                                listItem.data("fileDetails", dataOfFile);
                                startUploading();
                            }
                        });
                        parentElm.find(".uploadPath").after(parentElm.find("div.appletActionButtons"));
                        parentElm.find("span.uploadCancel").click(function () {
                            $(this).closest("li").remove();
                        });
                        parentElm.addClass("uploaded");
                        parentElm.find(".speed,.remained").remove();
                        if (!cancelled && !error) {
                            if (callback) {
                                callback();
                            }
                        }
                    }
                }

                //Format bytes to make it more readable
                function formatBytes(bytes, multiply) {
                    if((!bytes || bytes<0) && !multiply) return "*";
                    if(multiply)
                        bytes = bytes*multiply;
                    bytes = parseFloat(bytes);
                    if ((bytes / 1024).toFixed(0) == 0) return bytes.toFixed(1) + " " + getLocalizationKey("dataByClassFormatBytes");
                    else if ((bytes / 1024 / 1024).toFixed(0) == 0) return (bytes / 1024).toFixed(1) + " "  + getLocalizationKey("dataByClassFormatKiloBytes");
                    else if ((bytes / 1024 / 1024 / 1024).toFixed(0) == 0) return (bytes / 1024 / 1024).toFixed(1) + " "  + getLocalizationKey("dataByClassFormatMegaBytes");
                    else if ((bytes / 1024 / 1024 / 1024 / 1024).toFixed(0) == 0) return (bytes / 1024 / 1024 / 1024).toFixed(1) + " " + getLocalizationKey("dataByClassFormatGigaBytes");
                    else if ((bytes / 1024 / 1024 / 1024 / 1024 / 1024).toFixed(0) == 0) return (bytes / 1024 / 1024 / 1024 / 1024).toFixed(1) + " " + getLocalizationKey("dataByClassFormatTeraBytes");
                }

                //Format bytes to make it more readable
                function formatBytesDynamic(bytes) {
                    if(!bytes || bytes<0) return "*";
                    bytes = parseFloat(bytes);
                    if ((bytes / 1024).toFixed(0) == 0) return bytes.toFixed(1).toString() + " <span class='dataByClassFormatBytes'>" + getLocalizationKey("dataByClassFormatBytes") + "</span>";
                    else if ((bytes / 1024 / 1024).toFixed(0) == 0) return (bytes / 1024).toFixed(1).toString() + " <span class='dataByClassFormatKiloBytes'>"  + getLocalizationKey("dataByClassFormatKiloBytes") + "</span>";
                    else if ((bytes / 1024 / 1024 / 1024).toFixed(0) == 0) return (bytes / 1024 / 1024).toFixed(1).toString() + " <span class='dataByClassFormatMegaBytes'>"  + getLocalizationKey("dataByClassFormatMegaBytes") + "</span>";
                    else if ((bytes / 1024 / 1024 / 1024 / 1024).toFixed(0) == 0) return (bytes / 1024 / 1024 / 1024).toFixed(1).toString() + " <span class='dataByClassFormatGigaBytes'>" + getLocalizationKey("dataByClassFormatGigaBytes") + "</span>";
                    else if ((bytes / 1024 / 1024 / 1024 / 1024 / 1024).toFixed(0) == 0) return (bytes / 1024 / 1024 / 1024 / 1024).toFixed(1).toString() + " <span class='dataByClassFormatTeraBytes'>" + getLocalizationKey("dataByClassFormatTeraBytes") + "</span>";
                }

                //Format time to show in upload/download progress
                window.formatTime = function(secs) {
                    var remaining = "";
                    secs = secs.toString();
                    secs = secs.substring(0, secs.indexOf(".")) * 1;
                    var mins = (secs / 60) + ".0";
                    mins = mins.substring(0, mins.indexOf(".")) * 1;
                    if (mins > 0) {
                        secs -= (mins * 60);
                        remaining = mins + " min, " + secs + " secs";
                    } else {
                        if (secs < 0) {
                            remaining = getLocalizationKey("BrowserUploaderSpeedTimeCalculatingText");
                        } else {
                            remaining = secs + " secs";
                        }
                    }
                    return remaining;
                }

                //Parse java properties
                function parseJavaProps(s) {
                    var o = {};
                    if (s) {
                        var item_props = s.split(":::");
                        for (var xx = 0; xx < item_props.length; xx++) {
                            o[item_props[xx].substring(0, item_props[xx].indexOf("="))] = item_props[xx].substring(item_props[xx].indexOf("=") + 1); //set the key, and value on the o object
                        }
                    }
                    return o;
                }

                //Event to finre on before unload, that will alert user if any process is running and user tries to navigate away
                window.onbeforeunload = confirmExit;

                function confirmExit() {
                    //That will alert user if any process is running and user tries to navigate away
                    if (!$(document).data("filesInProgress")) {
                        $(document).data("filesInProgress", 0);
                    }
                    if ($.CrushFTP && $.CrushFTP.UploadProgressing) {
                        return getLocalizationKey("BrowserUploaderAlertWhileNavigatingAwayMsgText");
                    }
                    var downloadFilesInProgress = $(".filesSelectedInBasket").find("div.progressBar:visible").length;
                    if (downloadFilesInProgress > 0) {
                        return getLocalizationKey("BrowserDownloadAlertWhileNavigatingAwayMsgText");
                    }

                    if(window.delayedUploadSet)
                    {
                        return getLocalizationKey("DelayedUploadAlertWhileNavigatingAwayMsgText");
                    }

                    if(window.logoutOnPageClose && !window.logoutInitiated){
                        doLogout(false, true);
                    }
                }

                //Method to check if file available in selected files
                function checkFileAvailalbleInSelectedList(name, _path) {
                    name = name.toLowerCase();
                    _path = _path.toLowerCase();
                    var fileData = $("li", "ul.filesSelected");
                    var fileAdded = false;
                    fileData.each(function () {
                        if ($(this).hasClass("groupItem")) {
                            if ($(this).hasClass("uploaded") || $(this).hasClass("ignored")) return false;
                            $(this).data("fileDetails", {
                                filename: $(this).attr("rel"),
                                path: $(this).attr("dest")
                            });
                            var curData = $(this).data("fileDetails");
                            if (curData && curData.filename.toLowerCase() == name && curData.path.toLowerCase() == _path) {
                                fileAdded = true;
                            }
                        } else {
                            if ($(this).hasClass("uploaded") || $(this).hasClass("ignored")) return false;
                            var curData = $(this).data("fileDetails");
                            if (curData && curData.filename.toLowerCase() == name.toLowerCase() && curData.path.toLowerCase() == _path.toLowerCase()) {
                                fileAdded = true;
                            }
                        }
                    });
                    return fileAdded;
                }

                //Get val type
                function getType(val) {
                    if (val === null) return "[object Null]";
                    return Object.prototype.toString.call(val);
                }

                //Handle browse complete, advanced browse
                function handleBrowseComplete(forDownload, quick) {
                    var result = {};
                    if (typeof window.currentApplet != "undefined") result = window.currentApplet.getASyncResult(window.command_id);
                    else {
                        alert(getLocalizationKey("AppletLoadingFailedMsgText"));
                        return false;
                    }
                    if (result) {
                        if (forDownload) {
                            handleFileSelectToDownload(result, quick);
                        } else {
                            handleFileSelectToUpload(result);
                        }
                    } else {
                        if (getType(result).toLowerCase().indexOf("string") < 0) {
                            setTimeout(function () {
                                handleBrowseComplete(forDownload, quick);
                            }, 200);
                        } else {
                            if (quick) {
                                $(document).data(o.BasketDataKeyQuickDownload, new Array());
                            }
                        }
                    }
                }

                //File selected to download
                function handleFileSelectToDownload(result, quick, progressBar) {
                    bindUserName(false, function (response, username) {
                        if (response == "failure") {
                            window.location = window.location;
                        } else {
                            var itemList = [];
                            var stringToCopy = "";
                            var downloadList = [];
                            var downloadInfo = {};
                            if (!progressBar) {
                                result = result + ""; //need to conver this JavaRuntimeObject to a String
                                var destinationPath = hashListener.getHash().toString().replace("#", "") || "/";
                                itemList = parseJavaProps(result.split(";;;")[0]);
                                itemList.destinationPath = destinationPath;
                                var targetUrl = unescape(window.location.toString().split("#")[0]);
                                if (!$(document).data(o.BasketDataKey)) {
                                    $(document).data(o.BasketDataKey, new Array());
                                }
                                var uniqueId = generateRandomPassword(10);
                                var ItemsInTheBasket = $(document).data(o.BasketDataKey);
                                if (quick) {
                                    ItemsInTheBasket = $(document).data(o.BasketDataKeyQuickDownload);
                                }
                                for (var i = 0; i < ItemsInTheBasket.length; i++) {
                                    var fileName = crushFTPTools.decodeURILocal(unescape(ItemsInTheBasket[i].file));
                                    fileName = fileName.toString();
                                    fileName = fileName.replace("//","/");
                                    var j = i + 1;
                                    stringToCopy += "P" + j + "=" + fileName + ":::";
                                };
                                if (quick) {
                                    $(document).data(o.BasketDataKeyQuickDownload, new Array());
                                } else {
                                    $(document).data(o.BasketDataKey, new Array());
                                }
                                rebuildBasket("");
                                if (stringToCopy.length > 0) {
                                    stringToCopy = stringToCopy.substring(0, stringToCopy.length - 3);
                                }
                                progressBar = $("<li style='list-style:none;' uid='" + uniqueId + "'><div class='progressBar'></div></li>");
                                $(".filesSelectedInBasket").prepend(progressBar);
                                $(".filesSelectedInBasket").find("li:not(li[uid])").remove();
                                progressBar = progressBar.find("div");
                                progressBar.attr("type", "download");
                                progressBar.parent().data("downloadList", stringToCopy);
                                progressBar.parent().data("currentDownloadList", ItemsInTheBasket);
                                progressBar.parent().data("progressBar", progressBar);
                                downloadInfo = {
                                    targetUrl: targetUrl,
                                    path: itemList.path,
                                    downloadFiles: stringToCopy,
                                    uniqueId: uniqueId,
                                    destinationPath: itemList.destinationPath
                                }
                                progressBar.parent().data("downloadInfo", downloadInfo);
                            } else {
                                downloadList = progressBar.data("downloadList");
                                downloadInfo = progressBar.data("downloadInfo");
                                var progressBarHTML = progressBar.data("progressBar");
                                progressBar.empty().append(progressBarHTML);
                                progressBar.removeClass("uploaded");
                                progressBar = progressBar.find("div.progressBar").show();
                                progressBar.find(".ui-progressbar-value").remove();
                            }
                            progressBar.before("<div class='appletActionButtons'><span class='pause pointer'>" + getLocalizationKey("BrowserUploaderSelectedFilePauseLinkText") + "</span> <span class='uploadCancel stop pointer'>" + getLocalizationKey("BrowserUploaderSelectedFileCancelLinkText") + "</span></div>");
                            progressBar.parent().find(".uploadCancel").unbind().click(function () {
                                runAppletCommand(true, "COMMAND=ACTION:::TYPE=DOWNLOAD:::ACTION=CANCEL:::UNIQUE_KEY=" + downloadInfo.uniqueId);
                                var curElm = $(this);
                                reportFileCompleted(progressBar, downloadInfo.path, false, true);
                                curElm.blur();
                            });
                            progressBar.parent().find(".pause").unbind().click(function () {
                                var curElm = $(this);
                                if (curElm.hasClass("pause")) {
                                    runAppletCommand(true, "COMMAND=ACTION:::TYPE=DOWNLOAD:::ACTION=PAUSE:::UNIQUE_KEY=" + downloadInfo.uniqueId);
                                    curElm.removeClass("pause").addClass("resume").html(getLocalizationKey("BrowserUploaderSelectedFileResumeLinkText"));
                                    progressBar.parent().find(".time,.speed").remove();
                                    progressBar.parent().find(".uploadPath").hide();
                                    progressBar.addClass("paused").parent().find(".status").html(getLocalizationKey("BrowserUploaderSelectedFilePausedStatusText"));
                                } else if (curElm.hasClass("resume")) {
                                    runAppletCommand(true, "COMMAND=ACTION:::TYPE=DOWNLOAD:::ACTION=RESUME:::UNIQUE_KEY=" + downloadInfo.uniqueId);
                                    curElm.removeClass("resume").addClass("pause").html(getLocalizationKey("BrowserUploaderSelectedFilePauseLinkText"));
                                    progressBar.parent().find(".uploadPath").show();
                                    progressBar.parent().find(".status").html("Resuming...");
                                    progressBar.removeClass("paused");
                                }
                                curElm.blur();
                            });
                            crushFTPTools.getCrushAuthToken(function(token){
                                runAppletCommand(true, "COMMAND=AUTH:::CRUSHAUTH=" + token);
                            });
                            progressBar.progressbar({
                                value: 0
                            }).attr("rel", "DOWNLOAD").attr("path", downloadInfo.path);
                            $("#submitActionBasket").find(".clearCompleted").hide();
                            /*var resumeUpload = ":::RESUME=" + $("#chkDownloadResume").is(":checked");
                            var compressionUpload = ":::NOCOMPRESSION=" + ($.cookie(o.CookieNoCompressionFlag) == "true");
                            if(typeof window.compressionInApplet != "undefined")
                                compressionUpload = ":::NOCOMPRESSION=" + (window.compressionInApplet != "true");*/
                            /* added by carlos */
                            var overwriteUpload = '';
                            var resumeUpload = '';
                            var compressionUpload = '';
                            var overwriteDialog = $('#uploadOptionsDialog_ow').val();
                            var compressionDialog = $('#uploadOptionsDialog_co').val();
                            compressionUpload = ":::NOCOMPRESSION=" + compressionDialog;
                            overwriteUpload = ":::OVERWRITE=" + overwriteDialog;
                            /* end */
                            var cmd = "COMMAND=DOWNLOAD:::URL=" + downloadInfo.targetUrl + ":::PATH=" + downloadInfo.path + ":::" + downloadInfo.downloadFiles + resumeUpload + compressionUpload + overwriteUpload + ":::UNIQUE_KEY=" + downloadInfo.uniqueId;
                            if(window.DOWNLOAD_THREADS)
                                cmd += ":::DOWNLOAD_THREADS=" + window.DOWNLOAD_THREADS;
                            submitApplet(true, cmd, downloadInfo.destinationPath, progressBar, function () {
                                $("#submitActionBasket").find(".clearCompleted").show();
                            });
                        }
                    });
                }

                //Get x position of an element
                function getX(oElement) {
                    var iReturnValue = 0;
                    while (oElement != null) {
                        iReturnValue += oElement.offsetLeft;
                        oElement = oElement.offsetParent;
                    }
                    return iReturnValue;
                }

                //Get y position of an element
                function getY(oElement) {
                    var iReturnValue = 0;
                    while (oElement != null) {
                        iReturnValue += oElement.offsetTop;
                        oElement = oElement.offsetParent;
                    }
                    return iReturnValue;
                }

                //Handle applet browse, open browse window
                function handleAppletBrowse(forDownload, quick) {
                    if (forDownload) {
                        var is_MacOs = navigator.userAgent.indexOf('Mac') > -1;
                        if(is_MacOs)
                        {
                            if (!$(document).data("appletLoaded")) return false;
                            var curElem = $("<a>");
                            curElem.crushFtpLocalFileBrowserPopup({
                                type : 'dir',
                                singleSelection : true,
                                allowRootSelection : false,
                                inJavaFormat : true,
                                useApplet : window["currentApplet"],
                                returnDirListing : true,
                                callback : function(result, allItems){
                                    //console.log(allItems); TODO :: Vipul
                                    handleFileSelectToDownload(result, quick);
                                }
                            });
                        }
                        else
                        {
                            var _title = getLocalizationKey("advancedDownloadPathSelectionWindowTitle");
                            _title = _title.replace(/&rsquo;/g, "’").replace(/&egrave;/g, "è").replace(/&ugrave;/g, "ù").replace(/&eacute;/g, "é");
                            crushFTPTools.getCrushAuthToken(function(token){
                                runAppletCommand(true, "COMMAND=AUTH:::CRUSHAUTH=" + token);
                                window.command_id = runAppletCommand(true, "COMMAND=BROWSE:::DIRECTORIES_ONLY=true:::TITLE=" + _title, true);
                                handleBrowseComplete(forDownload, quick);
                            });
                        }
                    } else {
                        window.command_id = runAppletCommand(true, "COMMAND=BROWSE:::TITLE=" + getLocalizationKey("advancedUploadItemsSelectionWindowTitle"), true);
                       handleBrowseComplete(forDownload, quick);
                    }
                }

                //Run applet command
                window.runAppletCommand = function(signed, command, async) {
                    try {
                        var hostName = window.location.hostname.toString().toLowerCase();
                        if(hostName == "localhost" || hostName == "127.0.0.1")
                        {
                            command += ":::ALLOWTUNNEL=false";
                        }
                        if (async) {
                            return window["currentApplet"+ (signed ? "" : "U")].doCommandASync(command) + "";
                        } else {
                            return window["currentApplet"+ (signed ? "" : "U")].doCommandSync(command) + ""; //     +""     is needed to convert form the Java object type to a JavaScript string type
                        }
                    } catch (e) {}
                }

                //Load applet on page, allows callback when applet is ready
                window.loadApplet = function(signed, callback, noNote) {
                    var is_chrome = navigator.userAgent.indexOf('Chrome') > -1;
                    if(is_chrome)
                        return;
                    crushFTPTools.getCrushAuthToken(function(token){
                        $(document).data("appletAuth", token);
                        window.loadAppletProxy(signed, callback, noNote);
                    });
                };
                window.loadAppletProxy = function(signed, callback, noNote) {
                    if (!navigator.javaEnabled()) {
                        if($('#frmWelcome:visible').length==0){
                            $.growlUI(getLocalizationKey("JavaRequiredGrowlText"), getLocalizationKey("JavaRequiredDescGrowlText"), o.GrowlTimeout, "growlError", o.GrowlWithCloseButton);
                        }
                        if(callback)
                            callback(false);
                        return;
                    }
                    if (!$(document).data("appletLoaded")) $(document).data("appletLoaded", false);
                    if ($(document).data("appletLoaded")) {
                        var pnl = $("#javaAppletDiv" + (signed ? "" : "U"));
                        if(callback)
                            callback(pnl);
                        return;
                    }
                    loading.show();
                    var iframeID = "javaAppletIframe"+ (signed ? "" : "U");
                    var height = typeof window.InstallTrigger !== 'undefined' ? "200" : "70";
                    var s = "<div id='dragdropAppletDiv' style='background-color:#FFFFCC;margin:0px;'><div><div class='appletNote'>"+localizations.appletUploaderDropPanelLabelText+"</div>" + "<iframe style='padding:0px;margin:0px;' frameborder='0' scrolling='no' width='100%' height='"+height+"' id='"+iframeID+"' src='/WebInterface/jQuery/applet"+(signed ? "" : "U")+".html'></iframe></div></div>";
                    if (signed) {
                        $("#javaAppletDiv").css({
                        "right" : "0px",
                        "left" : "auto"}).css("z-index", "1002");
                        $("div#browserFileUpload").find(".advancedBrowse").before("<span class='spinner' style='display:inline-block;padding-left:18px;float:right;margin: 7px 0px 0px 10px;'>Loading...</span>");
                        $("div#submitActionBasket").find(".advanced").addClass("spinner").addClass("spinnerAdvanced");
                    }
                    setTimeout(function () {
                        var pnl = $("#javaAppletDiv" + (signed ? "" : "U")).html(s);
                        $("#"+iframeID).load(function(){
                            if(noNote)
                                pnl.find(".appletNote").hide();
                            isAppletReady(signed, function(failed){
                                loading.hide();
                                if(failed)
                                {
                                    if($('#frmWelcome:visible').length==0){
                                        $.growlUI(getLocalizationKey("JavaLoadingProblemGrowlText"), getLocalizationKey("JavaLoadingProblemDescGrowlText"), o.GrowlTimeout, "growlError", o.GrowlWithCloseButton);
                                    }
                                    if(callback)
                                        callback();
                                }
                                else
                                {
                                    if(callback)
                                        callback(pnl);
                                    if (navigator.appName.indexOf("Explorer") >= 0) return false;
                                        $("#javaAppletDiv").css("left", "-5000px").css("z-index", "1001");
                                }
                            });
                        }).error(function(){
                            loading.hide();
                            if($('#frmWelcome:visible').length==0){
                                $.growlUI(getLocalizationKey("JavaLoadingProblemGrowlText"), getLocalizationKey("JavaLoadingProblemDescGrowlText"), o.GrowlTimeout, "growlError", o.GrowlWithCloseButton);
                            }
                            if(callback)
                                callback();
                        });
                    }, 100);
                }

                //Method to check if applet is ready
                function isAppletReady(signed, callback) {
                    try
                    {
                        var iframeID = "javaAppletIframe"+ (signed ? "" : "U");
                        window.appletTries = window.appletTries || 0;
                        var appletItem = $("#" + iframeID).contents().find("#javaApplet" + (signed ? "" : "U")).get(0);
                        window["currentApplet"+ (signed ? "" : "U")] = appletItem;
                        if (appletItem && appletItem.test() == "OK")
                        {
                            $(document).data("appletLoaded" + (signed ? "" : "U"), true);
                            $("#javaAppletDiv").height(70).removeClass('ffAppletVerify');
                            if (signed) {
                                $("div#browserFileUpload").find(".advancedBrowse").prev().remove();
                                $("div#submitActionBasket").find(".advanced").removeClass("spinner").removeClass("spinnerAdvanced");
                                $("#advancedBrowseOptions").show(1000);
                            }
                            crushFTPTools.getCrushAuthToken(function(token){
                                runAppletCommand(signed, "COMMAND=AUTH:::CRUSHAUTH=" + token);
                                if (callback)
                                {
                                    callback();
                                }
                            });
                        }
                        else
                        {
                            setTimeout(function () {
                                window.appletTries += 1;
                                isAppletReady(signed, callback);
                            }, 100);
                        }
                    }
                    catch (e) {
                        setTimeout(function () {
                            window.appletTries += 1;
                            if(window.appletTries==10)
                            {
                                delete window.appletTries;
                                callback(true);
                            }
                            else
                                isAppletReady(signed, callback);
                        }, 1000);
                    }
                }

                //Load popup content, binds various events
                function loadPopupContent() { /* Data to POST to receive file listing */
                    $("#popupContent").find("input#txtNewFolder").keyup(function (evt) {
                        var evt = (evt) ? evt : ((event) ? event : null);
                        if (evt.keyCode == 13) {
                            makedir();
                            return false;
                        } else if (evt.keyCode == 27) {
                            $.unblockUI();
                            return false;
                        }
                    });
                    var varHideItemsStartingWithDot = $.cookie(o.CookieHideItemStartingWithDot);
                    varHideItemsStartingWithDot = varHideItemsStartingWithDot == "true";
                    if (varHideItemsStartingWithDot) {
                        $("#hideItemsStartingWithDot").attr("checked", "checked");
                    } else {
                        $("#hideItemsStartingWithDot").removeAttr("checked");
                    }
                    var varHideCheckBoxColumn = $.cookie(o.CookieHideCheckBoxColumn);
                    varHideCheckBoxColumn = varHideCheckBoxColumn == "true";
                    if (varHideCheckBoxColumn) {
                        $("#hideCheckBoxColumn").attr("checked", "checked");
                    } else {
                        $("#hideCheckBoxColumn").removeAttr("checked");
                    }
                    var varHideFilter = $.cookie(o.CookieHideFilter);
                    varHideFilter = varHideFilter == "true";
                    if (varHideFilter) {
                        $("#hideFilter").attr("checked", "checked");
                    } else {
                        $("#hideFilter").removeAttr("checked");
                    }
                    if ($.cookie(o.CookieAutoUploadFlag) + "" == "true") {
                        $("#autoUploadFlag").attr("checked", "checked");
                    } else {
                        $("#autoUploadFlag").removeAttr("checked");
                    }
                    if ($.cookie(o.CookieAutoAppletFlag) + "" == "true") {
                        $("#autoAppletFlag").attr("checked", "checked");
                    } else {
                        $("#autoAppletFlag").removeAttr("checked");
                    }
                    if ($.cookie(o.CookieNoCompressionFlag) + "" == "true") {
                        $("#noCompressionFlag").attr("checked", "checked");
                    } else {
                        $("#noCompressionFlag").removeAttr("checked");
                    }
                    initTabs();
                    $("#shareOptionDiv").data("html", $("#shareOptionDiv").html());
                }

                //Block/unblock file listing UI
                function blockFileListingUI(flag) {
                    if (flag) {
                        $(".mainProcessIndicator").show();
                    } else {
                        $(".mainProcessIndicator").fadeOut(500);
                    }
                }

                //Toggle checkboxes
                function toggleCheckBoxes(el, val) {
                    if (val == 1) {
                        var chkBox = $(el);
                        chkBox.attr("checked", "checked");
                        toggleCheckBoxesAll($(el).closest("table"), chkBox.is(":checked"));
                        toggleMainCheckbox(chkBox.closest("table"));
                    } else if (val == 0) {
                        var chkBox = $(el);
                        chkBox.removeAttr("checked");
                        toggleCheckBoxesAll($(el).closest("table"), chkBox.is(":checked"));
                        toggleMainCheckbox(chkBox.closest("table"));
                    } else {
                        var chkBox = $(el);
                        chkBox.removeAttr("checked");
                        toggleCheckBoxesAll($(el).closest("table"), chkBox.is(":checked"), true);
                        toggleMainCheckbox(chkBox.closest("table"));
                    }
                }

                //Toggle all checkboxes
                function toggleCheckBoxesAll(elem, status, toggle) {
                    var infoBar = $("#selectionOfItemsOptions").hide();
                    checkUnCheckDirectory($(elem).find("TR.jqueryFileTree"), status, true, toggle);
                    if (status) {
                        showSelectionInfoBar();
                    } else {
                        window.listingInfo.selectedEverything = false;
                    }
                    fileselectionUpdated();
                }

                //Show selection info bar. It will be shown when all items in listing are selected and there are more hidden in paging
                function showSelectionInfoBar() {
                    var totalCheckedItems = $("TR.jqueryFileTree").find(".chkBox:visible:checked").length;
                    if (currentView() == "Thumbnail") {
                        totalCheckedItems = $("#filesContainerDiv").find("li.fileBoxSelected:visible").length;
                    }
                    if ((window.listingInfo.filtered && totalCheckedItems < window.matchedItems.length) || (!window.listingInfo.filtered && totalCheckedItems < window.listingInfo.totalItemsInDir)) { //If all items listed are selected and there are more hidden in paging
                        var infoBar = $("#selectionOfItemsOptions").show();
                        var listType = getLocalizationKey('ItemsSelectionShowingFolderText');
                        if (window.listingInfo.filtered) {
                            listType = getLocalizationKey('ItemsSelectionShowingFilteredItemsText');
                        } else if (window.listingInfo.isSearchResult) {
                            listType = getLocalizationKey('ItemsSelectionShowingSearchedItemsText');
                        }
                        if (window.listingInfo.selectedEverything) {
                            infoBar.find(".options").hide();
                            infoBar.find(".actions").show();
                            var allItemSelectedText = getLocalizationKey('ItemsSelectionSelectedAllItemsInDir');
                            if (window.listingInfo.filtered) {
                                allItemSelectedText = allItemSelectedText.replace('{total_items}', window.matchedItems.length);
                            } else {
                                allItemSelectedText = allItemSelectedText.replace('{total_items}', window.listingInfo.totalItemsInDir);
                            }
                            allItemSelectedText = allItemSelectedText.replace('{list_type}', listType);
                            infoBar.find("#ItemsSelectionSelectedAllItemsInDir").html(allItemSelectedText);
                        } else {
                            infoBar.find(".options").show();
                            infoBar.find(".actions").hide();
                            infoBar.find("#ItemsSelectionDisplayText").html(getLocalizationKey('ItemsSelectionDisplayText').replace('{count}', totalCheckedItems));
                            var allItemSelectText = getLocalizationKey('ItemsSelectionSelectAllItemsInDir');
                            if (window.listingInfo.filtered) {
                                allItemSelectText = allItemSelectText.replace('{total_items}', window.matchedItems.length);
                            } else {
                                allItemSelectText = allItemSelectText.replace('{total_items}', window.listingInfo.totalItemsInDir);
                            }
                            allItemSelectText = allItemSelectText.replace('{list_type}', listType);
                            infoBar.find("#ItemsSelectionSelectAllItemsInDir").html(allItemSelectText);
                        }
                    }
                }

                //Select/Deselect all items
                window.selectDeselectAllItems = function(flag, toggle, basket) {
                    if (currentView(basket) != "Thumbnail") {
                        //check the checkbox selected after it redraw the list added by carlos
                        if(typeof $(document).data("expandedFolders") != "undefined" && $(document).data("expandedFolders").length > 0 && window.checkBoxesSelected.length > 0){
                            for(var x = 0; x <= window.checkBoxesSelected.length-1; x++){
                                $('td.columnName[name="'+window.checkBoxesSelected[x]+'"]').parent().find("td.columnSelect input.chkBox:visible").attr("checked", "checked");
                            }
                            fileselectionUpdated(basket);
                            return false;
                        }
                        var tbl = $("#filesListing").find("table");
                        if(basket)
                            tbl = $("#FileBasketList").find("table");
                        toggleCheckBoxesAll(tbl, flag, toggle);
                        toggleMainCheckbox(tbl, flag, toggle);
                    } else {
                        var container = $("#filesContainerDiv");
                        if(basket)
                            container = $("#FileBasketList");
                        if (toggle) {
                            container.find("li:visible").each(function () {
                                if ($(this).hasClass("fileBoxSelected")) {
                                    $(this).removeClass("fileBoxSelected");
                                } else {
                                    $(this).addClass("fileBoxSelected");
                                }
                            });
                        } else {
                            if (flag) {
                                container.find("li:visible").addClass("fileBoxSelected");
                                if(!basket)
                                    showSelectionInfoBar();
                            } else {
                                container.find("li.fileBoxSelected:visible").removeClass("fileBoxSelected");
                                if(!basket)
                                {
                                    window.listingInfo.selectedEverything = false;
                                    $("#selectionOfItemsOptions").hide();
                                }
                            }
                        }
                    }
                    fileselectionUpdated(basket);
                }

                //Is all checkboxes in element are selected
                function isChecked(elem) {
                    var allChecked = true;
                    $(elem).find("td.columnName:visible").parent().each(function () {
                        if (!$(this).find("input.chkBox:visible").is(":checked")) {
                            allChecked = false;
                        }
                    });
                    return allChecked;
                }

                //Toggle main checkbox, check all
                function toggleMainCheckbox(elem, status) {
                    status = status || isChecked(elem);
                    if (status) {
                        $(elem).find("input.chkBoxAll").attr("checked", "checked");
                    } else {
                        $(elem).find("input.chkBoxAll").removeAttr("checked");
                    }
                }

                //Check/uncheck directory based on files beneath directory
                function checkUnCheckDirectory(trElems, check, rootDir, toggle) {
                    $(trElems).each(function () {
                        if (rootDir) {
                            $(this).find("td.directory").each(function () {
                                checkUnCheckDirectory(
                                $(this).closest("table").find('TR[rel="' + $(this).find('a').attr('rel') + '"]').find(".chkBox:visible").parent(), check, undefined, toggle);
                            });
                        } else {
                            $(this).parent().find("td.directory").each(
                            function () {
                                checkUnCheckDirectory(
                                $(this).closest("table").find('TR[rel="' + $(this).find('a').attr('rel') + '"]').find(".chkBox:visible").parent(), check, undefined, toggle);
                            });
                        }
                        if (toggle) {
                            var checkedElems = $(this).find(".chkBox:visible:checked");
                            var unCheckedElems = $(this).find(".chkBox:visible").not(":checked");
                            checkedElems.removeAttr("checked");
                            unCheckedElems.attr("checked", "checked");
                        } else {
                            if (check) {
                                $(this).find(".chkBox:visible").attr("checked", "checked");
                            } else {
                                $(this).find(".chkBox:visible").removeAttr("checked");
                            }
                        }
                    });
                }

                //Current view
                function currentView(basket) {
                    basket = basket ? "_basket" : "";
                    if (!$("body").data("currentView" + basket)) {
                        var currentViewType = $.cookie(o.ViewCookieName + basket);
                        if (currentViewType && currentViewType == "Thumbnail") {
                            $("body").data("currentView" + basket, currentViewType);
                        } else {
                            $("body").data("currentView" + basket, "Tree");
                        }
                    }
                    return $("body").data("currentView" + basket);
                }

                //Method to change current view, refresh after changing view
                function changeView(type, refresh, basket) {
                    var _basket = basket ? "_basket" : "";
                    if(basket)
                    {
                        $("body").data("currentView" + _basket, type);
                        var options = {
                            path: '/',
                            expires: 10
                        };
                        $.cookie(o.ViewCookieName + _basket, type, options);
                        if (type == "Thumbnail") {
                            $("#sliderBasket").show();
                        } else {
                            $("#sliderBasket").hide();
                        }
                        if($("div#filesBasket").dialog("isOpen"))
                            rebuildBasket(false);
                    }
                    else
                    {
                        if (!window.listingInfo || !window.listingInfo.selectedEverything) $("#selectionOfItemsOptions").hide();
                        $("body").data("currentView", type);
                        var options = {
                            path: '/',
                            expires: 10
                        };
                        $.cookie(o.ViewCookieName, type, options);
                        if (type == "Thumbnail") {
                            $("#filesContainer, .treeviewExpandOptions").hide();
                            $("#filesContainerDiv").show();
                            $("#slider").show();
                        } else {
                            $("#filesContainerDiv").hide();
                            $("#filesContainer").show();
                            if(window.showExpandAllButtons)
                                $(".treeviewExpandOptions").show();
                            $("#slider").hide();
                        }

                        if (refresh) {
                            blockFileListingUI(true);
                            if ($(document).data("searchData")) {
                                if (currentView() == "Thumbnail") {
                                    renderListing($("#filesContainerDiv"), false, false, $(document).data("searchData"), true);
                                } else {
                                    renderListing($("#filesContainer"), false, false, $(document).data("searchData"), true);
                                }
                            } else {
                                if (type == "Thumbnail") {
                                    showTree($("#filesContainerDiv"), "", true, true);
                                } else {
                                    showTree($("#filesContainer"), "", true, true);
                                }
                            }
                        }
                    }
                }

                //Map XML to tables, converts XML to an array/json
                function mapXmlToTable(data, table, disablePrivsSet, folderExpand) {
                    if(!data)return;
                    var msg = data.listing;
                    if (msg) {
                        if (folderExpand) window.curTreeItems = window.curTreeItems ? window.curTreeItems : {};
                        else window.curTreeItems = window.curTreeItems ? window.curTreeItems : window.l ? window.l : {};
                        if (!disablePrivsSet && !window.isSearchResult) {
                            $(document).data("folderPrivs", resetPrivs(data.privs));
                        }
                        if(window.isSearchResult){
                            var privs = $(document).data("curDirPrivs");
                            privs = privs.replace("(makedir)", "").replace("(write)", "");
                            $(document).data("folderPrivs", resetPrivs(privs));
                            $(document).data("curDirPrivs", privs);
                            $("#fileQueueInfo,#dndInfoTextHolder").hide();
                        }
                        if (folderExpand) {
                            if (l && l.length > 0) {
                                var rel = folderExpand.find("a").attr("rel");
                                for (var i = 0; i < curTreeItems.length; i++) {
                                    var curItem = curTreeItems[i];
                                    if (curItem.root_dir + unescape(curItem.name) + "/" == unescape(rel)) {
                                        for (var j = l.length - 1; j >= 0; j--) {
                                            var subItem = l[j];
                                            subItem.ItemType = "subDir";
                                            curTreeItems.splice(i + 1, 0, subItem);
                                        }
                                        i = curTreeItems.length;
                                    }
                                }
                            }
                            return generateListing(curTreeItems);
                        } else {
                            curTreeItems = l;
                            return generateListing();
                        }
                    } else {
                        if (!disablePrivsSet && !folderExpand) {
                            $(document).data("folderPrivs", false);
                        }
                        l = [];
                        return "";
                    }
                }

                //Filter listed item quickly as user types
                function filterItem(phrase, forced) {
                    if (window.last_search_item && window.last_search_item === phrase && !forced) {
                        return false;
                    }
                    window.last_search_item = phrase || window.last_search_item;
                    if(forced)
                    {
                        $("#filter").val(window.last_search_item);
                    }
                    if($.trim(phrase) == "")
                    {
                        window.last_search_item = "";
                        window.filteredItems = false;
                        window.matchedItems = false;
                        window.listingInfo.selectedEverything = false;
                        if($(document).data("expandedFolders") && $(document).data("expandedFolders").length>0)
                        {
                            $(".refreshButton:first").trigger("click");
                        }
                        else
                        {
                            reBuildListing(l);
                            bindCountOfFiles();
                            $.unblockUI();
                        }
                        return false;
                    }
                    var files = 0;
                    var dirs = 0;
                    var curListItems = l;
                    if (currentView() != "Thumbnail") {
                        curListItems = window.curTreeItems;
                    }
                    var matchedItems = [];
                    var hasWords = function (str, words, exclude) {
                        if (!str || !words || str.length == 0 || words.length == 0) return false;
                        var text = str.toLowerCase();
                        for (var i = 0; i < words.length; i++) {
                            if(exclude)
                            {
                                if (text.indexOf(words[i]) !== -1) return false;
                            }
                            else
                            {
                                if (text.indexOf(words[i]) === -1) return false;
                            }
                        }
                        return true;
                    }
                    var regex = false;
                    var exclude = phrase.indexOf("!") == 0;
                    if(exclude)
                        phrase = phrase.substr(1, phrase.length);
                    if(phrase && phrase.toLowerCase().indexOf("regex:")==0)
                    {
                        try{
                            regex = new RegExp(phrase.substr(phrase.indexOf(":")+1, phrase.length), "i");
                        }catch(ex){
                            regex = false;
                        }
                    }
                    if (curListItems && curListItems.length > 0) {
                        for (var i = 0; i <= curListItems.length; i++) {
                            var opt = curListItems[i];
                            if (opt) {
                                if (currentView() == "Thumbnail") {
                                    var words = phrase.toLowerCase().split(" ");
                                    if(regex)
                                    {
                                        if(regex.test(opt.name))
                                        {
                                            matchedItems.push(opt);
                                            if (opt.type == "FILE") {
                                                files += 1;
                                            } else {
                                                dirs += 1;
                                            }
                                        }
                                    }
                                    else
                                    {
                                        if (hasWords(opt.name, words, exclude)) {
                                            matchedItems.push(opt);
                                            if (opt.type == "FILE") {
                                                files += 1;
                                            } else {
                                                dirs += 1;
                                            }
                                        }
                                    }
                                } else {
                                    var words = phrase.toLowerCase().split(" ");
                                    if(regex)
                                    {
                                        if(regex.test(opt.name) || regex.test(opt.keywords) || (!window.applyFilterToTreeLevels && regex.test(opt.href_path)))
                                        {
                                            matchedItems.push(opt);
                                            if (opt.type == "FILE") {
                                                files += 1;
                                            } else {
                                                dirs += 1;
                                            }
                                        }
                                    }
                                    else
                                    {
                                        if (hasWords(opt.name, words, exclude)) {
                                            matchedItems.push(opt);
                                            if (opt.type == "FILE") {
                                                files += 1;
                                            } else {
                                                dirs += 1;
                                            }
                                        } else if (hasWords(opt.keywords, words, exclude)) {
                                            matchedItems.push(opt);
                                            if (opt.type == "FILE") {
                                                files += 1;
                                            } else {
                                                dirs += 1;
                                            }
                                        } else if (!window.applyFilterToTreeLevels && hasWords(opt.href_path, words, exclude)) {
                                            matchedItems.push(opt);
                                            if (opt.type == "FILE") {
                                                files += 1;
                                            } else {
                                                dirs += 1;
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                    window.current_page = o.pagingCurrentPage = 0;
                    if (phrase.length > 0) {
                        window.filteredItems = {
                            filesCount: files,
                            dirsCount: dirs
                        };
                    } else {
                        window.filteredItems = false;
                        $("#selectionOfItemsOptions").hide();
                    }
                    window.matchedItems = matchedItems;
                    window.listingInfo.selectedEverything = false;
                    reBuildListing(window.matchedItems); //rebuild listing with filtered items
                    bindCountOfFiles();
                    $.unblockUI();
                }

                //Filter listed item quickly as user types in basket
                function filterBasketItem(phrase, forced) {
                    if (window.last_search_item_basket && window.last_search_item_basket === phrase && !forced) {
                        return false;
                    }
                    window.last_search_item_basket = phrase || window.last_search_item_basket;
                    if(forced)
                    {
                        $("#filterBasket").val(window.last_search_item_basket);
                    }
                    var files = 0;
                    var dirs = 0;
                    if (!$(document).data(o.BasketDataKey)) {
                        $(document).data(o.BasketDataKey, new Array());
                    }
                    //Items in the basket
                    var curListItems = $(document).data(o.BasketDataKey);
                    if($.trim(phrase) == "")
                    {
                        window.last_search_item_basket = "";
                        if (curListItems && curListItems.length > 0) {
                            for (var i = 0; i <= curListItems.length; i++) {
                                var opt = curListItems[i];
                                if (opt) {
                                    delete opt.hide;
                                }
                            }
                        }
                        $(document).data(o.BasketDataKey, curListItems);
                        window.filteredItemsBasket = false;
                        rebuildBasket();
                        return false;
                    }
                    var hasWords = function (str, words, exclude) {
                        if (!str || !words || str.length == 0 || words.length == 0) return false;
                        var text = str.toLowerCase();
                        for (var i = 0; i < words.length; i++) {
                            if(exclude)
                            {
                                if (text.indexOf(words[i]) !== -1) return false;
                            }
                            else
                            {
                                if (text.indexOf(words[i]) === -1) return false;
                            }
                        }
                        return true;
                    }
                    var regex = false;
                    var exclude = phrase.indexOf("!") == 0;
                    if(exclude)
                        phrase = phrase.substr(1, phrase.length);
                    if(phrase && phrase.toLowerCase().indexOf("regex:")==0)
                    {
                        try{
                            regex = new RegExp(phrase.substr(phrase.indexOf(":")+1, phrase.length), "i");
                        }catch(ex){
                            regex = false;
                        }
                    }
                    if (curListItems && curListItems.length > 0) {
                        for (var i = 0; i <= curListItems.length; i++) {
                            var opt = curListItems[i];
                            if (opt) {
                                delete opt.hide;
                                if (currentView(true) == "Thumbnail") {
                                    var words = phrase.toLowerCase().split(" ");
                                    if(regex)
                                    {
                                        if(regex.test(opt.name))
                                        {
                                            opt.hide = true;
                                            if (opt.type == "FILE") {
                                                files += 1;
                                            } else {
                                                dirs += 1;
                                            }
                                        }
                                    }
                                    else
                                    {
                                        if (hasWords(opt.name, words, exclude)) {
                                            opt.hide = true;
                                            if (opt.type == "FILE") {
                                                files += 1;
                                            } else {
                                                dirs += 1;
                                            }
                                        }
                                    }
                                } else {
                                    var words = phrase.toLowerCase().split(" ");
                                    if(regex)
                                    {
                                        if(regex.test(opt.name) || regex.test(opt.keywords))
                                        {
                                            opt.hide = true;
                                            if (opt.type == "FILE") {
                                                files += 1;
                                            } else {
                                                dirs += 1;
                                            }
                                        }
                                    }
                                    else
                                    {
                                        if (hasWords(opt.name, words, exclude)) {
                                            opt.hide = true;
                                            if (opt.type == "FILE") {
                                                files += 1;
                                            } else {
                                                dirs += 1;
                                            }
                                        } else if (hasWords(opt.keywords, words, exclude)) {
                                            opt.hide = true;
                                            if (opt.type == "FILE") {
                                                files += 1;
                                            } else {
                                                dirs += 1;
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                    if (phrase.length > 0) {
                        window.filteredItemsBasket = {
                            filesCount: files,
                            dirsCount: dirs
                        };
                        $(document).data(o.BasketDataKey, curListItems);
                    } else {
                        window.filteredItemsBasket = false;
                    }
                    rebuildBasket(); //rebuild listing with filtered items
                    bindCountOfFiles(true);
                }

                //Generate listing based on custom items
                function generateListing(customItem) {
                    if(!window.l || window.listingPageShown) return "";
                    var curDirItems = customItem ? customItem : l;
                    if (currentView() != "Thumbnail") {
                        curDirItems = customItem ? customItem : window.curTreeItems;
                    }
                    var linkURL = unescape(window.location.href.split('#')[0]);
                    linkURL = linkURL.substring(0, linkURL.lastIndexOf("/"));
                    var _isUIDNDReady = window.isCrush7Ready();
                    var CookiePageSize = getPageSize();
                    var currentPage = o.pagingCurrentPage;
                    var cookiePageSizeIsValid = (CookiePageSize - 0) == CookiePageSize && CookiePageSize.length > 0;
                    if (curDirItems && curDirItems.length > 0) {
                        var fileList = [];
                        var maxEntries = curDirItems.length;
                        var start = 0;
                        if (cookiePageSizeIsValid) {
                            CookiePageSize -= 1;
                            var page = currentPage == 0 ? 0 : currentPage;
                            if (page > 0) {
                                maxEntries = CookiePageSize * (page + 1);
                                start = CookiePageSize * page;
                                start += page;
                                maxEntries += page;
                            } else {
                                maxEntries = CookiePageSize;
                            }
                        }
                        var format = window.customDateFormat || "mm/dd/yyyy";
                        format = format.replace(/:mm/g, ":nn");
                        var timeFormat = window.customTimeFormat || "hh:nn:ss TT";
                        //Loop through items and build HTML for thumbs and tree view
                        for (var i = start; i <= maxEntries; i++) {
                            var x = i;
                            var opt = curDirItems[i];
                            if (opt) {
                                var sizeFormatted = formatBytesDynamic(opt.size);
                                if(typeof window.listingHTMLPage != "undefined" && window.listingHTMLPage.toLowerCase() == opt.name.toLowerCase())
                                {
                                    replaceFileExist = true;
                                    i = maxEntries +1;
                                }
                                var keywords = unescape(opt.keywords);
                                if (keywords.length >= o.keywordsCharLimit && !window.donotConcatKeywords) {
                                    keywords = keywords.substr(0, o.keywordsCharLimit) + "...";
                                }
                                var formattedFullDate;
                                if(opt.modified)
                                {
                                    var _date = new Date(parseInt(opt.modified));
                                    if(_date){
                                        if(format.toLowerCase().indexOf("hh")<0)
                                            formattedFullDate = _date.format(format.replace("MMM","M").replace("MM","mm") + " " + timeFormat);
                                        else
                                            formattedFullDate = _date.format(format.replace("MMM","M").replace("MM","mm"));
                                    }
                                    else
                                        formattedFullDate = "";
                                }
                                //keywords = crushFTPTools.textEncode(keywords);
                                var syncedItemClass = (opt.privs && opt.privs.indexOf("syncName=")!=-1) && !window.disableCrushSyncIcon ? "syncItem" : "";
                                var fileName = crushFTPTools.htmlEncode(opt.name, false, true);
                                if (currentView() == "Thumbnail") {
                                    if (opt.type === 'DIR') {
                                        if(window.maskedEmptyFolder)
                                        {
                                            if(opt.size + "" == "0")
                                                syncedItemClass += " emptyFolder ";
                                        }
                                        var res = "";
                                        if(opt.num_items && opt.num_items.toString() != "1" && opt.num_items.toString() != "0" && !window.disableDirectoryItemCount)
                                        {
                                            res = "<span class='items-count-thumb'>"+getLocalizationKey("TotalItemsInDirInlineText").replace("{count}", opt.num_items) +"</span>";
                                        }
                                        var title;
                                        if(window.isSearchResult || window.alwaysShowPathColumn)
                                        {
                                            title = '<div class=\'tooltip-content\'><strong>' + getLocalizationKey('TooltipNameLabelText') + ' : </strong>' + crushFTPTools.xssEncode(opt.name) + '<br /><strong>' + getLocalizationKey('TooltipPathLabelText') + ' : </strong>' + crushFTPTools.xssEncode(opt.root_dir)+ '<br /><strong>' + getLocalizationKey('TooltipModifiedLabelText') + ' : </strong>' + opt.dateFormatted + '<br /><strong>' + getLocalizationKey('TooltipKeywordsLabelText') + ' : </strong>' + crushFTPTools.xssEncode(keywords) + '</div>';
                                        }
                                        else
                                        {
                                            title = '<div class=\'tooltip-content\'><strong>' + getLocalizationKey('TooltipNameLabelText') + ' : </strong>' + crushFTPTools.xssEncode(opt.name) + '<br /><strong>' + getLocalizationKey('TooltipModifiedLabelText') + ' : </strong>' + opt.dateFormatted + '<br /><strong>' + getLocalizationKey('TooltipKeywordsLabelText') + ' : </strong>' + crushFTPTools.xssEncode(keywords) + '</div>';
                                        }
                                        var downloadURL = _isUIDNDReady ? "draggable=\"true\" data-downloadurl=\"application/octet-stream:" + fileName + ".zip:" +linkURL+'?command=downloadAsZip&zipName='+fileName+'.zip&path='+crushFTPTools.htmlEncode(opt.href_path, false, true)+"&c2f="+crushFTPTools.getCrushAuth() + '&paths='+crushFTPTools.htmlEncode(opt.href_path, false, true)+"\"" : "";
                                        var dirTemplate = '<li '+downloadURL+' root_dir="' + opt.root_dir + '" class="vtip '+syncedItemClass+' fileBox directoryThumb" index="' + x + '" name="' + opt.name + '" title="'+ title +'" privs="' + escape(opt.privs) + '" sizeInBytes="' + opt.size + '" size="' + opt.sizeFormatted + '" fulldate="' + opt.modified + '" Date="' + opt.dateFormatted + '" Keywords="' + crushFTPTools.xssEncode(keywords) + '" preview="' + opt.preview + '"><span class="fileSelectionMark"></span><div>' + '<div class="imgBox"><div class="imgWrapper">' + '<table cellspacing="0" cellpadding="0" align="center">' + '<tbody>' + '<tr>' + '<td valign="middle" align="center">' + '<a class="imgLink" rel="' + escape(unescape(opt.href_path)) + "/" + '" href="' + crushFTPTools.htmlEncode(opt.href_path, false, true) + '">' + '<img alt="' + opt.name + '" title="' + opt.name + '" style="border: 0px none;" src="' + o.spinerImage + '">' + '</a>' +res+ '</td>' + '</tr>' + '</tbody>' + '</table></div>' + '</div>' + '</div>' + '<div class="imgTitle">' + '<a  rel="' + opt.root_dir + '" href="' + opt.href_path + '">' + crushFTPTools.htmlEncode(opt.name, false, true) + '</a>' + '</div>' + '</li>';
                                        fileList.push(dirTemplate);
                                    } else if (opt.type === 'FILE') {
                                        var title;
                                        if(window.isSearchResult || window.alwaysShowPathColumn)
                                        {
                                            title = '<div class=\'tooltip-content\'><strong>' + getLocalizationKey('TooltipNameLabelText') + ' : </strong>' + (crushFTPTools.xssEncode(opt.name)) + '<br /><strong>' + getLocalizationKey('TooltipPathLabelText') + ' : </strong>' + crushFTPTools.xssEncode(opt.root_dir) + '<br /><strong>' + getLocalizationKey('TooltipSizeLabelText') + ' : </strong>' + sizeFormatted + ' <span class=\'syncSc\'>('+opt.size+' bytes)</span><br /><strong>' + getLocalizationKey('TooltipModifiedLabelText') + ' : </strong>' + opt.dateFormatted + '<br /><strong>' + getLocalizationKey('TooltipKeywordsLabelText') + ' : </strong>' + crushFTPTools.xssEncode(keywords) + '</div>';
                                        }
                                        else
                                        {
                                            title = '<div class=\'tooltip-content\'><strong>' + getLocalizationKey('TooltipNameLabelText') + ' : </strong>' + crushFTPTools.xssEncode(opt.name) + '<br /><strong>' + getLocalizationKey('TooltipSizeLabelText') + ' : </strong>' + sizeFormatted + ' <span class=\'syncSc\'>('+opt.size+' bytes)</span><br /><strong>' + getLocalizationKey('TooltipModifiedLabelText') + ' : </strong>' + opt.dateFormatted + '<br /><strong>' + getLocalizationKey('TooltipKeywordsLabelText') + ' : </strong>' + crushFTPTools.xssEncode(keywords) + '</div>';
                                        }
                                        var res = "";
                                        if(opt.width)
                                        {
                                            res = "<span class='resolution-thumb'>"+opt.width +" x "+ opt.height +"</span>";
                                        }
                                        var downloadURL = _isUIDNDReady ? "draggable=\"true\" data-downloadurl=\"application/octet-stream:" + fileName + ":" +linkURL+crushFTPTools.htmlEncode(opt.href_path, false, true)+"\"" : "";
                                        var fileTemplate = '<li '+downloadURL+' root_dir="' + opt.root_dir + '" class="vtip '+syncedItemClass+' fileBox fileThumb" index="' + x + '" name="' + opt.name + '" title="'+title+'" privs="' + escape(opt.privs) + '" sizeInBytes="' + opt.size + '" size="' + opt.sizeFormatted + '" fulldate="' + opt.modified + '" Date="' + opt.dateFormatted + '" Keywords="' + crushFTPTools.xssEncode(keywords) + '" preview="' + opt.preview + '"><span class="fileSelectionMark"></span><div>' + '<div class="imgBox"><div class="imgWrapper">' + res + '<table cellspacing="0" cellpadding="0" align="center">' + '<tbody>' + '<tr>' + '<td valign="middle" align="center">' + '<a class="imgLink" rel="' + escape(unescape(opt.href_path)) + '" href="' + opt.href_path + '">' + '<img alt="' + opt.name + '" title="' + opt.name + '" style="border: 0px none;" src="' + o.spinerImage + '">' + '</a>' + '</td>' + '</tr>' + '</tbody>' + '</table></div>' + '</div>' + '</div>' + '<div class="imgTitle">' + '<a  rel="' + opt.root_dir + '" href="' + crushFTPTools.htmlEncode(opt.href_path, false, true) + '">' + fileName + '</a>' + '</div>' + '</li>';
                                        fileList.push(fileTemplate);
                                    }
                                } else {
                                    var subdirClass = opt.ItemType == "subDir" ? "subdirectory" : "";
                                    var attrs = "root_dir='" + crushFTPTools.xssEncode(opt.root_dir) + "' name='" + crushFTPTools.xssEncode(opt.name) + "' sizeInBytes='" + opt.size + "' size='" + opt.sizeFormatted + "' date='" + opt.dateFormatted + "' keywords='" + crushFTPTools.xssEncode(keywords) + "' preview='" + opt.preview + "' privs='" + escape(opt.privs) + "'";
                                    var _keywords = keywords;
                                    var vtip = "";
                                    if (keywords.length >= o.MaximumLengthAllowedForKeywordsString && !window.donotConcatKeywords) {
                                        //_keywords = keywords.substr(0, o.MaximumLengthAllowedForKeywordsString) + "...";
                                        vtip = "<div class='keywords-tooltip'>"+crushFTPTools.htmlEncode(keywords)+"</div>";
                                    }
                                    if (opt.type === 'DIR') {
                                        if(window.maskedEmptyFolder)
                                        {
                                            if(opt.size + "" == "0")
                                                subdirClass += " emptyFolder ";
                                        }
                                        var res = "";
                                        if(opt.num_items && opt.num_items.toString() != "0" && opt.num_items.toString() != "1" && !window.disableDirectoryItemCount)
                                        {
                                            res = "<span class='items-count'>"+getLocalizationKey("TotalItemsInDirInlineText").replace("{count}", opt.num_items) +"</span>";
                                        }
                                        var dirSize = ((opt.size + "").indexOf("0") !== 0 && (opt.size + "").length > 1) ? sizeFormatted : "";
                                        var downloadURL = _isUIDNDReady ? "draggable=\"true\" data-downloadurl=\"application/octet-stream:" + fileName + ".zip:" +linkURL+'?command=downloadAsZip&zipName='+fileName+'.zip&path='+crushFTPTools.htmlEncode(opt.href_path, false, true) +"&c2f="+crushFTPTools.getCrushAuth()+ '&paths='+crushFTPTools.htmlEncode(opt.href_path, false, true)+"\"" : "";
                                        var htmlElem = '<tr index="' + x + '" name="' + opt.name + '" rootdir="' + opt.root_dir + '" modified="' + opt.modified + '" style="display:none;" privs="' + escape(opt.privs) + '" rel="' + escape(unescape(opt.root_dir)) + '" class="dirItemTR jqueryFileTree ' + subdirClass + '" sizeInBytes="' + opt.size + '" size="' + opt.sizeFormatted + '" fulldate="' + opt.modified + '" Date="' + opt.dateFormatted + '" Keywords="' + crushFTPTools.xssEncode(keywords) + '" preview="' + opt.preview + '"><td class="columnSelect"><input class="chkBox" type="checkbox"/></td><td '+downloadURL+' preview="' + opt.preview + '" ' + attrs + ' class="directory collapsed columnName '+syncedItemClass+'">'+ res+'<span class="expandButton" rel="' + escape(unescape(opt.href_path)) + '/"><img src="' + o.collapsedImageURL + '" /></span><a href="' + crushFTPTools.textEncode(crushFTPTools.htmlEncode(opt.href_path, false, true)) + '" rel="' + escape(unescape(opt.href_path)) + '/">' + fileName + '</a></td><td class="columnPath listRootDir">'+crushFTPTools.textEncode(unescape(opt.root_dir))+'</td><td class="columnSize" size="' + opt.size + '">' + dirSize + '</td><td class="columnModified" modified="' + opt.modified + '" title="'+formattedFullDate+'">' + opt.dateFormatted + '</td><td class="columnKeywords">'+ vtip +  crushFTPTools.htmlEncode(_keywords) + '</td></tr>';
                                        if(window.metaInfoKeysToShowInTreeview)
                                        {
                                            var columns = window.metaInfoKeysToShowInTreeview.split("\n");
                                            var elem = $("<table><tbody>"+htmlElem+"</tbody></table>");
                                            if(columns.length>0){
                                                for (var _i = 0; _i < columns.length; _i++) {
                                                    var curCol = columns[_i].split("||");
                                                    var name = curCol[1] ? curCol[1] : curCol[0];
                                                    var index = curCol[2] ? parseInt(curCol[2]) : -1;
                                                    var val = crushFTPTools.htmlEncode(opt[curCol[0]]) || "";
                                                    if(index >= 0)
                                                    {
                                                        elem.find("tr").insertAt(index, "<td class='row-"+curCol[0]+"'><span>"+val+"</span></td>");
                                                    }
                                                }
                                                htmlElem = elem.find("tbody").html();
                                            }
                                        }
                                        fileList.push(htmlElem);
                                    } else if (opt.type === 'FILE') {
                                        var res = "";
                                        if(opt.width)
                                        {
                                            res = "<span class='resolution'>"+opt.width +" x "+ opt.height +"</span>";
                                        }
                                        var downloadURL = _isUIDNDReady ? "draggable=\"true\" data-downloadurl=\"application/octet-stream:" + fileName + ":" +linkURL+crushFTPTools.htmlEncode(opt.href_path, false, true)+"\"" : "";
                                        /* added by carlos*/
                                        var fileExt = getFileExtension(fileName);
                                        if(fileExt) fileExt = fileExt.toLowerCase();
                                        var htmlElem = "";
                                        if( fileExt == 'mp3' || fileExt == 'wav') {
                                            //<div filelink="' + crushFTPTools.textEncode(crushFTPTools.htmlEncode(opt.href_path, false, true)) + '" class="wave_player">'+fileName+'</div>
                                            htmlElem = '<tr index="' + x + '" name="' + opt.name + '" rootdir="' + opt.root_dir + '" style="display:none;"  modified="' + opt.modified + '" privs="' + escape(opt.privs) + '" rel="' + escape(unescape(opt.root_dir)) + '" class="fileItemTR jqueryFileTree ' + subdirClass + '" sizeInBytes="' + opt.size + '" size="' + opt.sizeFormatted + '" fulldate="' + opt.modified + '" Date="' + opt.dateFormatted + '" Keywords="' + crushFTPTools.xssEncode(keywords) + '" preview="' + opt.preview + '"><td class="columnSelect"><input class="chkBox" type="checkbox"/></td><td '+downloadURL+'  preview="' + opt.preview + '" ' + attrs + ' class="fileTR columnName fileItem '+syncedItemClass+'"><a href="' + crushFTPTools.textEncode(crushFTPTools.htmlEncode(opt.href_path, false, true)) + '" rel="' + escape(unescape(opt.href_path)) + '" class="inline_player">' + fileName + '</a>'+res+'</td><td class="columnPath listRootDir">'+crushFTPTools.textEncode(unescape(opt.root_dir))+'</td><td class="columnSize" title="'+opt.size+' bytes">' + sizeFormatted + '</td><td class="columnModified" modified="' + opt.modified + '" title="'+formattedFullDate+'">' + opt.dateFormatted + '</td><td class="columnKeywords">' + vtip + crushFTPTools.htmlEncode(_keywords) + '</td></tr>';
                                        } else {
                                            htmlElem = '<tr index="' + x + '" name="' + opt.name + '" rootdir="' + opt.root_dir + '" style="display:none;"  modified="' + opt.modified + '" privs="' + escape(opt.privs) + '" rel="' + escape(unescape(opt.root_dir)) + '" class="fileItemTR jqueryFileTree ' + subdirClass + '" sizeInBytes="' + opt.size + '" size="' + opt.sizeFormatted + '" fulldate="' + opt.modified + '" Date="' + opt.dateFormatted + '" Keywords="' + crushFTPTools.xssEncode(keywords) + '" preview="' + opt.preview + '"><td class="columnSelect"><input class="chkBox" type="checkbox"/></td><td '+downloadURL+' preview="' + opt.preview + '" ' + attrs + ' class="fileTR columnName fileItem '+syncedItemClass+'"><a href="' + crushFTPTools.textEncode(crushFTPTools.htmlEncode(opt.href_path, false, true)) + '" rel="' + escape(unescape(opt.href_path)) + '">' + fileName + '</a>'+res+'</td><td class="columnPath listRootDir">'+crushFTPTools.textEncode(unescape(opt.root_dir))+'</td><td class="columnSize" title="'+opt.size+' bytes">' + sizeFormatted + '</td><td class="columnModified" modified="' + opt.modified + '" title="'+formattedFullDate+'">' + opt.dateFormatted + '</td><td class="columnKeywords">' + vtip + crushFTPTools.htmlEncode(_keywords) + '</td></tr>';
                                        }
                                        if(window.metaInfoKeysToShowInTreeview)
                                        {
                                            var columns = window.metaInfoKeysToShowInTreeview.split("\n");
                                            var elem = $("<table><tbody>"+htmlElem+"</tbody></table>");
                                            if(columns.length>0){
                                                for (var _i = 0; _i < columns.length; _i++) {
                                                    var curCol = columns[_i].split("||");
                                                    var name = curCol[1] ? curCol[1] : curCol[0];
                                                    var index = curCol[2] ? parseInt(curCol[2]) : -1;
                                                    var val = crushFTPTools.htmlEncode(opt[curCol[0]]) || "";
                                                    if(index >= 0)
                                                    {
                                                        elem.find("tr").insertAt(index, "<td class='row-"+curCol[0]+"'><span>"+val+"</span></td>");
                                                    }
                                                }
                                                htmlElem = elem.find("tbody").html();
                                            }
                                        }
                                        fileList.push(htmlElem);
                                    }
                                }
                            }
                        }
                        //Draw links for current directory
                        drawPaginationLinks(curDirItems);
                        window.listingPageShown = false;
                        $(".layoutActionElement, .filter-content, #filesListing,#dndInfoTextHolder").show();
                        $("#htmlListingFile").empty().hide();
                        return fileList.join("");//return html
                    }
                    else
                    {
                        drawPaginationLinks(curDirItems);
                        return "";
                    }
                }

                //Generate inline player added by carlos
                function generateInlinePlayers(elem){
                    if(o.buggyBrowser || inlinePlayer_enable == 'false'){ return; }
                    elem = elem || $(document);
                    setTimeout(function(){
                        stopAllPlayback();
                        destroyAllInlinePlaybacks();
                        $('.inline_player').each(function(index){
                            var fileName = $(this).text();
                            var fileUrl = $(this).attr('href');
                            $(this).parent().attr('inline_id', index);
                            var graphclass = (inlinePlayer_graphvisible == 'never' || inlinePlayer_graphvisible == 'onplay') ? ' style="display: none;"' : '';
                            $('td[inline_id='+index+']').append(' <a href="javascript:void(0)" class="wavefileDownload" title="Download">Download</a> <a href="javascript:void(0)" onclick="playPause('+index+', true, \''+fileUrl+'\');" class="waveplay">Play</a><a href="javascript:void(0)" onclick="playPause('+index+', false);" class="wavestop">Stop</a><div id="wave_'+index+'"'+graphclass+'></div>');
                            $('td[inline_id='+index+']').find(".wavefileDownload").click(function(event) {
                                downloadItems(false, $(this).closest("td"));
                                return false;
                            });
                            players[index] = Object.create(WaveSurfer);
                            players[index].init({
                                container: '#wave_'+index,
                                height: 50,
                                waveColor: inlinePlayer_graphcolor,
                                progressColor: inlinePlayer_progresscolor
                            });
                            var wave = $('#wave_'+index);
                            wave.parent().find(".progressBar").remove();
                            wave.before('<div class="progressBar" style="height:5px;"></div>');
                            var pb = wave.parent().find(".progressBar");
                            players[index].on('loading', function(val){
                                pb.progressbar({value : val});
                            });
                            players[index].on('ready', function () {
                                try{
                                    pb.progressbar("destroy");
                                }catch(ex){}
                                pb.remove();
                                players[index].un("loading");
                                $('.waveplay:eq('+index+')').css("display", "inline-block");
                                $('.wavefileDownload:eq('+index+')').css("display", "inline-block");
                            });
                            players[index].on('play', function () {
                                //wave.parent().find(".progressBar").remove();
                                $('.waveplay:eq('+index+')').css("display", "none");
                                $('.wavestop:eq('+index+')').css("display", "inline-block");
                                if(inlinePlayer_graphvisible == "onplay")
                                    $("#wave_" + index).show();
                            });
                            players[index].on('pause', function () {
                                $('.waveplay:eq('+index+')').css("display", "inline-block");
                                $('.wavestop:eq('+index+')').css("display", "none");
                                if(inlinePlayer_graphvisible == 'onplay')
                                {
                                    $("#wave_" + index).hide();
                                }
                            });
                            players[index].on('stop', function () {
                                $('.waveplay:eq('+index+')').css("display", "inline-block");
                                $('.wavestop:eq('+index+')').css("display", "none");
                                if(inlinePlayer_graphvisible == 'onplay')
                                {
                                    $("#wave_" + index).hide();
                                }
                            });
                            if(inlinePlayer_playqueue)
                            {
                                players[index].on('finish', function () {
                                    players[index].stop();
                                    var nextIndex = index +1;
                                    if($("#wave_" + nextIndex).length >0)
                                    {
                                        setTimeout(function(){
                                            $("#wave_" + nextIndex).parent().find(".waveplay").click();
                                        }, 200);
                                    }
                                });
                            }
                            if(inlinePlayer_graphvisible != 'never' && inlinePlayer_graphvisible != 'onplay')
                                players[index].load(fileUrl);
                            else
                            {
                                $('.waveplay:eq('+index+')').css("display", "inline-block");
                                $('.wavefileDownload:eq('+index+')').css("display", "inline-block");
                            }
                        });

                    }, 1500);
                }

                //Get file extension from file name
                function getFileExtension(filename) {
                    var ext = /^.+\.([^.]+)$/.exec(filename);
                    return ext == null ? "" : ext[1].toLowerCase();
                }

                //Hover effect of listing row
                function howerEffect(elem) {
                    elem = elem || $(document);
                    $(".jqueryFileTree", elem).unbind();
                    $(".jqueryFileTree", elem).hover(function () {
                        $(this).addClass("rowHover");
                    }, function () {
                        $(this).removeClass("rowHover");
                    });
                }

                //Set hash location, its used to load directory
                function setHashLocation(s) {
                    if (o.setHashLocation) {
                        if (s.toString().length > 0) {
                            hashListener.setHash(s);
                        }
                    }
                }

                //Get current hast location
                function getHash() {
                    return document.location.hash;
                }

                //Show buttons based on privs
                function showButtonsBasedOnPriviledge() {
                    if(window.listingPageShown)return;
                    renderButtons();
                    applyPrivs();
                    if(!$(document).data("folderPrivs"))
                        $("div.mainNavigation").find("a[href!='javascript:doLogout();']").parent().remove();
                    $("div.mainNavigation").unblock();
                }

                /*Pagination methods*/
                window.current_page = o.pagingCurrentPage;
                var panel = $(".pagination");

                //Number of pages based on page size
                function numPages(customItem) {
                    var curDirItems = customItem ? customItem : l;
                    //fix on pagination for the bug #4463 - added by carlos
                    var maxentries = (currentView() != "Thumbnail" && window.l && window.listingInfo.totalItems < l.length && !window.disableDirectoryItemCount) ? l.length : curDirItems.length;
                    var foldersExpanded = $(document).data("expandedFolders");
                    if (typeof foldersExpanded == "undefined" || foldersExpanded == "") {
                        maxentries = curDirItems.length;
                    }
                    bindCountOfFiles();
                    return Math.ceil(maxentries / o.defaultPageSize);
                }

                //Count interval based on page, page count and page size
                function getInterval(customItem) {
                    var ne_half = Math.ceil(o.pagingNumDisplayEntries / 2);
                    var np = numPages(customItem);
                    var upper_limit = np - o.pagingNumDisplayEntries;
                    var start = current_page > ne_half ? Math.max(Math.min(current_page - ne_half, upper_limit), 0) : 0;
                    var end = current_page > ne_half ? Math.min(current_page + ne_half, np) : Math.min(o.pagingNumDisplayEntries, np);
                    return [start, end];
                }

                //Select page, update page size and refresh view
                function pageSelected(page_id, evt, customItem) {
                    $(".pagination").prepend("<span style='margin-right:5px;color:#777;'>(Loading...)</span>");
                    setTimeout(function () {
                        var curDirItems = customItem ? customItem : l;
                        current_page = page_id;
                        o.pagingCurrentPage = current_page;
                        drawPaginationLinks(customItem);
                        updatePageSizeOnLayout(true, customItem);
                        var $parent = $("#filesContainer");
                        $parent.find("tr.subdirectory").each(function () {
                            var rootdir = escape(unescape($(this).attr("rootdir")));
                            var rootPath = escape(unescape(hashListener.getHash().toString().replace("#", "")));
                            rootdir = rootdir.replace(rootPath, '');
                            var level = rootdir.split("/").clean("").length;
                            var padLeft = level * 20;
                            if (padLeft != NaN) {
                                if (padLeft >= 20) {
                                    padLeft += 20; // add next level padding
                                    $(this).find("td.columnName").attr("style", "padding-left:" + padLeft + "px !important;");
                                }
                            }
                        });
                    }, 50);
                }

                //fix on pagination for the bug #4463 - added by carlos
                function refreshPaginationView(refresh){
                    $(".pagination").prepend("<span style='margin-right:5px;color:#777;'>(Loading...)</span>");
                    setTimeout(function () {
                        current_page = 0;
                        o.pagingCurrentPage = current_page;
                        drawPaginationLinks();
                        updatePageSizeOnLayout(refresh);
                    }, 50);
                    bindCountOfFiles();
                }

                //Select page
                function selectPage(page_id) {
                    pageSelected(page_id);
                }

                //Go to prev page
                function prevPage() {
                    if (current_page > 0) {
                        pageSelected(current_page - 1);
                        return true;
                    } else {
                        return false;
                    }
                }

                //Draw pagination links
                function drawPaginationLinks(customItem) {
                    panel.each(function () {
                        var curPanel = $(this);
                        var curDirItems = customItem ? customItem : l;
                        curPanel.empty();
                        var interval = getInterval(customItem);
                        var np = numPages(curDirItems);
                        if (np > 1 || o.pagingControlsShowAlways) {
                            curPanel.show();
                            var getClickHandler = function (page_id) {
                                    return function (evt) {
                                        return pageSelected(page_id, evt, curDirItems);
                                    }
                                }
                            var appendItem = function (page_id, appendopts) {
                                    page_id = page_id < 0 ? 0 : (page_id < np ? page_id : np - 1);
                                    appendopts = jQuery.extend({
                                        text: page_id + 1,
                                        classes: ""
                                    }, appendopts || {});
                                    if (page_id == current_page) {
                                        var lnk = jQuery("<span class='current'>" + (appendopts.text || '...') + "</span>");
                                        if(appendopts.classes == "next" || appendopts.classes == "prev")
                                            lnk = jQuery("<span class='current disable'>" + (appendopts.text || '...') + "</span>");
                                    } else {
                                        var lnk = jQuery("<a>" + (appendopts.text) + "</a>").bind("click", getClickHandler(page_id)).attr('href', "javascript:void(0);");
                                    }
                                    if (appendopts.classes) {
                                        lnk.addClass(appendopts.classes);
                                    }
                                    curPanel.append(lnk);
                                }
                            if (getLocalizationKey("pagingPrevText")) {
                                appendItem(current_page - 1, {
                                    text: getLocalizationKey("pagingPrevText"),
                                    classes: "prev"
                                });
                            }
                            if (interval[0] > 0 && o.pagingNumEdgeEntries > 0) {
                                var end = Math.min(o.pagingNumEdgeEntries, interval[0]);
                                for (var i = 0; i < end; i++) {
                                    appendItem(i);
                                }
                                if (o.pagingNumEdgeEntries < interval[0] && getLocalizationKey("pagingEllipseText")) {
                                    jQuery("<span>" + getLocalizationKey("pagingEllipseText")+ "</span>").appendTo(curPanel);
                                }
                            }
                            for (var i = interval[0]; i < interval[1]; i++) {
                                appendItem(i);
                            }
                            if (interval[1] < np && o.pagingNumEdgeEntries > 0) {
                                if (np - o.pagingNumEdgeEntries > interval[1] && getLocalizationKey("pagingEllipseText")) {
                                    jQuery("<span>" + getLocalizationKey("pagingEllipseText") + "</span>").appendTo(curPanel);
                                }
                                var begin = Math.max(np - o.pagingNumEdgeEntries, interval[1]);
                                for (var i = begin; i < np; i++) {
                                    appendItem(i);
                                }
                            }
                            if (getLocalizationKey("pagingNextText")) {
                                appendItem(current_page + 1, {
                                    text: getLocalizationKey("pagingNextText"),
                                    classes: "next"
                                });
                            }
                        } else {
                            curPanel.hide();
                        }
                        if(window.current_page>0 && window.current_page>np-1)
                            pageSelected(np-1);
                    });
                }
                /*End :: Pagination methods*/

                //Build breadcrumbs
                function bindBreadcrumbs() {
                    var hashLoc = unescape(hashListener.getHash().toString().replace("#", ""));
                    if(o.buggyBrowser)
                    {
                        try{
                            hashLoc = decodeURI(hashListener.getHash().toString().replace("#", ""));
                        }catch(ex){}
                    }
                    var dirs = hashLoc.split("/");
                    var crumbs = "";
                    var items = 0;

                    function getLocation(num) {
                        var newLoc = "";
                        for (var i = 0; i < num; i++) {
                            newLoc += dirs[i] + "/";
                        }
                        return crushFTPTools.decodeURILocal(newLoc);
                    }
                    for (var i = dirs.length - 1; i > 0; i--) {
                        if (i < dirs.length - 2) {
                            crumbs = "<li><a href='#" + escape(getLocation(i + 1)) + "'>" + crushFTPTools.textEncode(dirs[i]) + "</a></li>" + crumbs;
                        } else {
                            crumbs = "<li>" + crushFTPTools.textEncode(dirs[i]) + "</li>" + crumbs;
                        }
                        items += 1;
                    }
                    var userName = $(document).data("root_dir_name") || $(document).data("username") || "Home";
                    if(typeof window.rootDirectoryNameToDisplayInBreadcrumbs != "undefined")
                        userName = window.rootDirectoryNameToDisplayInBreadcrumbs;
                    if(window.homeCustomTextFormat)
                    {
                        var text = window.homeCustomTextFormat + "";
                        for(var key in window.userInfo){
                            var exp = "{" + key + "}";
                            text = text.replace(new RegExp(exp, 'g'), window.userInfo[key]);
                        }
                        if(text){
                            userName = text;
                        }
                    }
                    if(items<=1)
                        crumbs = "<li class='home'><a href='#/' class='userHome single'>" + userName + "</a></li>" + crumbs;
                    else
                        crumbs = "<li class='home'><a href='#/' class='userHome'>" + userName + "</a></li>" + crumbs;

                    var crumbsPanel = $("#crumbs");
                    crumbsPanel.parent().find("span.refreshButton").remove();
                    if(window.customPaddedBreadCrumbs)
                    {
                       hashLoc = crushFTPTools.textEncode(hashLoc);
                       crumbsPanel.html(crumbs).after("<span title='"+getLocalizationKey("refreshListingButtonTooltipText")+"' class='refreshButton' rel='" + hashLoc + "'><img src='" + o.refreshImageURL + "' /></span>");
                       if(crumbsPanel.find("li.home").find(".homeBreadCrumbDivider").length==0)
                        crumbsPanel.find("li.home").prepend("<span class='homeBreadCrumbDivider'></span>");
                    }
                    else
                    {
                        hashLoc = crushFTPTools.textEncode(hashLoc);
                        crumbsPanel.html(crumbs).append("<span title='"+getLocalizationKey("refreshListingButtonTooltipText")+"' class='refreshButton' rel='" + hashLoc + "'><img src='" + o.refreshImageURL + "' /></span>");
                    }
                    var refreshButton = $(".refreshButton").unbind().click(function (event, callback) {
                        window.last_search_item = false;
                        window.current_page = o.pagingCurrentPage = 0;
                        var path = "";
                        try{
                            path = crushFTPTools.encodeURILocal($(this).attr("rel"));
                        }
                        catch(ex){
                            path = $(this).attr("rel");
                        }
                        if (currentView() == "Thumbnail") {
                            showTree($("#filesContainerDiv"), path, true, true, callback);
                        } else {
                            var spanTop = $(document).scrollTop();
                            var expandedFolders = createPathHierarchy([$(document).data("expandedFolders")]);
                            showTree($("#filesContainer"), path, true, true, function(){
                                setTimeout(function() {
                                    if(isCrush7Ready())
                                    {
                                        loading.show();
                                        window.expandItems(expandedFolders, function(){
                                            loading.hide();
                                        });
                                        $('body').removeClass('stop-scrolling');
                                        if ($('html,body').scrollTop() < spanTop) {
                                            $('html,body').animate({
                                                scrollTop: spanTop
                                            }, 0, false);
                                        }
                                    }
                                }, 100);
                                if(callback)
                                    callback();
                            });
                        }
                    });

                    crumbsPanel.find("a.userHome").click(function(event) {
                        if(window.disableBreadcrumbsHomeLink)
                        {
                            return false;
                        }
                        var hashLoc = unescape(hashListener.getHash().toString().replace("#", ""));
                        hashLoc = hashLoc || "/";
                        if(hashLoc == "/")
                        {
                            refreshButton.trigger('click');
                        }
                    });
                    if(typeof window.breadCrumbsRefreshButtonImage != "undefined")
                    {
                        $("#crumbs>.refreshButton>img").attr('src', window.breadCrumbsRefreshButtonImage);
                    }
                }

                var border_right = $(window).width();
                var vtip = function (el, basket) {
                    var lOffset = currentView(basket) == "Thumbnail" ? 20 : 40;
                    var tOffset = currentView(basket) == "Thumbnail" ? 0 : 0;
                    el = el || $(".vtip");
                    $(el).cluetip({
                        splitTitle: '^',
                        showTitle: false,
                        width: 'auto',
                        cluetipClass: 'default',
                        clickThrough : true,
                        arrows: true,
                        tracking: true,
                        positionBy: 'mouse',
                        mouseOutClose: true,
                        dropShadowSteps: 0,
                        leftOffset: lOffset,
                        topOffset: tOffset,
                        dynamicLeftOffset: false
                    });
                };
                if (navigator.userAgent.indexOf('MSIE') !== -1 || navigator.appVersion.indexOf('Trident/') > 0 || navigator.appVersion.indexOf("Edge") != -1) {
                    $("html").addClass('ie');
                }
                //All events to initiate on page load :: vipul
                if($.browser.msie && $.browser.version < 10)
                {
                    $("#dndInfoTextHolder").remove();
                }
                window.verifyUserStatus();
                // Loading message
                $(this).html('<table cellpadding="0" cellspacing="0" class="jqueryFileTree start"></table>');
                blockFileListingUI(true);
                // Get the initial file list
                bindUserName(true);

                $("#delayedUploadTime").bind("change", function(){
                    $("#delayUploadTypeDate").attr("checked", "checked");
                });

                if(typeof window.defaultImagePath != "undefined")
                {
                    $("img[src*='/WebInterface/jQuery/images/']").each(function(){
                        $(this).attr("src", $(this).attr("src").replace("/WebInterface/jQuery/images/", window.defaultImagePath));
                    })
                }

                if(typeof window.popupCloseIconImagePath != "undefined")
                {
                    var imgPath = "";
                    var curImg = window.popupCloseIconImagePath;
                    if(curImg.toLowerCase().indexOf("http://")<0 && curImg.toLowerCase().indexOf("https://")<0)
                    {
                        imgPath = "/WebInterface/images/" + curImg;
                    }
                    else
                    {
                        imgPath = curImg;
                    }
                    $("img.closeButton").attr("src", imgPath);
                }

                /*Session checker will get version information, based on it new features will be show/hide/initiated*/
                $(".enterpriseFeature").hide();
                if ($("#SessionSeconds").sessionChecker)
                {
                    $("#SessionSeconds").sessionChecker({
                        callBack:function(){
                            if (($(document).data("crushftp_version")+"").indexOf("6") >= 0) //show new features
                            {
                                if ($(document).data("crushftp_enterprise")) //show new features
                                {
                                    $(".enterpriseFeature").show();
                                }
                                else
                                {
                                    $(".enterpriseFeature").remove();
                                }
                            }
                            else
                            {
                                userLoginStatusCheckThread();
                            }
                            bindUserCustomizationInfo();
                            applyLocalizations();
                        }
                    });
                }
                if(window.forSlideshow)
                {
                    bindUserCustomizationInfo();
                    applyLocalizations();
                }

                var currentViewType = $.cookie(o.ViewCookieName);
                if (currentViewType && currentViewType == "Thumbnail") {
                    $(".thumbnailViewLink", "#viewSelectorPanel").animate({
                        opacity: 0.3
                    }, 500);
                } else {
                    $(".treeViewLink", "#viewSelectorPanel").animate({
                        opacity: 0.3
                    }, 500);
                }
                if (currentView(true) == "Thumbnail") {
                    $(".thumbnailViewLink", "#viewSelectorPanelBasket").animate({
                      opacity: 0.3
                    }, 500);
                } else {
                    $(".treeViewLink", "#viewSelectorPanelBasket").animate({
                        opacity: 0.3
                    }, 500);
                }
                updatePageSizeOnLayout();
                loadPopupContent();
                bindPagingSizeMenu();
                bindLanguageMenu();
                bindSelectionMenu();
                $("#searchForm").attr("action", o.ajaxCallURL);

                bindBackToTop();
                $("#searchResultNotification").find("a").click(function () {
                    $("#filter").val("").keyup().blur();
                    $(document).removeData("searchData");
                    window.last_search_item = "";
                    //window.reloadFromCachedData = true;
                    $(".refreshButton").click();
                    //window.reloadFromCachedData = false;
                });
                $("#selectionOfItemsOptions").find("a.options").click(function () {
                    window.listingInfo.selectedEverything = true;
                    showSelectionInfoBar();
                    fileselectionUpdated();
                });
                $("#selectionOfItemsOptions").find("a.actions").click(function () {
                    window.listingInfo.selectedEverything = false;
                    var tbl = $("#filesListing").find("table");
                    toggleCheckBoxesAll(tbl, false);
                    toggleMainCheckbox(tbl, false);
                    selectDeselectAllItems(false);
                });

                if(!$(document).data("uploadOnly"))
                {
                    $(window).scroll(function () {
                        stickyRelocate();
                    });
                    $(window).bind("resize", function () {
                        stickyRelocate();
                    });
                    stickyRelocate();
                }
                if($(document).data("slideShowOnly"))
                {
                    if(!$.CrushFTP.DNDAdded)
                    {
                        $.CrushFTP.attachDND(o);
                        $.CrushFTP.DNDAdded = true;
                    }
                }
                window.isMobileDevice = /Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent);
                window.OSName = "unknown";
                if (navigator.appVersion.indexOf("Win")!=-1) window.OSName="windows";
                else if (navigator.appVersion.indexOf("Mac")!=-1) window.OSName="mac";
                else if (navigator.appVersion.indexOf("X11")!=-1) window.OSName="unix";
                else if (navigator.appVersion.indexOf("Linux")!=-1) window.OSName="linux";
                $.cookie("Crush5HTML","true")
                if($.cookie("Crush5HTML")!=null)
                {
                    $.cookie("Crush5HTML", "", {
                        path: '/',
                        expires: -1
                    });
                }
                if($.cookie("Crush5WI")!=null)
                {
                    $.cookie("Crush5WI", "", {
                        path: '/',
                        expires: -1
                    });
                }

                if(window.location.port === "55555"){
                    window.useOldUploader = sessionStorage["uploadUseNew"] == "false";
                    var uploadSwitcher = $("#uploadSwitcher").show().click(function(){
                        if(confirm("Switching upload method will reload WebInterface which might interrupt any ongoing operations, are you sure you wish to continue?"))
                        {
                            sessionStorage["uploadUseNew"] = sessionStorage["uploadUseNew"] == "false" ? "true" : "false";
                            window.location.reload();
                        }
                        return false;
                    });
                    if(window.useOldUploader){
                        uploadSwitcher.text("Switch to new upload method");
                    }
                    else{
                        uploadSwitcher.text("Switch to old upload method");
                    }
                }
            });
        }
    });
})(jQuery);

function isScrolledIntoView(elem) {
    if(!elem ||  elem.length ==0) return;
    var docViewTop = $(window).scrollTop();
    var docViewBottom = docViewTop + $(window).height();
    var elemTop = $(elem).offset().top;
    var elemBottom = elemTop + $(elem).height();
    return ((elemBottom >= docViewTop) && (elemTop <= docViewBottom));
}

function stickyRelocate() {
    if($(document).data("uploadOnly") || window.isMobileDevice || window.noStickyItems)return;
    var sticky = $('#mainNavigation, #fileQueueInfo, #dropItemsPanel, #javaAppletDiv');
    if($.CrushFTP.uploadBarInline)
        sticky = $('#mainNavigation, #dropItemsPanel');
    if (!isScrolledIntoView($('#mainNav-anchor'))) {
        if($(".blockUI.blockMsg.blockPage:visible").length==0)
            sticky.addClass('stick');
        else
            sticky.removeClass('stick');
        if($("#paddingPanel").length == 0)
            $("body").append("<div id='paddingPanel' style='height:100px'></div>");
        if(!$.CrushFTP.uploadBarInline)
        {
            var mainNavHeight = $("#mainNavigation").height();
            $("div#fileQueueInfo.stick").css("top", (mainNavHeight + 3) + "px");
        }
    }
    else {
        sticky.removeClass('stick');
        $("#paddingPanel").remove();
    }
}

$.blockUI.defaults.baseZ = 1111;

//Initialize tabs
function initTabs() {
    $('.customtabs').each(function () {
        $(this).siblings('div').children('div:gt(0)').hide();
        $(this).children('a:first').addClass('active');
        $(this).find('a').click(function () {
            setTabByHandler(this);
            return false;
        });
    });
}

var crushFTPTools = {
    queryString : function(name) {
        var match = RegExp('[?&]' + name + '=([^&]*)').exec(window.location.search);
        var param = match && decodeURIComponent(match[1].replace(/\+/g, ' '));
        return param || "";
    },
    getCrushAuth : function(){
        var auth = $.cookie("currentAuth");
        if(auth && auth.length>0)
            return auth;//.substr(auth.length - 4);
        else
            return false;
    },
    getCrushAuthToken : function(callback){
        if($(document).data("appletAuth"))
        {
            callback($(document).data("appletAuth"));
            return false;
        }
        var obj = {
            command: "getCrushAuth",
            random: Math.random()
        };
        obj.c2f = crushFTPTools.getCrushAuth();
        $.ajax({
            type: "POST",
            url: "/WebInterface/function/",
            data: obj,
            async : false,
            error: function (XMLHttpRequest, textStatus, errorThrown) {
                callback(false);
            },
            success: function (msg) {
                var auth = unescape($(msg).find("auth").text());
                try {
                    if (callback) {
                        callback(auth.replace("CrushAuth=", ""));
                    }
                } catch (ex) {
                    if (callback) {
                        callback(false);
                        return false;
                    }
                }
            }
        });
    },
    xmlUnSafeCharsMapping : {
        '&': '&amp;',
        '"': '&quot;',
        "'" : '&apos;',
        '<': '&lt;',
        '>': '&gt;'
    },
    xmlUnSafeCharsMappingReverse : {
        '&amp;' : '&',
        '&quot;' : '"',
        '&apos;' : "'",
        '&lt;' : '<',
        '&gt;' : '>',
        '%2B' : '+',
        '%25' : '%'
    },
    xmlEncode : function(value,onlyHTML)
    {
        if (value == undefined || value.length == 0) return value;
        if(onlyHTML)
        {
            try{
                value = crushFTPTools.decodeURILocal(value);
            }
            catch(ex){
                value = value;
            }
            return value.replace(/([\&'"<>])/g, function(str, item) {
              return crushFTPTools.xmlUnSafeCharsMapping[item];
            });
        }
        else
        {
            return value.replace(/([\&'"<>])/g, function(str, item) {
                return crushFTPTools.xmlUnSafeCharsMapping[item];
            }).replace(/\%/g, "%25").replace(/\+/g, "%2B");
        }
    },
    decodeXML : function(value)
    {
        if (value == undefined || value.length == 0) return value;
         return value.replace(/(&quot;|&lt;|&gt;|&amp;|&apos;|%2B|%25)/g,
            function(str, item) {
                return crushFTPTools.xmlUnSafeCharsMappingReverse[item];
        });
    },
    htmlEncode : function(value, encodeVal, onlyHTML) {
        if(value != undefined && value.length>0)
        {
            var lines = value.split(/\r\n|\r|\n/);
            for (var i = 0; i < lines.length; i++) {
                if(lines[i] && typeof lines[i] == "string")
                lines[i] = crushFTPTools.xmlEncode(lines[i], onlyHTML);
            }
            if(encodeVal)
                return crushFTPTools.encodeURILocal(lines.join('\r\n'));
            else
                return lines.join('\r\n');
        }
        else
            return value;
    },
    decodeURILocal : function(val)
    {
        var _val = val;
        try{
            _val = decodeURIComponent(val);
        }
        catch(ex){
        }
        return _val;
    },
    /* added by carlos */
    limitText : function(val, limite)
    {
        var _val = (val.length > limite) ? val.substring(0,limite) + '...' : val;

        return _val;
    },
    encodeURILocal : function(val)
    {
        var _val = val;
        try{
            _val = encodeURIComponent(val);
        }
        catch(ex){}
        return _val;
    },
    textEncode : function(val){
        return $("<div>").text(val).html();
    },
    xssEncode : function(val){
        return crushFTPTools.htmlEncode(crushFTPTools.textEncode(unescape(val)));
    },
    sanitize : function(str){
        var tagBody = '(?:[^"\'>]|"[^"]*"|\'[^\']*\')*';
        var tagOrComment = new RegExp(
            '<(?:'
            // Comment body.
            + '!--(?:(?:-*[^->])*--+|-?)'
            // Special "raw text" elements whose content should be elided.
            + '|script\\b' + tagBody + '>[\\s\\S]*?</script\\s*'
            + '|style\\b' + tagBody + '>[\\s\\S]*?</style\\s*'
            // Regular name
            + '|/?[a-z]'
            + tagBody
            + ')>',
            'gi');
        function removeTags(html) {
          var oldHtml;
          do {
            oldHtml = html;
            html = html.replace(tagOrComment, '');
          } while (html !== oldHtml);
          return html.replace(/</g, '&lt;');
        }
        return removeTags(str);
    }
};

//Set current tab based on element
function setTabByHandler(elm) {
    if (elm && !$(elm).hasClass("disabledClick")) {
        var current_content_div = '#' + $(elm).attr('rel');
        $(elm).siblings().removeClass('active');
        $(elm).addClass('active');
        $(current_content_div).siblings().hide();
        $(current_content_div).show();
    }
    $(elm).blur();
    return false;
}

//Set current tab based on elem name
function setTabToElem(elm) {
    setTabByHandler($("a[rel='" + elm + "']:first"));
}

//Method to clear all items in current form
$.fn.clearForm = function () {
    return this.each(function () {
        var type = this.type,
            tag = this.tagName.toLowerCase();
        if (tag == 'form' || tag == 'div') return $(':input', this).clearForm();
        if (type == 'text' || type == 'password' || tag == 'textarea') this.value = '';
        else if (type == 'checkbox' || type == 'radio') this.checked = false;
        else if (tag == 'select') this.selectedIndex = -1;
    });
};

window.growl = function(title, content, warning, expires){
    $("#growlContainer").notify({
        speed: 500,
        expires: expires
    });
    var handler = $("#growlContainer")
        .notify({ custom:true })
        .notify("create", { title:title, text:content });
    $(handler.element).removeClass("ui-state-error ui-state-highlight");
    if(warning)
    {
        $(handler.element).addClass("ui-state-error");
    }
    else
    {
        $(handler.element).addClass("ui-state-highlight");
    }
}

window.keepSessionAlive = function(){
    if(window.delayedUploadSet && window.sessionLength)
    {
        function refrehsSession(callBack)
        {
            var obj = {
                command: "getUserInfo",
                path : "/",
                random: Math.random()
            };
            obj.c2f = crushFTPTools.getCrushAuth();
            $.ajax({
                type: "POST",
                url: "/WebInterface/function/",
                data: obj,
                error: function (XMLHttpRequest, textStatus, errorThrown) {
                    callBack(false);
                },
                success: function (msg) {
                    var responseText = msg;
                    try {
                        if (callBack) {
                            callBack(msg);
                        }
                    } catch (ex) {
                        if (callBack) {
                            callBack(false);
                            return false;
                        }
                    }
                }
            });
        }
        refrehsSession(function(flag){

        });
        setTimeout(keepSessionAlive, (window.sessionLength/2)*1000);
    }
}

window.cancelDelayedUpload = function(flag){
    if(flag)
    {
        if(confirm(getLocalizationKeyExternal("DelayedUploadConfirmCancelText")))
        {
            window.cancelDelayedUpload();
        }
        return false;
    }
    if(window.delayedUploadTimer)
    {
        clearTimeout(window.delayedUploadTimer);
        window.delayedUploadTimer = false;
    }
    $("#delayedUploadIndicator").hide();
    window.delayedUploadSetAt =
    window.delayedUploadSet = false;
}

window.delayUploadCounter = function(){
    if(window.delayedUploadSet)
    {
        var setAt = window.delayedUploadSetAt;
        var now = new Date();
        var diff = now - setAt;
        var remaining = window.delayedUploadSet - diff;
        function padtime(time) {
            if (time<=99) { time = ("0"+time).slice(-2); }
            return time;
        }
        function secondsToString(seconds)
        {
            var numhours = padtime(Math.floor(((seconds % 31536000) % 86400) / 3600));
            var numminutes = padtime(Math.floor((((seconds % 31536000) % 86400) % 3600) / 60));
            var numseconds = padtime(Math.floor((((seconds % 31536000) % 86400) % 3600) % 60));
            return numhours + ":" + numminutes + ":" + numseconds;
        }
        $("#delayedUploadIndicator").find("span.remaining").text(secondsToString(remaining / 1000));
        setTimeout(window.delayUploadCounter, 1000);
    }
};

window.setDelayedUpload = function(){
    var time;
    if($("#delayUploadTypeMinute").is(":checked"))
    {
        try{
            time = parseFloat($("#txtUploadTimeout").val()) * 60 * 1000;
        }catch(ex){
            alert(getLocalizationKeyExternal("DelayedUploadNonNumericValAlertText"));
            return;
        }
    }
    else
    {
        var selectedTime = $("#delayedUploadTime").datepicker("getDate");
        if(selectedTime && selectedTime !== null)
        {
            var now = new Date();
            var diffMs = selectedTime - now;
            time = diffMs;
            if(time<=0)
            {
                alert(getLocalizationKeyExternal("DelayedUploadPastTimeAlertText"));
                return;
            }
        }
    }
    var overwrite = $("#chkOverwriteFilesForDelayedupload").is(":checked");
    if(time)
    {
        if(window.delayedUploadTimer)
        {
            clearTimeout(window.delayedUploadTimer);
        }
        var delayedUploadIndicator = $("#delayedUploadIndicator").show();
        var evtTime = new Date();
        evtTime = new Date(evtTime.getTime() + (time));
        delayedUploadIndicator.find("span.time").text(evtTime.format("hh:nn TT"));
        window.delayedUploadSet = time;
        window.delayedUploadSetAt = new Date();
        window.keepSessionAlive();
        window.delayedUploadTimer = setTimeout(function() {
            var fileRepo = $("#fileRepo");
            if(overwrite)
            {
                fileRepo.find(".overwriteLink").click();
                fileRepo.find("#overwriteAllLinkBtn").click();
            }

            fileRepo.find("a.startUploading").click();
            window.cancelDelayedUpload();
        }, time);
        window.delayUploadCounter();
        $.unblockUI();
    }
    else
    {
        alert(getLocalizationKeyExternal("DelayedUploadNonNumericValAlertText"));
        return;
    }
}

var Base64={_keyStr:"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=",encode:function(e){var t="";var n,r,i,s,o,u,a;var f=0;e=Base64._utf8_encode(e);while(f<e.length){n=e.charCodeAt(f++);r=e.charCodeAt(f++);i=e.charCodeAt(f++);s=n>>2;o=(n&3)<<4|r>>4;u=(r&15)<<2|i>>6;a=i&63;if(isNaN(r)){u=a=64}else if(isNaN(i)){a=64}t=t+this._keyStr.charAt(s)+this._keyStr.charAt(o)+this._keyStr.charAt(u)+this._keyStr.charAt(a)}return t},decode:function(e){var t="";var n,r,i;var s,o,u,a;var f=0;e=e.replace(/[^A-Za-z0-9\+\/\=]/g,"");while(f<e.length){s=this._keyStr.indexOf(e.charAt(f++));o=this._keyStr.indexOf(e.charAt(f++));u=this._keyStr.indexOf(e.charAt(f++));a=this._keyStr.indexOf(e.charAt(f++));n=s<<2|o>>4;r=(o&15)<<4|u>>2;i=(u&3)<<6|a;t=t+String.fromCharCode(n);if(u!=64){t=t+String.fromCharCode(r)}if(a!=64){t=t+String.fromCharCode(i)}}t=Base64._utf8_decode(t);return t},_utf8_encode:function(e){e=e.replace(/\r\n/g,"\n");var t="";for(var n=0;n<e.length;n++){var r=e.charCodeAt(n);if(r<128){t+=String.fromCharCode(r)}else if(r>127&&r<2048){t+=String.fromCharCode(r>>6|192);t+=String.fromCharCode(r&63|128)}else{t+=String.fromCharCode(r>>12|224);t+=String.fromCharCode(r>>6&63|128);t+=String.fromCharCode(r&63|128)}}return t},_utf8_decode:function(e){var t="";var n=0;var r=c1=c2=0;while(n<e.length){r=e.charCodeAt(n);if(r<128){t+=String.fromCharCode(r);n++}else if(r>191&&r<224){c2=e.charCodeAt(n+1);t+=String.fromCharCode((r&31)<<6|c2&63);n+=2}else{c2=e.charCodeAt(n+1);c3=e.charCodeAt(n+2);t+=String.fromCharCode((r&15)<<12|(c2&63)<<6|c3&63);n+=3}}return t}}
String.prototype.endsWith = function(str)
{
    return (this.match(str+"$")==str);
}
if(location.hostname.endsWith("."))
{
    location.hostname = location.hostname.substring(0, location.hostname.length-1);
}

jQuery.fn.insertAt = function(index, element) {
  var lastIndex = this.children().size()
  if (index < 0) {
    index = Math.max(0, lastIndex + 1 + index)
  }
  this.append(element)
  if (index < lastIndex) {
    this.children().eq(index).before(this.children().last())
  }
  return this;
}

window.Clipboard = (function(window, document, navigator) {
    var textArea,
        copy;

    function isOS() {
        return navigator.userAgent.match(/ipad|iphone/i);
    }

    function createTextArea(text) {
        textArea = document.createElement('textArea');
        textArea.value = text;
        document.body.appendChild(textArea);
    }

    function selectText() {
        var range,
            selection;

        if (isOS()) {
            range = document.createRange();
            range.selectNodeContents(textArea);
            selection = window.getSelection();
            selection.removeAllRanges();
            selection.addRange(range);
            textArea.setSelectionRange(0, 999999);
        } else {
            $(textArea).select();
            setTimeout(function(){$(textArea).select().focus()});
        }
    }

    function copyToClipboard() {
        document.execCommand('copy');
        document.body.removeChild(textArea);
    }

    copy = function(text) {
        createTextArea(text);
        selectText();
        if(navigator.appVersion.indexOf("Edge") != -1)
            copyToClipboard();
        setTimeout(copyToClipboard, 200);
    };

    return {
        copy: copy
    };
})(window, document, navigator);


var copyToClipboard = function(data){
    Clipboard.copy(data);
}

var loading = {
    init : function(){
        this.panel = $("#loadingIndicator").hide();
        if(this.panel.dialog("instance"))
            return;
        this.panel.dialog({
            autoOpen: false,
            dialogClass: "loadingIndicatorWindow",
            closeOnEscape: false,
            draggable: false,
            width: window.loadingIndicatorDialogWidth || 150,
            minHeight: 50,
            modal: false,
            buttons: {},
            resizable: false,
            open: function() {
                $('body').css('overflow','hidden');
            },
            close: function() {
                $('body').css('overflow','auto');
                $(this).dialog('destroy');
            }
        });
    },
    shown : false,
    count : 0,
    panel : $("#loadingIndicator"),
    modal : false,
    show : function(modal){
        this.init();
        if(modal && this.panel.dialog){
            this.modal = modal;
            this.panel.dialog("option", "modal", true);
        }
        if(!this.shown && this.panel.dialog){
            this.panel.dialog('open');
            this.shown = true;
        }
        this.count++;
    },
    hide : function(force){
        this.count--;
        this.count = this.count<0 ? 0 : this.count;
        if(force)
            this.count = 0;
        if(this.count == 0 && this.panel.dialog){
            try{
                if(!this.panel.dialog("instance"))
                    return;
                var that = this;
                setTimeout(function(){
                    that.init();
                    that.panel.dialog("option", "modal", false);
                    //that.panel.dialog('close');
                })
                this.shown = false;
                var that = this;
                setTimeout(function(){
                    if(!that.shown){
                        that.init();
                        if(that.panel.dialog("instance")){
                            that.panel.dialog("option", "modal", false);
                            that.panel.dialog('close');
                            that.panel.hide();
                        }
                    }
                }, 500);
            }catch(ex){}
        }
    }
};